{"version":3,"sources":["assets/images/logo1.svg","wallet/state/models/wallet-view.ts","assets/logo.svg","assets/images/guy_welcomes@2x.png","wallet/state/models/index.ts","serviceWorker.ts","shared/helpers/toast.helper.tsx","shared/models/provider.ts","register/state/models/register-stage.ts","shared/loading-bar/state/loading-bar.actions.ts","shared/http/http.ts","shared/loading-bar/state/loading-bar.selectors.ts","shared/loading-bar/containers/loading-bar/loading-bar.component.tsx","shared/helpers/test/test-id-builder.helper.ts","shared/components/AboutPage/AboutPage.tsx","shared/util/timeout.ts","register/state/register.actions.ts","register/state/helpers/stage.helper.ts","register/state/register.reducer.ts","register/state/helpers/seed.helper.ts","wallet/state/wallet.actions.ts","register/state/register.selectors.ts","register/state/register.epics.ts","state-migrations.ts","shared/util/from.ts","shared/util/round-number.ts","wallet/state/helpers/amounts.helper.ts","wallet/state/helpers/navigation.helper.ts","wallet/state/helpers/wallets.helper.ts","wallet/state/wallet.reducer.ts","shared/operators/handle-epic-error.operator.ts","shared/operators/filter-actions.operator.ts","wallet/state/wallet.selectors.ts","shared/util/waves-bug.ts","wallet/api/zeropool.api.ts","state.ts","shared/util/not-implemented.ts","wallet/api/rates.api.ts","wallet/state/wallet.epics.ts","shared/util/promise-with-error.ts","wallet/state/helpers/map-rates-to-tokens.ts","wallet/state/helpers/update-balances.helper.ts","shared/operators/get-payload.operator.ts","shared/loading-bar/state/loading-bar.reducer.ts","register/components/SeedTag/SeedTag.tsx","shared/util/shuffle.ts","register/components/SeedPanel/SeedPanel.tsx","register/components/StepOne/StepOne.tsx","register/components/StepTwo/StepTwo.tsx","register/components/Welcome/Welcome.tsx","register/components/StepFour/StepFour.tsx","register/components/StepThree/StepThree.tsx","register/components/Perl/Perl.tsx","register/components/StepHeader/StepHeader.tsx","register/components/ImportAccount/ImportAccount.tsx","register/containers/CreateAccount/CreateAccountPage.tsx","shared/components/HelpPage/HelpPage.tsx","shared/util/css-mod.ts","shared/util/cap-first-letter.ts","shared/components/RoundButton/RoundButton.tsx","shared/components/Icon/Icon.tsx","wallet/components/WalletHeader/WalletHeaderMode.tsx","wallet/components/ExpandButton/ExpandButton.tsx","wallet/components/WalletRow/WalletRow.tsx","wallet/components/EditWallet/EditWallet.tsx","wallet/components/DeleteWallet/DeleteWallet.tsx","wallet/components/Wallets/Wallets.tsx","wallet/components/SendConfirmation/SendConfirmation.tsx","wallet/components/WalletHeader/WalletHeader.tsx","shared/hooks/use-navigate-back.ts","wallet/state/helpers/total.helper.ts","wallet/components/TokenRow/TokenRow.tsx","wallet/components/Balance/Balance.tsx","wallet/components/Receive/Receive.tsx","shared/helpers/addres.helper.ts","shared/helpers/validators/eth.validator.ts","wallet/components/Send/Send.tsx","wallet/components/Log/Log.tsx","wallet/containers/WalletPage/WalletPage.tsx","theme.ts","index.tsx","shared/http/interceptors/loading-bar.interceptor.ts","shared/http/interceptors/auth.interceptor.ts"],"names":["module","exports","WalletView","Boolean","window","location","hostname","match","useSnackbarRef","Provider","InnerSnackbarUtilsConfigurator","props","setUseSnackbarRef","useSnackbar","useSnackbarRefProp","SnackbarUtilsConfigurator","success","msg","options","this","toast","variant","warning","info","error","enqueueSnackbar","RegisterStage","loadingBarActions","addRequest","create","removeRequest","instance","http","axios","getActiveRequestCount","createSelector","state","shared","loadingBar","requestsInProgress","showLoadingBar","activeRequests","css","cn","LoadingBar","useSelector","className","testIdBuilder","baseName","names","reduce","prev","curr","test","AboutPage","showBackButton","dispatch","useDispatch","data-testid","src","logo","alt","Button","color","onClick","push","timeout","delay","Promise","res","setTimeout","registerActions","stepBack","startRegisterAccount","generateSeed","submitSeed","confirmSeed","register","reset","startImportAccount","importAccount","initialRegisterState","stage","undefined","seed","seedConfirmed","showSteps","registerReducer","createReducer","handleAction","actions","IMPORT","STEP1","Number","includes","STEP2","getPreviousStage","generateMnemonic","split","STEP3","STEP4","password","walletActions","apiError","addWallet","addWalletSuccess","addWalletError","openBalanceView","openWalletsView","openLogView","openReceiveView","openSendInitialView","prepareSendConfirmView","openSendConfirmView","initWallets","updateWallets","updateWalletsSuccess","updateWalletsError","refreshAmounts","getRates","getRatesSuccess","getRatesError","headerBack","menu","edit","send","setSeed","setSeedSuccess","setSeedError","hideWallet","resetAccount","getRegisterState","getRegisterStage","getRegisterSeed","getShowSteps","registerEpics","combineEpics","action$","state$","pipe","filter","isActionOf","switchMap","action","payload","join","of","withLatestFrom","map","stateMigrations","0","newState","recordFromArray","array","id","obj","item","round","num","decimals","result","toFixed","parseInt","parseFloat","roundNumber","amountsHelper","getAmountsForAllTakens","tokens","wallets","amounts","symbol","token","amount","getAmountsForToken","accu","next","getAmountsForWallet","wallet","getAmounts","activeView","Wallets","activeToken","Receive","Send","SendConfirmation","Log","activeWallet","supportedTokens","navigationHelper","Balance","walletsHelper","name","_wallet","lastValuableIndex","i","length","slice","findIndex","address","initialWalletState","pollSettings","account","offset","supportedTokensRecord","usdRates","walletReducer","Reset","fee","handleEpicError","errorAction","catchError","caught","merge","message","filterActions","actionCreators","isOneAction","argument","getWalletState","getActiveView","getActiveToken","getWallets","getActiveWallet","getWalletsForActiveToken","getSupportedTokens","getSupportedTokensRecord","getUsdRates","getSendData","getSeed","getPollSettings","nearBug","err","hdWallet","_history","notImplemented","RatesApi","proxy","cors","Marketcap","ratesMock","data","walletEpics","Error","errorMessage","activeWallets","lastWallet","newWalletId","coin","getCoin","from","getBalances","reject","balances","fromBaseUnit","balance","private","switchMapTo","rates","ratesMap","quote","USD","price","mapRatesToTokens","mergeMap","coins","HDWallet","devConfig","initHDWallet","CoinType","ethereum","near","waves","settings","tokenId","Object","entries","balanceDataIndex","balanceData","promices","forEach","tokenWallets","walletPromises","getBalance","catch","then","all","tokenIndex","walletIndex","updateBalances","tap","ignoreElements","estimateTxFee","getNetworkFee","sendData","value","to","transfer","toBaseUnit","toString","console","log","mapTo","loadingBarReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","rootEpic","history","createBrowserHistory","persistConfig","key","version","storage","migrate","createMigrate","debug","whitelist","persistedReducer","persistReducer","combineReducers","router","connectRouter","store","createStore","applyMiddleware","routerMiddleware","persistedStore","persistStore","run","SeedTag","text","hidden","hideNumber","Placeholder","sort","Math","random","SeedPanel","classes","check","onCheck","useState","confirmedSeed","setConfirmedSeed","setSuccess","shuffledSeed","setShuffledSeed","useEffect","same","JSON","stringify","bodyTagClickHandler","index","splice","footerTagClickHandler","Paper","tag","str","StepOne","onGenerate","StepTwo","onSubmit","Welcome","onCreate","onImport","onAbout","onMockedLogin","guy","disableElevation","PasswordInputParams","required","pattern","minLength","StepFour","onRegister","useForm","criteriaMode","handleSubmit","control","errors","showPassword","setShowPassword","setPassword","passwordConfirm","setPasswordConfirm","process","FormControl","InputLabel","htmlFor","Input","inputProps","inputRef","onChange","getValues","type","endAdornment","InputAdornment","position","IconButton","aria-label","confirm","onMouseDown","event","preventDefault","Close","Visibility","VisibilityOff","FormHelperText","validate","StepThree","onConfirm","buttonDisabled","setButtonDisabled","Disabled","disabled","Perl","isActive","Active","StepHeader","step","total","onBack","Tooltip","title","placement","disableRipple","ArrowBack","MobileStepper","steps","activeStep","backButton","nextButton","seedInputParamsFactory","validateMnemonic","validateSeed","ImportAccount","input","CreateAccountPage","components","style","margin","HelpPage","href","target","rel","cssMod","charAt","toUpperCase","RoundButton","label","labelPosition","NoLabel","disableFocusRipple","disableTouchRipple","children","component","memo","forwardRef","ref","icon","spaceOn","displayName","WalletHeaderMode","Icon","ExpandButton","expanded","click","Expended","WalletRow","rate","rollUp","onReceiveClick","onSendClick","onEditClick","onRollUpClick","onWalletNameClick","showButtons","setShowButtons","toBeOpened","setToBeOpened","Expanded","Hidden","EditWallet","walletName","onRename","onDelete","onCancel","newName","setNewName","TextField","DeleteWallet","confirmName","setConfirmName","handlers","rollUpSignal","setRollUpSignal","openEditDialog","setOpenEditDialog","openDeleteDialog","setOpenDeleteDialog","selectedWallet","setSelectedWallet","onReceive","onSend","onOpen","onAdd","Dialog","onClose","open","fullWidth","maxWidth","DialogContent","dividers","onConfirmClick","noValidate","autoComplete","axi","WalletHeader","mode","tokenAmount","tokenSymbol","fiatValue","hideBackButton","tokenName","onBackClick","callback","isInitialMount","useRef","current","addEventListener","pushState","document","URL","useNavigateBack","Info","displayType","thousandSeparator","suffix","decimalScale","t","hasOwnProperty","TokenRow","onSelectToken","tokensRecord","QRCode","require","navigator","clipboard","writeText","validateAddress","isEthereumAddress","onNextClick","setAddress","setAmount","handleAddressPaste","a","readText","prefix","useStyles","makeStyles","theme","root","backgroundColor","flexGrow","flexDirection","display","height","minWidth","menuButton","marginRight","spacing","toolbar","alignItems","paddingTop","minHeight","paddingBottom","toolbarHeader","borderBottom","palette","grey","width","toolbarHeaderItems","justifyContent","toolbarHeaderItemsEdgeStart","marginLeft","toolbarBody","alignSelf","drower","drowerItem","paddingRight","drowerItemIcon","drowerItemText","wrapper","footer","bottom","zeroPaddingRight","WalletPage","setState","view","handleExportSeed","toggleDrawer","walletsButtonHandlers","walletHeaderMode","Help","About","walletHeaderLabels","AppBar","Toolbar","edgeStart","edge","Badge","badgeContent","values","actualView","SwipeableDrawer","role","onKeyDown","List","ListItem","button","ListItemIcon","ListItemText","primary","Divider","createMuiTheme","disabledBackground","main","overrides","MuiAppBar","colorPrimary","MuiButton","fontSize","fontFamily","outlinedPrimary","border","containedPrimary","MuiLinearProgress","barColorPrimary","MuiDialog","MuiInputLabel","MuiInput","colorSecondary","underline","borderBottomColor","ReactDOM","render","ThemeProvider","maxSnack","anchorOrigin","vertical","horizontal","loading","persistor","path","exact","getElementById","interceptors","request","use","context","noLoadingBar","loadingBarRequestInterceptor","provider","authHeaders","providers","authHeader","authValue","headers","response","config","loadingBarResponseInterceptor","loadingBarErrorResponseInterceptor","serviceWorker","ready","registration","unregister","start"],"mappings":"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","file":"static/js/main.ff78ddf9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo1.8d914255.svg\";","export enum WalletView {\n  Balance = 'Balance',\n  Wallets = 'Wallets',\n  Log = 'Log',\n  Send = 'Send',\n  SendConfirmation = 'SendConfirmation',\n  Receive = 'Receive',\n  Help = 'Help',\n  About = 'About',\n  Reset = 'Reset',\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.38e575e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/guy_welcomes@2x.a8f3ca1a.png\";","export * from './poll-settings'\nexport * from './wallet'\nexport * from './wallet-view'\nexport * from './send-data'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport { useSnackbar, WithSnackbarProps } from 'notistack'\n\ninterface IProps {\n  setUseSnackbarRef: (showSnackbar: WithSnackbarProps) => void\n}\n\ntype OptionsObject = {\n  [key: string]: string\n}\n\nconst InnerSnackbarUtilsConfigurator: React.FC<IProps> = (props: IProps) => {\n  props.setUseSnackbarRef(useSnackbar())\n  return null\n}\n\nlet useSnackbarRef: WithSnackbarProps\nconst setUseSnackbarRef = (useSnackbarRefProp: WithSnackbarProps) => {\n  useSnackbarRef = useSnackbarRefProp\n}\n\nexport const SnackbarUtilsConfigurator = () => {\n  return <InnerSnackbarUtilsConfigurator setUseSnackbarRef={setUseSnackbarRef} />\n}\n\nexport default {\n  success(msg: string, options: OptionsObject = {}) {\n    this.toast(msg, { ...options, variant: 'success' })\n  },\n  warning(msg: string, options: OptionsObject = {}) {\n    this.toast(msg, { ...options, variant: 'warning' })\n  },\n  info(msg: string, options: OptionsObject = {}) {\n    this.toast(msg, { ...options, variant: 'info' })\n  },\n  error(msg: string, options: OptionsObject = {}) {\n    this.toast(msg, { ...options, variant: 'error' })\n  },\n  toast(msg: string, options: OptionsObject = {}) {\n    useSnackbarRef.enqueueSnackbar(msg, options)\n  },\n}\n","export enum Provider {\n  Marketcap = 'Marketcap',\n}\n","export enum RegisterStage {\n  'STEP1' = 1,\n  'STEP2',\n  'STEP3',\n  'STEP4',\n  'IMPORT',\n}\n","import { createAction as create } from 'typesafe-actions'\n\nexport const loadingBarActions = {\n  addRequest: create('@loadingBar/addRequest')<void>(),\n  removeRequest: create('@loadingBar/removeRequest')<void>(),\n}\n","import { Store } from 'redux'\nimport axios, { Axios } from 'axios-observable'\nimport { AxiosRequestConfig } from 'axios'\n\nimport { authInterceptor } from 'shared/http/interceptors/auth.interceptor'\nimport { RootState } from 'state'\nimport { Provider } from 'shared/models/provider'\nimport {\n  loadingBarErrorResponseInterceptor,\n  loadingBarRequestInterceptor,\n  loadingBarResponseInterceptor,\n} from 'shared/http/interceptors/loading-bar.interceptor'\n\nlet instance: Axios | null = null\n\nexport interface RequestConfig extends AxiosRequestConfig {\n  context?: {\n    noBasicHeaders?: boolean\n    noLoadingBar?: boolean\n    provider?: Provider\n  }\n}\n\nexport const setupInterceptors = (axi: Axios, store: Store<RootState>): void => {\n  axi.interceptors.request.use(loadingBarRequestInterceptor(store))\n  axi.interceptors.request.use(authInterceptor(store))\n\n  axi.interceptors.response.use(\n    loadingBarResponseInterceptor(store),\n    loadingBarErrorResponseInterceptor(store)\n  )\n}\n\nexport const http = (): Axios => {\n  if (!instance) {\n    instance = axios.create({})\n  }\n\n  return instance\n}\n","import { createSelector } from 'reselect'\n\nimport { RootState } from 'state'\n\nconst getLoadingBarState = (state: RootState) => state.shared.loadingBar\n\nconst getActiveRequestCount = createSelector(\n  getLoadingBarState,\n  (state) => state.requestsInProgress\n)\n\nexport const showLoadingBar = createSelector(\n  getActiveRequestCount,\n  (activeRequests) => activeRequests > 0\n)\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\nimport { useSelector } from 'react-redux'\n\nimport './loading-bar.component.scss'\n\nimport { showLoadingBar } from 'shared/loading-bar/state/loading-bar.selectors'\n\nconst css = cn('LoadingBar')\n\nexport const LoadingBar: React.FC = () => {\n  const show = useSelector(showLoadingBar)\n\n  return show ? (\n    <>\n      <div className={css()} />\n      <div className={css('SpinnerContainer')}>\n        <div className={css('Spinner')} />\n      </div>\n    </>\n  ) : null\n}\n","export const testIdBuilder = (baseName: string) => (...names: string[]) =>\n  names.reduce((prev, curr) => `${prev}-${curr}`, baseName)\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\nimport { push } from 'connected-react-router'\nimport { Button } from '@material-ui/core'\nimport { useDispatch } from 'react-redux'\n\nimport './AboutPage.scss'\nimport logo from 'assets/logo.svg'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nexport const componentId = 'AboutPage'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\ninterface AboutPageProps {\n  showBackButton: boolean\n}\n\nexport const AboutPage: React.FC<AboutPageProps> = ({ showBackButton = true }) => {\n  const dispatch = useDispatch()\n\n  return (\n    <div className={css()} data-testid=\"AboutPage\">\n      <img src={logo} className={css('Logo')} data-testid={test('Logo')} alt=\"logo\" />\n\n      <h1 className={css('Header')}> WHAT IS ZEROPOOL </h1>\n\n      <p className={css('Text')}>\n        ZeroPool is fully private multi-blokchain solution. Low transaction fees, atomic swaps and\n        common anonymity set. Balances and transaction graph are hidden and compatibility with\n        network identity hiding technologies, like Tor. You can deposit, transfer and withdraw\n        tokens in our product.\n      </p>\n\n      <p className={css('Text')}>\n        The projec was found at ethDenver by a group of reserchers and still developed as product\n        with strong scientific base.\n      </p>\n\n      {showBackButton ? (\n        <p className={css('Button')}>\n          <Button\n            color=\"primary\"\n            data-testid={test('BackButton')}\n            onClick={() => dispatch(push('/'))}\n            variant=\"contained\"\n          >\n            Back\n          </Button>\n        </p>\n      ) : null}\n    </div>\n  )\n}\n","export const timeout = (delay: number) => new Promise((res) => setTimeout(res, delay))\n","import { createAction as create } from 'typesafe-actions'\n\nexport const registerActions = {\n  stepBack: create('@register/stepBack')<void>(),\n\n  startRegisterAccount: create('@register/startRegisterAccount')<void>(),\n  generateSeed: create('@register/generateSeed')<void>(),\n  submitSeed: create('@register/submitSeed')<void>(),\n  confirmSeed: create('@register/confirmSeed')<void>(),\n  register: create('@register/register')<string>(),\n  reset: create('@register/reset')<void>(),\n\n  startImportAccount: create('@register/startImportAccount')<void>(),\n  importAccount: create('@register/importAccount')<{ seed: string[]; password: string }>(),\n}\n","import { RegisterStage } from 'register/state/models/register-stage'\nimport { RegisterState } from 'register/state/register.reducer'\n\ntype RegisterStageStateSlice = {\n  stage: RegisterStage | undefined\n  showSteps: boolean\n  seed: string[]\n}\n\nexport const getPreviousStage = (state: RegisterState): RegisterStageStateSlice => {\n  if (state.stage === RegisterStage.IMPORT) {\n    return {\n      stage: undefined,\n      showSteps: false,\n      seed: [],\n    }\n  }\n\n  return {\n    stage: state.stage === RegisterStage.STEP1 ? undefined : Number(state.stage) - 1,\n    showSteps: [1, undefined].includes(state.stage) ? false : true,\n    seed: state.stage === RegisterStage.STEP2 ? [] : state.seed,\n  }\n}\n","import { ActionType, createReducer } from 'typesafe-actions'\n\nimport { registerActions as actions } from 'register/state/register.actions'\nimport { getPreviousStage } from 'register/state/helpers/stage.helper'\nimport { RegisterStage } from 'register/state/models/register-stage'\nimport { generateSeed } from 'register/state/helpers/seed.helper'\n\nexport interface RegisterState {\n  stage: RegisterStage | undefined\n  seed: string[]\n  seedConfirmed: boolean\n  showSteps: boolean\n}\n\nexport const initialRegisterState: RegisterState = {\n  stage: undefined,\n  seed: [],\n  seedConfirmed: false,\n  showSteps: false,\n}\n\nexport const registerReducer = createReducer<RegisterState, ActionType<typeof actions>>(\n  initialRegisterState\n)\n  .handleAction(actions.stepBack, (state) => ({\n    ...state,\n    ...getPreviousStage(state),\n  }))\n  .handleAction(actions.startRegisterAccount, (state) => ({\n    ...state,\n    showSteps: true,\n    stage: RegisterStage.STEP1,\n  }))\n  .handleAction(actions.generateSeed, (state) => ({\n    ...state,\n    seed: generateSeed(),\n    seedConfirmed: false,\n    stage: RegisterStage.STEP2,\n  }))\n  .handleAction(actions.submitSeed, (state) => ({\n    ...state,\n    seedConfirmed: false,\n    stage: RegisterStage.STEP3,\n  }))\n  .handleAction(actions.confirmSeed, (state) => ({\n    ...state,\n    seedConfirmed: true,\n    stage: RegisterStage.STEP4,\n  }))\n  .handleAction(actions.register, (state, password) => ({\n    ...state,\n    showSteps: false,\n    stage: undefined,\n  }))\n  .handleAction(actions.startImportAccount, (state) => ({\n    ...state,\n    showSteps: false,\n    stage: RegisterStage.IMPORT,\n  }))\n  .handleAction(actions.reset, () => ({\n    ...initialRegisterState,\n  }))\n  .handleAction(actions.importAccount, (state) => ({\n    ...state,\n    showSteps: false,\n    stage: undefined,\n  }))\n","import { generateMnemonic, validateMnemonic } from 'zeropool-api-js/lib/utils'\n\nexport const generateSeed = () => {\n  return generateMnemonic().split(' ')\n}\n\nexport const validateSeed = (seed: string[]): boolean => {\n  return validateMnemonic(seed.join(' '))\n}\n","import { createAction as create } from 'typesafe-actions'\n\nimport { Token, TokenSymbol } from 'shared/models/token'\n\nimport { WalletView } from 'wallet/state/models/wallet-view'\nimport { Wallet } from 'wallet/state/models/wallet'\n\nexport const walletActions = {\n  apiError: create('@wallet/apiError')<string>(),\n\n  addWallet: create('@wallet/addWallet')<void>(),\n  addWalletSuccess: create('@wallet/addWalletSuccess')<{\n    wallets: Record<TokenSymbol, Wallet[]>\n  }>(),\n  addWalletError: create('@wallet/addWalletError')<string>(),\n\n  openBalanceView: create('@wallet/openBalanceView')<void>(), // called on wallet first load\n  openWalletsView: create('@wallet/openWalletsView')<Token>(),\n  openLogView: create('@wallet/openLogView')<Wallet>(), // Log View\n  openReceiveView: create('@wallet/openReceiveView')<Wallet>(),\n  openSendInitialView: create('@wallet/openSendInitialView')<Wallet>(),\n  prepareSendConfirmView: create('@wallet/prepareSendConfirmView')<{\n    wallet: Wallet\n    address: string\n    amount: number\n  }>(),\n  openSendConfirmView: create('@wallet/openSendConfirmView')<{\n    wallet: Wallet\n    address: string\n    amount: number\n    fee: number\n  }>(),\n\n  initWallets: create('@wallet/initWallets')<void>(),\n  updateWallets: create('@wallet/updateWallets')<void>(),\n  updateWalletsSuccess: create('@wallet/updateWalletsSuccess')<{\n    wallets: Record<TokenSymbol, Wallet[]>\n  }>(),\n  updateWalletsError: create('@wallet/updateWalletsError')<string>(),\n\n  refreshAmounts: create('@wallet/refreshAmounts')<void>(),\n\n  getRates: create('@wallet/getRates')<void>(),\n  getRatesSuccess: create('@wallet/getRatesSuccess')<Record<Token['name'], number>>(),\n  getRatesError: create('@wallet/getRates')<string>(),\n\n  headerBack: create('@wallet/header/back')<void>(),\n\n  menu: create('@wallet/menu')<WalletView>(),\n  edit: create('@wallet/edit')<{ wallet: Wallet; name: string }>(),\n  send: create('@wallet/send')<void>(),\n\n  setSeed: create('@wallet/setSeed')<{ seed: string }>(),\n  setSeedSuccess: create('@wallet/setSeedSuccess')<void>(),\n  setSeedError: create('@wallet/setSeedError')<string>(),\n\n  hideWallet: create('@wallet/hideWallet')<{ wallet: Wallet }>(),\n\n  resetAccount: create('@wallet/resetAccount')<void>(),\n}\n","import { createSelector } from 'reselect'\n\nimport { RootState } from 'state'\n\nexport const getRegisterState = (state: RootState) => state.register\n\nexport const getRegisterStage = createSelector(getRegisterState, (state) => state.stage)\n\nexport const getRegisterSeed = createSelector(getRegisterState, (state) => state.seed)\n\nexport const getRegisterSeedConfirmed = createSelector(\n  getRegisterState,\n  (state) => state.seedConfirmed\n)\n\nexport const getShowSteps = createSelector(getRegisterState, (state) => state.showSteps)\n","import { Observable, of } from 'rxjs'\nimport { Epic, combineEpics } from 'redux-observable'\nimport { ActionType, isActionOf } from 'typesafe-actions'\nimport { withLatestFrom, filter, map, switchMap } from 'rxjs/operators'\n\nimport { walletActions } from 'wallet/state/wallet.actions'\nimport { registerActions } from 'register/state/register.actions'\nimport { getRegisterSeed } from 'register/state/register.selectors'\n\nimport { RootState } from 'state'\n\ntype Actions = ActionType<typeof registerActions>\n\nconst importAccount$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filter(isActionOf(registerActions.importAccount)),\n    switchMap((action) => {\n      const seed = action.payload.seed.join(' ')\n      return of(registerActions.reset(), walletActions.setSeed({ seed }))\n    })\n  )\n\nconst register$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filter(isActionOf(registerActions.register)),\n    withLatestFrom(state$.pipe(map(getRegisterSeed))),\n    switchMap(([_action, seed]) => {\n      return of(registerActions.reset(), walletActions.setSeed({ seed: seed.join(' ') }))\n    })\n  )\n\nexport const registerEpics: Epic = combineEpics(importAccount$, register$)\n","import { RootState } from 'state'\n\n// @todo check maybe it is possible to get rid of any.\nexport const stateMigrations = {\n  0: (state: any): any => {\n    const newState: RootState = {\n      ...state,\n    }\n\n    return {\n      ...newState,\n    }\n  },\n}\n","export const recordFromArray = <T>(array: T[], id: string = 'id'): Record<string, T> =>\n  array.reduce((obj, item) => {\n    obj[item[id]] = item\n    return obj\n  }, {})\n","export const roundNumber = (num: number, decimals: number) => {\n  const result = Number(num + '').toFixed(parseInt(decimals + '', undefined))\n\n  return parseFloat(result)\n}\n\nexport const round = (num: number) => roundNumber(num, 12)\n","import { Token, TokenSymbol } from 'shared/models/token'\nimport { round } from 'shared/util/round-number'\n\nimport { Wallet } from 'wallet/state/models/wallet'\nimport { WalletView } from 'wallet/state/models'\nimport { WalletState } from 'wallet/state/wallet.reducer'\n\nexport const amountsHelper = {\n  getAmountsForAllTakens: (\n    tokens: Token[],\n    wallets: Record<TokenSymbol, Wallet[]> | null\n  ): Record<TokenSymbol, number> | null => {\n    if (!wallets) return null\n\n    const amounts: Record<TokenSymbol, number> = {}\n\n    for (const token of tokens) {\n      amounts[token.symbol] = 0\n    }\n\n    for (const token of tokens) {\n      let amount = 0\n\n      for (const wallet of wallets[token.symbol]) {\n        amount += wallet.amount\n      }\n\n      amounts[token.symbol] = round(amount)\n    }\n\n    return amounts\n  },\n\n  getAmountsForToken: (token: Token, wallets: Wallet[]): Record<TokenSymbol, number> => ({\n    [token.symbol]: round(wallets.reduce((accu, next) => (accu += next.amount), 0)),\n  }),\n\n  getAmountsForWallet: (wallet: Wallet | null): Record<TokenSymbol, number> => {\n    return wallet ? { [wallet.token.symbol]: wallet.amount } : {}\n  },\n\n  getAmounts: (state: WalletState) => {\n    switch (state.activeView) {\n      case WalletView.Wallets:\n        return state.activeToken && state.wallets\n          ? amountsHelper.getAmountsForToken(\n              state.activeToken,\n              state.wallets[state.activeToken.symbol]\n            )\n          : state.amounts\n      case WalletView.Receive:\n      case WalletView.Send:\n      case WalletView.SendConfirmation:\n      case WalletView.Log:\n        return state.activeWallet\n          ? amountsHelper.getAmountsForWallet(state.activeWallet)\n          : state.amounts\n      default:\n        return amountsHelper.getAmountsForAllTakens(state.supportedTokens, state.wallets)\n    }\n  },\n}\n","import { WalletState } from 'wallet/state/wallet.reducer'\nimport { amountsHelper } from 'wallet/state/helpers/amounts.helper'\nimport { WalletView, Wallet } from 'wallet/state/models'\n\nexport const navigationHelper = {\n  handleBackClick: (state: WalletState): WalletState => {\n    switch (state.activeView) {\n      case WalletView.Send:\n        return state.activeToken && state.wallets\n          ? {\n              ...state,\n              activeView: WalletView.Wallets,\n              activeWallet: null,\n              amounts: amountsHelper.getAmountsForToken(\n                state.activeToken,\n                state.wallets[state.activeToken.symbol]\n              ),\n            }\n          : state\n\n      case WalletView.SendConfirmation:\n        return state.activeToken && state.activeWallet\n          ? {\n              ...state,\n              activeView: WalletView.Send,\n              amounts: amountsHelper.getAmountsForWallet(state.activeWallet),\n            }\n          : state\n\n      case WalletView.Receive:\n        return state.activeToken && state.wallets\n          ? {\n              ...state,\n              activeView: WalletView.Wallets,\n              activeWallet: null,\n              amounts: amountsHelper.getAmountsForToken(\n                state.activeToken,\n                state.wallets[state.activeToken.symbol]\n              ),\n            }\n          : state\n\n      default:\n        return {\n          ...state,\n          activeView: WalletView.Balance,\n          activeToken: null,\n          activeWallet: null,\n          amounts: amountsHelper.getAmountsForAllTakens(state.supportedTokens, state.wallets),\n        }\n    }\n  },\n\n  getReceiveView: (state: WalletState, wallet: Wallet) =>\n    state.activeToken && state.wallets\n      ? {\n          ...state,\n          activeView: WalletView.Receive,\n          activeWallet: wallet,\n          amounts: amountsHelper.getAmountsForWallet(wallet),\n        }\n      : state,\n\n  getSendInitialView: (state: WalletState, wallet: Wallet) =>\n    state.activeToken && state.wallets\n      ? {\n          ...state,\n          activeView: WalletView.Send,\n          activeWallet: wallet,\n          amounts: amountsHelper.getAmountsForWallet(wallet),\n        }\n      : state,\n\n  getBalanceView: (state: WalletState) => ({\n    ...state,\n    activeToken: null,\n    activeView: WalletView.Balance,\n    activeWallet: null,\n    amounts: amountsHelper.getAmountsForAllTakens(state.supportedTokens, state.wallets),\n  }),\n}\n","import { Wallet } from 'wallet/state/models/wallet'\n\nexport const walletsHelper = {\n  renameWallet: (wallets: Wallet[], wallet: Wallet, name: string): Wallet[] => {\n    const result: Wallet[] = []\n\n    for (const _wallet of wallets) {\n      if (_wallet === wallet) {\n        result.push({\n          ..._wallet,\n          name,\n        })\n      } else {\n        result.push(_wallet)\n      }\n    }\n\n    return result\n  },\n\n  hideWallet: (wallets: Wallet[], wallet: Wallet) => {\n    const result: Wallet[] = []\n\n    for (const _wallet of wallets) {\n      if (_wallet !== wallet) {\n        result.push(_wallet)\n      }\n    }\n\n    return result\n  },\n\n  addWallet: (wallets: Wallet[]): Wallet[] => {\n    const first: Wallet = wallets[0]\n\n    return [\n      ...wallets,\n      {\n        ...first,\n        name: `Wallet${first.token.symbol}${wallets.length}`,\n        amount: 0,\n        address: first.address + wallets.length,\n      },\n    ]\n  },\n\n  reduceWallets: (wallets: Wallet[]): Wallet[] => {\n    let lastValuableIndex = 0\n\n    for (let i = wallets.length - 1; i > 0; i--) {\n      if (wallets[i].amount > 0) {\n        lastValuableIndex = i\n        break\n      }\n    }\n\n    return wallets.slice(0, lastValuableIndex ? lastValuableIndex + 1 : 1)\n  },\n\n  getActiveIndex: (wallets: Wallet[], activeWallet: Wallet): number =>\n    wallets.findIndex((wallet) => wallet.address === activeWallet.address),\n}\n","import { ActionType, createReducer } from 'typesafe-actions'\n\nimport supportedTokens from 'assets/settings/supported-tokens.json'\n\nimport { recordFromArray } from 'shared/util/from'\nimport { Token, TokenSymbol } from 'shared/models/token'\n\nimport { PollSettings, SendData, Wallet } from 'wallet/state/models'\nimport { walletActions as actions } from 'wallet/state/wallet.actions'\nimport { navigationHelper } from 'wallet/state/helpers/navigation.helper'\nimport { amountsHelper } from 'wallet/state/helpers/amounts.helper'\nimport { walletsHelper } from 'wallet/state/helpers/wallets.helper'\nimport { WalletView } from 'wallet/state/models/wallet-view'\n\nexport const initialWalletName = 'Main wallet'\n\nconst pollSettingsDefault: PollSettings = { account: 0, amount: 5, offset: 0 }\n\nexport interface WalletState {\n  activeView: WalletView\n  activeToken: Token | null\n  activeWallet: Wallet | null\n  amounts: Record<TokenSymbol, number> | null\n  pollSettings: PollSettings\n  seed: string | null\n  send: SendData | null\n  supportedTokens: Token[]\n  supportedTokensRecord: Record<TokenSymbol, Token>\n  usdRates: Record<TokenSymbol, number>\n  wallets: Record<TokenSymbol, Wallet[]> | null\n}\n\nexport const initialWalletState: WalletState = {\n  activeView: WalletView.Balance,\n  activeToken: null,\n  activeWallet: null,\n  amounts: null,\n  pollSettings: pollSettingsDefault,\n  seed: null,\n  send: null,\n  supportedTokens,\n  supportedTokensRecord: recordFromArray(supportedTokens, 'symbol'),\n  usdRates: {},\n  wallets: null,\n}\n\nexport const walletReducer = createReducer<WalletState, ActionType<typeof actions>>(\n  initialWalletState\n)\n  .handleAction(actions.menu, (state, { payload }) => ({\n    ...state,\n    activeView: payload !== WalletView.Reset ? payload : state.activeView,\n  }))\n  .handleAction(actions.headerBack, (state) => ({\n    ...navigationHelper.handleBackClick(state),\n  }))\n  .handleAction(actions.openBalanceView, (state) => ({\n    ...navigationHelper.getBalanceView(state),\n  }))\n  .handleAction(actions.openWalletsView, (state, { payload }) => ({\n    ...state,\n    activeView: WalletView.Wallets,\n    activeToken: payload,\n  }))\n  .handleAction(actions.openLogView, (state, { payload }) => ({\n    ...state,\n    activeView: WalletView.Log,\n    activeWallet: payload,\n  }))\n  .handleAction(actions.openReceiveView, (state, { payload }) => ({\n    ...navigationHelper.getReceiveView(state, payload),\n  }))\n  .handleAction(actions.openSendInitialView, (state, { payload }) => ({\n    ...navigationHelper.getSendInitialView(state, payload),\n  }))\n  .handleAction(actions.openSendConfirmView, (state, { payload }) => ({\n    ...state,\n    activeView: WalletView.SendConfirmation,\n    send: {\n      wallet: payload.wallet,\n      address: payload.address,\n      amount: payload.amount,\n      fee: payload.fee,\n    },\n  }))\n  .handleAction(actions.setSeed, (state, { payload }) => ({\n    ...state,\n    seed: payload.seed,\n  }))\n  .handleAction(actions.updateWalletsSuccess, (state, { payload }) => ({\n    ...state,\n    wallets: payload.wallets,\n    activeWallet:\n      state.activeWallet && state.activeToken\n        ? payload.wallets[state.activeToken.symbol][\n            walletsHelper.getActiveIndex(\n              payload.wallets[state.activeToken.symbol],\n              state.activeWallet\n            )\n          ]\n        : null,\n  }))\n  .handleAction(actions.refreshAmounts, (state) => ({\n    ...state,\n    amounts: amountsHelper.getAmounts(state),\n  }))\n  .handleAction(actions.resetAccount, () => initialWalletState)\n  .handleAction(actions.edit, (state, { payload }) => ({\n    ...state,\n    wallets: !(state.activeToken && state.wallets)\n      ? state.wallets\n      : {\n          ...state.wallets,\n          [state.activeToken.symbol]: walletsHelper.renameWallet(\n            state.wallets[state.activeToken.symbol],\n            payload.wallet,\n            payload.name\n          ),\n        },\n  }))\n  .handleAction(actions.addWalletSuccess, (state, { payload }) => ({\n    ...state,\n    wallets: payload.wallets,\n  }))\n  .handleAction(actions.hideWallet, (state, { payload }) => ({\n    ...state,\n    wallets: !(state.activeToken && state.wallets)\n      ? state.wallets\n      : {\n          ...state.wallets,\n          [state.activeToken.symbol]: walletsHelper.hideWallet(\n            state.wallets[state.activeToken.symbol],\n            payload.wallet\n          ),\n        },\n  }))\n  .handleAction(actions.getRatesSuccess, (state, { payload }) => ({\n    ...state,\n    usdRates: payload,\n  }))\n","import { ActionCreatorBuilder } from 'typesafe-actions'\nimport { catchError } from 'rxjs/operators'\nimport { merge, of } from 'rxjs'\n\nexport const handleEpicError = (errorAction: ActionCreatorBuilder<string, string>) =>\n  catchError((error, caught) => merge(of(errorAction(error.message)), caught))\n","import { pipe } from 'rxjs'\nimport { filter } from 'rxjs/operators'\nimport { ActionCreator, isActionOf } from 'typesafe-actions'\n\n/**\n * @todo check this operator, because it swallow\n * action payload type when used for single action\n */\nexport const filterActions = <T extends string>(...actionCreators: ActionCreator<T>[]) => {\n  const isOneAction = actionCreators.length === 1\n  const argument = isOneAction ? actionCreators[0] : actionCreators\n  return pipe(filter(isActionOf(argument)))\n}\n","import { createSelector } from 'reselect'\n\nimport { RootState } from 'state'\n\nimport { WalletState } from 'wallet/state/wallet.reducer'\nimport { walletsHelper } from 'wallet/state/helpers/wallets.helper'\n\nexport const getWalletState = (state: RootState): WalletState => state.account\n\nexport const getActiveView = createSelector(getWalletState, (state) => state.activeView)\n\nexport const getActiveToken = createSelector(getWalletState, (state) => state.activeToken)\n\nexport const getWallets = createSelector(getWalletState, (state) => state.wallets)\n\nexport const getActiveWallet = createSelector(getWalletState, (state) => state.activeWallet)\n\nexport const getActiveWalletIndex = createSelector(\n  getWallets,\n  getActiveWallet,\n  getActiveToken,\n  (wallets, wallet, token) =>\n    wallets && token && wallet ? walletsHelper.getActiveIndex(wallets[token?.symbol], wallet) : null\n)\n\nexport const getAmounts = createSelector(getWalletState, (state) => state.amounts)\n\nexport const getWalletsForActiveToken = createSelector(getWalletState, (state) =>\n  state.activeToken && state.wallets ? state.wallets[state.activeToken.symbol] : null\n)\n\nexport const getSupportedTokens = createSelector(getWalletState, (state) => state.supportedTokens)\n\nexport const getSupportedTokensRecord = createSelector(\n  getWalletState,\n  (state) => state.supportedTokensRecord\n)\n\nexport const getUsdRates = createSelector(getWalletState, (state) => state.usdRates)\n\nexport const getSendData = createSelector(getWalletState, (state) => state.send)\n\nexport const getSeed = createSelector(getWalletState, (state) => state.seed)\n\nexport const getPollSettings = createSelector(getWalletState, (state) => state.pollSettings)\n","export const nearBug = (err: Error) =>\n  typeof err?.message === 'string' && err.message.includes('[-32000]')\n","import { HDWallet, CoinType, devConfig } from 'zeropool-api-js'\nimport { catchError, map, tap } from 'rxjs/operators'\nimport { from, of } from 'rxjs'\n\nimport { Token } from 'shared/models'\nimport { nearBug } from 'shared/util/waves-bug'\n\nexport let hdWallet: HDWallet | null = null\n\nexport function initHDWallet(seed: string, coins: CoinType[]): HDWallet {\n  hdWallet = new HDWallet(seed, devConfig, coins)\n  return hdWallet\n}\n\nexport const getNetworkFee = (token: Token) => {\n  if (!hdWallet) {\n    throw Error('API not available!')\n  }\n\n  const coin = hdWallet.getCoin(token.name as CoinType)\n\n  if (!coin) {\n    throw Error(`Can't estimate fee for ${token.symbol}`)\n  }\n\n  return from(coin.estimateTxFee()).pipe(\n    map((fee) => fee),\n    catchError((err) => {\n      if (nearBug(err)) {\n        return of({ fee: 0 })\n      }\n\n      throw Error(err.message)\n    })\n  )\n}\n\nexport const transfer = (account: number, to: string, amount: number, token: Token) => {\n  if (!hdWallet) {\n    throw Error('API not available!')\n  }\n\n  const coin = hdWallet.getCoin(token.name as CoinType)\n\n  if (!coin) {\n    throw Error(`Can't estimate fee for ${token.symbol}`)\n  }\n\n  return from(coin.transfer(account, to, coin.toBaseUnit(amount.toString()))).pipe(\n    tap((result) => {\n      console.log('Transfer result:')\n      console.log(result)\n    }),\n    catchError((err) => {\n      console.log('Transfer error:')\n      console.log(err)\n\n      throw Error(err.message)\n    })\n  )\n}\n","import storage from 'redux-persist/lib/storage'\nimport { PersistConfig } from 'redux-persist/es/types'\nimport { createBrowserHistory, History } from 'history'\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\nimport { combineEpics, createEpicMiddleware } from 'redux-observable'\nimport { persistStore, persistReducer, createMigrate } from 'redux-persist'\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux'\n\nimport { registerReducer } from 'register/state/register.reducer'\nimport { registerEpics } from 'register/state/register.epics'\n\nimport { stateMigrations } from 'state-migrations'\nimport { walletReducer } from 'wallet/state/wallet.reducer'\nimport { walletEpics } from 'wallet/state/wallet.epics'\nimport { loadingBarReducer } from 'shared/loading-bar/state/loading-bar.reducer'\n\n//#region Setup Devtools\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: <R>(a: R) => R\n  }\n}\n\nconst devToolsCompose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n\nconst composeEnhancers = devToolsCompose || compose\n//#endregion\n\n//#region Setup Epics\nconst epicMiddleware = createEpicMiddleware()\n\nconst rootEpic = combineEpics(\n  registerEpics,\n  walletEpics\n  // alertsEpics,\n  // notificationsEpics,\n)\n//#endregion\n\n//#region Setup Reducers\nexport type RootState = NonNullable<Parameters<ReturnType<typeof createRootReducer>>[0]>\n\nexport const history = createBrowserHistory()\n\nexport const createRootReducer = (_history: History) =>\n  combineReducers({\n    register: registerReducer,\n    account: walletReducer,\n    router: connectRouter(_history),\n    shared: combineReducers({\n      loadingBar: loadingBarReducer,\n      //   // alerts: alertsReducer,\n      //   // notifications: notificationsReducer,\n      //   // menuBar: menuBarReducer,\n    }),\n  })\n//#endregion\n\n//#region Setup Persisted Store\nconst persistConfig: PersistConfig<RootState> = {\n  key: 'root',\n  version: 0,\n  storage,\n  migrate: createMigrate(stateMigrations, { debug: false }),\n  whitelist: ['register', 'account'],\n}\n\nconst persistedReducer = persistReducer(persistConfig, createRootReducer(history))\n\nexport const store = createStore(\n  persistedReducer,\n  composeEnhancers(applyMiddleware(epicMiddleware, routerMiddleware(history)))\n)\n\nexport const persistedStore = persistStore(store)\n//#endregion\n\nepicMiddleware.run(rootEpic)\n","export const notImplemented = (err: Error) =>\n  typeof err?.message === 'string' && err.message.includes('not implemented')\n","import { of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { http, RequestConfig } from 'shared/http/http'\nimport { getHTTPData } from 'shared/operators/get-http-data.operator'\nimport { Provider } from 'shared/models/provider'\nimport { Token } from 'shared/models/token'\nimport { Rate } from 'shared/models/rate'\n\nimport ratesMock from 'assets/mocks/rates.mock.json'\nimport proxy from 'assets/settings/proxy.json'\n\nconst useMock = true\n\nexport const RatesApi = {\n  getRates() {\n    const url = proxy.cors + `https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest`\n    const config: RequestConfig = {\n      params: {},\n      context: {\n        noLoadingBar: true,\n        provider: Provider.Marketcap,\n      },\n    }\n\n    if (useMock) {\n      return of(ratesMock.data)\n    }\n\n    return http()\n      .get<{ status: any; data: Rate<Token>[] }>(url, config)\n      .pipe(\n        getHTTPData(),\n        map(({ status, data }) => data)\n      )\n  },\n}\n","import { push } from 'connected-react-router'\nimport { Balance, CoinType } from 'zeropool-api-js'\nimport { Epic, combineEpics } from 'redux-observable'\nimport { from, Observable, of } from 'rxjs'\nimport { ActionType, isActionOf } from 'typesafe-actions'\nimport {\n  switchMapTo,\n  map,\n  withLatestFrom,\n  filter,\n  switchMap,\n  mergeMap,\n  ignoreElements,\n  tap,\n  mapTo,\n} from 'rxjs/operators'\n\nimport { Token, TokenSymbol, Rate } from 'shared/models'\nimport { promiseWithError } from 'shared/util/promise-with-error'\nimport { handleEpicError } from 'shared/operators/handle-epic-error.operator'\nimport { filterActions } from 'shared/operators/filter-actions.operator'\nimport toast from 'shared/helpers/toast.helper'\n\nimport {\n  getActiveToken,\n  getActiveWallet,\n  getPollSettings,\n  getSeed,\n  getSendData,\n  getSupportedTokens,\n  getWallets,\n} from 'wallet/state/wallet.selectors'\nimport { getNetworkFee, hdWallet, initHDWallet, transfer } from 'wallet/api/zeropool.api'\nimport { SendData, Wallet, WalletView } from 'wallet/state/models'\nimport { mapRatesToTokens } from 'wallet/state/helpers/map-rates-to-tokens'\nimport { updateBalances } from 'wallet/state/helpers/update-balances.helper'\nimport { walletsHelper } from 'wallet/state/helpers/wallets.helper'\nimport { walletActions } from 'wallet/state/wallet.actions'\nimport { RatesApi } from 'wallet/api/rates.api'\n\nimport { RootState } from 'state'\nimport { getPayload } from 'shared/operators/get-payload.operator'\nimport { notImplemented } from 'shared/util/not-implemented'\n\ntype Actions = ActionType<typeof walletActions>\n\nconst getRates$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filter(isActionOf(walletActions.getRates)),\n    switchMapTo(\n      (RatesApi.getRates() as Observable<Rate<Token>[]>).pipe(\n        withLatestFrom(state$.pipe(map(getSupportedTokens))),\n        map(([ratesData, tokens]) => mapRatesToTokens(ratesData, tokens)),\n        map((rates) => walletActions.getRatesSuccess(rates))\n      )\n    ),\n    handleEpicError(walletActions.getRatesError)\n  )\n\nconst redirectToTheWalletOnSetSeed$: Epic = (\n  action$: Observable<Actions>,\n  state$: Observable<RootState>\n) => action$.pipe(filter(isActionOf(walletActions.setSeed)), switchMapTo(of(push('/wallet'))))\n\nconst resetAccount$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filter(isActionOf(walletActions.menu)),\n    filter((action) => action.payload === WalletView.Reset),\n    mergeMap((action) => {\n      toast.success('Wallet reseted and data cleared')\n\n      return of(push('/welcome'), walletActions.resetAccount())\n    })\n  )\n\nconst initApi$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filterActions(walletActions.openBalanceView),\n    withLatestFrom(state$.pipe(map(getSeed)), state$.pipe(map(getWallets))),\n    mergeMap(([, seed, wallets]) => {\n      if (seed) {\n        const hdw = initHDWallet(seed, [CoinType.ethereum, CoinType.near, CoinType.waves])\n\n        return of(!wallets ? walletActions.initWallets() : walletActions.updateWallets())\n      } else {\n        return of(push('/welcome'), walletActions.setSeedError('Seed phrase not set'))\n      }\n    }),\n    handleEpicError(walletActions.setSeedError)\n  )\n\nconst initWallets$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filterActions(walletActions.initWallets),\n    withLatestFrom(state$.pipe(map(getPollSettings)), state$.pipe(map(getSupportedTokens))),\n    switchMap(([, settings, tokens]) => {\n      if (!hdWallet) {\n        throw Error('Api not initialized!')\n      }\n\n      return from(hdWallet.getBalances(settings.amount)).pipe(\n        mergeMap((balances) => {\n          const wallets: Record<TokenSymbol, Wallet[]> = {}\n\n          for (const token of tokens) {\n            const tokenId = token.symbol\n            const coin = hdWallet?.getCoin(token.name as CoinType)\n            wallets[tokenId] = []\n\n            for (const [balanceDataIndex, balanceData] of Object.entries(balances[token.name])) {\n              let amount\n              try {\n                amount = coin\n                  ? +coin.fromBaseUnit((balanceData as Balance).balance)\n                  : +(balanceData as Balance).balance\n              } catch (err) {\n                if (notImplemented(err)) {\n                  amount = 0\n                } else {\n                  throw Error(err.message)\n                }\n              }\n\n              wallets[tokenId].push({\n                account: settings.account,\n                address: (balanceData as Balance).address,\n                id: +balanceDataIndex,\n                amount,\n                name: `Wallet${tokenId}${balanceDataIndex}`,\n                private: false,\n                token,\n              })\n            }\n\n            wallets[tokenId] = walletsHelper.reduceWallets(wallets[tokenId])\n          }\n\n          return of(walletActions.getRates(), walletActions.updateWalletsSuccess({ wallets }))\n        })\n      )\n    }),\n    handleEpicError(walletActions.updateWalletsError)\n  )\n\nconst updateWallets$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filterActions(walletActions.updateWallets),\n    withLatestFrom(state$.pipe(map(getWallets)), state$.pipe(map(getSupportedTokens))),\n    switchMap(([, wallets, tokens]) => {\n      if (!hdWallet) {\n        throw Error('Api not initialized!')\n      }\n      if (!wallets) {\n        throw Error('No wallets exists at the moment!')\n      }\n\n      return updateBalances(hdWallet, wallets, tokens)\n    }),\n    mergeMap((wallets) => {\n      toast.success('Balances updated')\n\n      return of(walletActions.getRates(), walletActions.updateWalletsSuccess({ wallets }))\n    }),\n    handleEpicError(walletActions.updateWalletsError)\n  )\n\nconst addWallet$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filterActions(walletActions.addWallet),\n    withLatestFrom(state$.pipe(map(getWallets)), state$.pipe(map(getActiveToken))),\n    switchMap(([, wallets, activeToken]) => {\n      if (!hdWallet) {\n        throw Error('Api not initialized!')\n      }\n      if (!(wallets && activeToken)) {\n        throw Error('No wallets or selected token!')\n      }\n\n      const activeWallets = wallets[activeToken.symbol]\n      const lastWallet = activeWallets[activeWallets.length - 1]\n      const newWalletId = lastWallet.id + 1\n      const coin = hdWallet.getCoin(activeToken.name as CoinType)\n\n      if (!coin) {\n        throw Error(`Can not access ${activeToken.name} data!`)\n      }\n\n      return from(\n        coin.getBalances(1, newWalletId) ||\n          promiseWithError(`Can't get ballance of ${activeToken.name}`)\n      ).pipe(\n        map((balances) =>\n          walletActions.addWalletSuccess({\n            wallets: {\n              ...wallets,\n              [activeToken.symbol]: [\n                ...wallets[activeToken.symbol],\n                {\n                  account: lastWallet.account,\n                  address: (balances as Balance[])[0].address,\n                  token: { ...activeToken },\n                  id: newWalletId,\n                  amount: +coin.fromBaseUnit((balances as Balance[])[0].balance),\n                  name: `Wallet${activeToken.symbol}${newWalletId}`,\n                  private: false,\n                },\n              ],\n            },\n          })\n        )\n      )\n    }),\n    handleEpicError(walletActions.addWalletError)\n  )\n\nconst refreshAmounts$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filterActions(walletActions.updateWalletsSuccess),\n    map(() => walletActions.refreshAmounts())\n  )\n\nconst openSendConfirmView$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filter(isActionOf(walletActions.prepareSendConfirmView)),\n    getPayload(),\n    switchMap((payload) =>\n      getNetworkFee(payload.wallet.token).pipe(\n        map((fee) =>\n          walletActions.openSendConfirmView({\n            ...payload,\n            fee: +fee.fee,\n          })\n        )\n      )\n    ),\n    handleEpicError(walletActions.apiError)\n  )\n\nconst sendTransaction$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filterActions(walletActions.send),\n    withLatestFrom(state$.pipe(map(getSendData)), state$.pipe(map(getActiveWallet))),\n    map(([, sendData, wallet]) => ({ sendData, wallet })),\n    filter(\n      (value: {\n        sendData: SendData | null\n        wallet: Wallet | null\n      }): value is { sendData: SendData; wallet: Wallet } => !!value.sendData && !!value.wallet\n    ),\n    switchMap(({ sendData, wallet }) =>\n      transfer(wallet.id, sendData.address, sendData.amount, wallet.token).pipe(\n        mapTo(walletActions.openLogView(wallet))\n      )\n    ),\n    handleEpicError(walletActions.apiError)\n  )\n\nconst handleErrorActions$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\n  action$.pipe(\n    filter(\n      isActionOf([\n        walletActions.addWalletError,\n        walletActions.setSeedError,\n        walletActions.updateWalletsError,\n        walletActions.apiError,\n      ])\n    ),\n    tap(({ payload }) => {\n      toast.error(payload)\n    }),\n    ignoreElements()\n  )\n\nexport const walletEpics: Epic = combineEpics(\n  addWallet$,\n  getRates$,\n  initApi$,\n  resetAccount$,\n  redirectToTheWalletOnSetSeed$,\n  initWallets$,\n  updateWallets$,\n  handleErrorActions$,\n  refreshAmounts$,\n  openSendConfirmView$,\n  sendTransaction$\n)\n","export const promiseWithError = (errorMessage: string) => Promise.reject(new Error(errorMessage))\n","import { Rate } from 'shared/models/rate'\nimport { Token, TokenSymbol } from 'shared/models/token'\nimport { recordFromArray } from 'shared/util/from'\n\nexport const mapRatesToTokens = (\n  rates: Rate<Token>[],\n  tokens: Token[]\n): Record<TokenSymbol, number> => {\n  const result: Record<TokenSymbol, number> = {}\n  const ratesMap = recordFromArray(rates, 'symbol')\n\n  for (const token of tokens) {\n    if (ratesMap[token.symbol]) {\n      result[token.symbol] = ratesMap[token.symbol].quote.USD.price\n    }\n  }\n\n  return result\n}\n","import { CoinType, HDWallet } from 'zeropool-api-js'\nimport { from, Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { nearBug } from 'shared/util/waves-bug'\nimport { notImplemented } from 'shared/util/not-implemented'\nimport { Token, TokenSymbol } from 'shared/models/token'\n\nimport { Wallet } from 'wallet/state/models'\n\nexport const updateBalances = (\n  hdWallet: HDWallet,\n  wallets: Record<TokenSymbol, Wallet[]>,\n  tokens: Token[]\n): Observable<Record<string, Wallet[]>> => {\n  const promices: Promise<string[]>[] = []\n  const result: Record<string, Wallet[]> = {}\n\n  tokens.forEach((token) => {\n    const tokenWallets = wallets[token.symbol]\n    const walletPromises: Promise<string>[] = []\n    const coin = hdWallet?.getCoin(token.name as CoinType)\n\n    if (!coin) {\n      throw Error(`Can not access ${token.name} data!`)\n    }\n\n    tokenWallets.forEach((wallet) => {\n      walletPromises.push(\n        coin\n          .getBalance(wallet.id)\n          .catch((err) => {\n            // Near Fix\n            if (nearBug(err)) {\n              return '0'\n            }\n\n            throw Error(err)\n          })\n          .then((balance) => {\n            try {\n              return coin.fromBaseUnit(balance)\n            } catch (err) {\n              // Waves Fix\n              if (notImplemented(err)) {\n                return '0'\n              }\n              throw Error(err?.message)\n            }\n          })\n      )\n    })\n\n    promices.push(Promise.all(walletPromises))\n  })\n\n  return from(Promise.all(promices)).pipe(\n    map((balances) => {\n      tokens.forEach((token, tokenIndex) => {\n        result[token.symbol] = wallets[token.symbol].map((wallet, walletIndex) => ({\n          ...wallet,\n          // amount: wallets[token.symbol][walletIndex].amount + 1, // for test purpose\n          amount: +balances[tokenIndex][walletIndex],\n        }))\n      })\n\n      return result\n    })\n  )\n}\n","import { map } from 'rxjs/operators'\nimport { PayloadAction } from 'typesafe-actions'\n\nexport const getPayload = <T>() => map((action: PayloadAction<string, T>) => action.payload)\n","import { ActionType, createReducer } from 'typesafe-actions'\n\nimport { loadingBarActions } from 'shared/loading-bar/state/loading-bar.actions'\n\nexport interface LoadingBarState {\n  requestsInProgress: number\n}\n\nexport const initialState: LoadingBarState = {\n  requestsInProgress: 0,\n}\n\nexport const loadingBarReducer = createReducer<\n  LoadingBarState,\n  ActionType<typeof loadingBarActions>\n>(initialState)\n  .handleAction(\n    loadingBarActions.addRequest,\n    (state): LoadingBarState => ({\n      requestsInProgress: state.requestsInProgress + 1,\n    })\n  )\n  .handleAction(\n    loadingBarActions.removeRequest,\n    (state): LoadingBarState => ({\n      requestsInProgress: state.requestsInProgress - 1,\n    })\n  )\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\n\nimport './SeedTag.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport { shuffleString } from 'shared/util/shuffle'\n\nexport const componentId = 'SeedTag'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport interface SeedTagProps {\n  text: string\n  num: number\n  hidden?: boolean\n  hideNumber?: boolean\n  onClick?: (num: number) => void\n}\n\nexport const SeedTag: React.FC<SeedTagProps> = ({ text, num, hidden, hideNumber, onClick }) => {\n  const clickHandler = () => (onClick && !hidden ? onClick(num) : null)\n\n  return (\n    <div className={css({ Placeholder: hidden })} data-testid={test()} onClick={clickHandler}>\n      {hidden || hideNumber ? null : <div className={css('Number')}>{num + 1}</div>}\n\n      <div className={css('Text')}>{hidden ? shuffleString(text) : text}</div>\n    </div>\n  )\n}\n","export const shuffleString = (str: string): string =>\n  str\n    .split('')\n    .sort(() => 0.5 - Math.random())\n    .join('')\n\nexport const shuffleArray = (arr: string[]): string[] => arr.sort(() => 0.5 - Math.random())\n","import { cn } from '@bem-react/classname'\nimport { Paper } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\n\nimport './SeedPanel.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport { shuffleArray } from 'shared/util/shuffle'\n\nimport { SeedTag } from 'register/components/SeedTag/SeedTag'\n\nexport const componentId = 'SeedPanel'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport interface SeedPanelProps {\n  classes?: string[]\n  seed: string[]\n  check?: boolean\n  onCheck?: (checked: boolean) => void\n}\n\nexport const SeedPanel: React.FC<SeedPanelProps> = ({ classes = [], seed, check, onCheck }) => {\n  const [confirmedSeed, setConfirmedSeed] = useState([] as string[])\n  const [success, setSuccess] = useState(false)\n  const [shuffledSeed, setShuffledSeed] = useState([] as string[])\n\n  useEffect(() => {\n    if (!shuffledSeed.length && check) {\n      setShuffledSeed(shuffleArray([...seed]))\n    }\n  }, [shuffledSeed.length, check, seed])\n\n  useEffect(() => {\n    const same = JSON.stringify(seed) === JSON.stringify(confirmedSeed)\n    setSuccess(same)\n    if (onCheck) {\n      onCheck(same)\n    }\n  }, [success, confirmedSeed, seed, onCheck])\n\n  const bodyTagClickHandler = (index: number) => {\n    confirmedSeed.splice(index, 1)\n    setConfirmedSeed([...confirmedSeed])\n    setSuccess(false)\n  }\n  const footerTagClickHandler = (index: number) => {\n    setConfirmedSeed([...confirmedSeed, seed[index]])\n  }\n\n  return (\n    <Paper className={css('', classes)} data-testid={test()}>\n      <div className={css('Body')} data-testid={test('Body')}>\n        {check\n          ? confirmedSeed.map((tag: string, index: number) => (\n              <SeedTag text={tag} num={index} key={index} onClick={bodyTagClickHandler} />\n            ))\n          : seed.map((tag: string, index: number) => (\n              <SeedTag text={tag} num={index} key={index} />\n            ))}\n      </div>\n\n      <div className={css('Footer')} data-testid={test('Footer')}>\n        {check\n          ? shuffledSeed.map((tag: string, index: number) => (\n              <SeedTag\n                text={tag}\n                num={seed.findIndex((str) => str === tag)}\n                hidden={confirmedSeed.includes(tag)}\n                hideNumber={true}\n                key={seed.findIndex((str) => str === tag)}\n                onClick={footerTagClickHandler}\n              />\n            ))\n          : null}\n        {confirmedSeed.length === seed.length && !success ? (\n          <div className={css('Warning')} data-testid={test('Warning')}>\n            The phrases do not match!\n          </div>\n        ) : null}\n      </div>\n    </Paper>\n  )\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\nimport { Button } from '@material-ui/core'\n\nimport './StepOne.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\n\nexport const componentId = 'StepOne'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport interface StepOneProps {\n  onGenerate: () => void\n}\n\nexport const StepOne: React.FC<StepOneProps> = ({ onGenerate }) => {\n  return (\n    <div className={css()} data-testid={test()}>\n      <section>\n        <SeedPanel classes={[css('SeedPanel')]} seed={[]} />\n\n        <p className={css('Description')}>\n          Your secret phrase consists of 12 words. Store it carefully. If you loose it, you will\n          loose access to all of your associated wallets!\n        </p>\n      </section>\n\n      <Button\n        color=\"primary\"\n        className={css('Button')}\n        data-testid={test('GenerateButton')}\n        onClick={onGenerate}\n        variant=\"contained\"\n      >\n        Generate a secret phrase\n      </Button>\n    </div>\n  )\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\nimport { Button } from '@material-ui/core'\n\nimport './StepTwo.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\n\nexport const componentId = 'StepTwo'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\ninterface StepTwoProps {\n  seed: string[]\n  onSubmit: () => void\n}\n\nexport const StepTwo: React.FC<StepTwoProps> = ({ seed, onSubmit }) => {\n  return (\n    <div className={css()} data-testid=\"StepTwo\">\n      <section>\n        <SeedPanel classes={[css('SeedPanel')]} seed={seed} />\n\n        <p className={css('Description')}>\n          By submiting, you confirm that you have stored the secret phrase on paper or using another\n          safe method.\n        </p>\n      </section>\n\n      <Button\n        color=\"primary\"\n        className={css('Button')}\n        data-testid={test('SubmitButton')}\n        onClick={onSubmit}\n        variant=\"contained\"\n      >\n        Submit\n      </Button>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Button } from '@material-ui/core'\nimport { cn } from '@bem-react/classname'\n\nimport './Welcome.scss'\nimport guy from 'assets/images/guy_welcomes@2x.png'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nexport const componentId = 'Welcome'\nexport interface WelcomeProps {\n  // TODO: remove onMockedLogin after API is connected\n  onMockedLogin: () => void\n  onCreate: () => void\n  onImport: () => void\n  onAbout: () => void\n}\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport const Welcome: React.FC<WelcomeProps> = ({ onCreate, onImport, onAbout, onMockedLogin }) => {\n  return (\n    <div className={css()} data-testid={test()}>\n      <section className=\"noselect\">\n        <img\n          src={guy}\n          className={css('Logo')}\n          data-testid={test('Logo')}\n          alt=\"logo\"\n          onClick={onMockedLogin}\n        />\n\n        <h1 className={css('Greeting')} data-testid={test('Greeting')}>\n          Welcome to ZeroPool\n        </h1>\n\n        <p className={css('Description')} data-testid={test('Description')}>\n          Please create a new wallet or import an existing one using a secret phrase\n        </p>\n      </section>\n\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        className={css('Button')}\n        data-testid={test('CreateButton')}\n        disableElevation={true}\n        onClick={onCreate}\n      >\n        Create new wallet\n      </Button>\n\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        className={css('Button')}\n        data-testid={test('ImportButton')}\n        onClick={onImport}\n      >\n        Import existing\n      </Button>\n\n      <Button\n        color=\"primary\"\n        variant=\"outlined\"\n        className={css('Button')}\n        data-testid={test('AboutButton')}\n        onClick={onAbout}\n      >\n        About zeropool\n      </Button>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { cn } from '@bem-react/classname'\nimport { useForm } from 'react-hook-form'\nimport { DevTool } from '@hookform/devtools'\n\nimport './StepFour.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport {\n  Button,\n  FormControl,\n  FormHelperText,\n  IconButton,\n  Input,\n  InputAdornment,\n  InputLabel,\n} from '@material-ui/core'\nimport { Close, Visibility, VisibilityOff } from '@material-ui/icons'\nexport const componentId = 'StepFour'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nconst PasswordInputParams = {\n  required: 'Required',\n  pattern: {\n    value: /^(?=.*?\\d)(?=.*?[a-zA-Z])[a-zA-Z\\d]+$/,\n    message: 'Use letters and numbers',\n  },\n  minLength: {\n    value: 8,\n    message: 'Use at least 8 characters',\n  },\n}\n\ninterface FormData {\n  password: string\n  confirm: string\n}\n\nexport interface StepFourProps {\n  onRegister: (data: { password: string }) => void\n}\n\nexport const StepFour: React.FC<StepFourProps> = ({ onRegister }) => {\n  const { handleSubmit, register, reset, control, errors } = useForm<FormData>({\n    criteriaMode: 'all',\n  })\n\n  const [showPassword, setShowPassword] = useState(false)\n  const [password, setPassword] = useState('')\n  const [passwordConfirm, setPasswordConfirm] = useState('')\n\n  return (\n    <div className={css()} data-testid={test()}>\n      {process.env.NODE_ENV !== 'production' && <DevTool control={control} />}\n\n      <form onSubmit={handleSubmit(onRegister)} className={css('Form')}>\n        <FormControl className={css('FormControl')} error={!!errors.password}>\n          <InputLabel className={css('FormControlLabel')} htmlFor=\"password\">\n            Password\n          </InputLabel>\n\n          <Input\n            id=\"password\"\n            color=\"secondary\"\n            className={css('Password')}\n            inputProps={{ 'data-testid': test('Password') }}\n            inputRef={register(PasswordInputParams)}\n            name=\"password\"\n            onChange={() => setPassword(control.getValues().password)}\n            type={showPassword ? 'text' : 'password'}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                {password ? (\n                  <IconButton\n                    className={css('FormControlButton')}\n                    aria-label=\"empty password\"\n                    onClick={() => {\n                      reset({ password: undefined, confirm: control.getValues().confirm })\n                      setPassword('')\n                    }}\n                    onMouseDown={(event) => event.preventDefault()}\n                  >\n                    <Close />\n                  </IconButton>\n                ) : null}\n\n                <IconButton\n                  className={css('FormControlButton')}\n                  aria-label=\"toggle visibility\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  onMouseDown={(event) => event.preventDefault()}\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n\n          {errors.password ? (\n            <FormHelperText data-testid={test('PasswordError')}>\n              {errors.password.message}\n            </FormHelperText>\n          ) : null}\n        </FormControl>\n\n        <FormControl className={css('FormControl')} error={!!errors.confirm}>\n          <InputLabel className={css('FormControlLabel')} htmlFor=\"confirm\">\n            Confirm password\n          </InputLabel>\n\n          <Input\n            id=\"confirm\"\n            color=\"secondary\"\n            className={css('Password')}\n            inputProps={{ 'data-testid': test('Confirm') }}\n            inputRef={register({\n              validate: (value) => value === control.getValues().password,\n            })}\n            name=\"confirm\"\n            onChange={() => setPasswordConfirm(control.getValues().confirm)}\n            type={showPassword ? 'text' : 'password'}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                {passwordConfirm ? (\n                  <IconButton\n                    className={css('FormControlButton')}\n                    aria-label=\"empty confirmation\"\n                    onClick={() => {\n                      reset({ password: control.getValues().password, confirm: undefined })\n                      setPasswordConfirm('')\n                    }}\n                    onMouseDown={(event) => event.preventDefault()}\n                  >\n                    <Close />\n                  </IconButton>\n                ) : null}\n\n                <IconButton\n                  className={css('FormControlButton')}\n                  aria-label=\"toggle visibility\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  onMouseDown={(event) => event.preventDefault()}\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n\n          {errors.confirm ? (\n            <FormHelperText data-testid={test('PasswordConfirmError')}>\n              Passwords do not match\n            </FormHelperText>\n          ) : null}\n        </FormControl>\n\n        <p className={css('Description')}>\n          Finally, please choose a password to be used to export your secret phrase in the future.\n        </p>\n\n        <Button\n          color=\"primary\"\n          className={css('Button')}\n          data-testid={test('Submit')}\n          disableElevation={true}\n          variant=\"contained\"\n          type=\"submit\"\n        >\n          Register\n        </Button>\n\n        {/* TODO: remove after testing */}\n        <Button\n          color=\"primary\"\n          className={css('Button')}\n          disableElevation={true}\n          onClick={() => {\n            reset({ password: 'test1234', confirm: 'test1234' })\n            handleSubmit(onRegister)\n          }}\n          variant=\"contained\"\n          type=\"submit\"\n        >\n          Testing: use 'test1234'\n        </Button>\n      </form>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { cn } from '@bem-react/classname'\nimport { Button } from '@material-ui/core'\n\nimport './StepThree.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\n\nexport const componentId = 'StepThree'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport interface StepThreeProps {\n  seed: string[]\n  onConfirm: () => void\n}\nexport const StepThree: React.FC<StepThreeProps> = ({ seed, onConfirm }) => {\n  const [buttonDisabled, setButtonDisabled] = useState(true)\n\n  return (\n    <div className={css()} data-testid={test()}>\n      <section>\n        <SeedPanel\n          classes={[css('SeedPanel')]}\n          seed={seed}\n          check={true}\n          onCheck={(success: boolean) => setButtonDisabled(!success)}\n        />\n\n        <p className={css('Description')}>\n          Please confirm your secret phrase. We want to be sure that you saved it correctly.\n        </p>\n      </section>\n\n      <Button\n        color=\"primary\"\n        className={css('Button', { Disabled: buttonDisabled })}\n        data-testid={test('ConfirmButton')}\n        disabled={buttonDisabled}\n        onClick={onConfirm}\n        variant=\"contained\"\n      >\n        Confirm\n      </Button>\n\n      {/* TODO: remove after testing */}\n      <Button\n        color=\"primary\"\n        className={css('Button')}\n        disableElevation={true}\n        onClick={onConfirm}\n        variant=\"contained\"\n      >\n        Testing: force confirm\n      </Button>\n    </div>\n  )\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\n\nimport './Perl.scss'\n\nexport const componentId = 'Perl'\n\nconst css = cn(componentId)\n\nexport type PerlProps = {\n  classes?: string[]\n  num: number\n  isActive: boolean\n}\n\nexport const Perl: React.FC<PerlProps> = ({ classes = [], num, isActive }) => {\n  return (\n    <div className={css({ Active: isActive }, classes)}>\n      <div className={css('Number')}>{num}</div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\nimport { ArrowBack } from '@material-ui/icons'\nimport { Button, MobileStepper, Tooltip } from '@material-ui/core'\n\nimport './StepHeader.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport { Perl } from 'register/components/Perl/Perl'\n\nexport const componentId = 'StepHeader'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport type StepHeaderProps = {\n  step: number\n  total: number\n  onBack: () => void\n}\n\nexport const StepHeader: React.FC<StepHeaderProps> = ({ step, total, onBack }) => {\n  return (\n    <div className={css()} data-testid={test()}>\n      <Tooltip title=\"Step back\" placement=\"top-end\">\n        <Button\n          className={css('Button')}\n          data-testid={test('BackButton')}\n          onClick={onBack}\n          disableRipple={true}\n        >\n          <ArrowBack className={css('Icon')} />\n        </Button>\n      </Tooltip>\n\n      <div className={css('Perls')} data-testid={test('Perls')}>\n        {[1, 2, 3, 4].map((value) => (\n          <Perl\n            classes={[css('Perl', { Active: value === step })]}\n            isActive={value === step}\n            key={value}\n            num={value}\n          />\n        ))}\n      </div>\n\n      <MobileStepper\n        className={css('Progress')}\n        variant=\"progress\"\n        steps={total + 1}\n        position=\"static\"\n        activeStep={step - 1}\n        backButton={<span className=\"hidden\">back</span>}\n        nextButton={<span className=\"hidden\">next</span>}\n      />\n    </div>\n  )\n}\n","import { cn } from '@bem-react/classname'\nimport { DevTool } from '@hookform/devtools'\nimport { useForm } from 'react-hook-form'\nimport React, { useState } from 'react'\nimport { Close, Visibility, VisibilityOff } from '@material-ui/icons'\nimport {\n  Button,\n  FormControl,\n  FormHelperText,\n  IconButton,\n  Input,\n  InputAdornment,\n  InputLabel,\n} from '@material-ui/core'\n\nimport './ImportAccount.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\nimport { validateSeed } from 'register/state/helpers/seed.helper'\n\nexport const componentId = 'ImportAccount'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nconst PasswordInputParams = {\n  required: 'Required',\n  pattern: {\n    value: /^(?=.*?\\d)(?=.*?[a-zA-Z])[a-zA-Z\\d]+$/,\n    message: 'Use letters and numbers',\n  },\n  minLength: {\n    value: 8,\n    message: 'Use at least 8 characters',\n  },\n}\n\nconst seedInputParamsFactory = (seed: string[]): any => ({\n  required: 'Required',\n  validate: (value: string[]) => validateSeed(seed),\n})\n\ninterface FormData {\n  seed: string\n  password: string\n  confirm: string\n}\n\nexport interface ImportAccountProps {\n  onBack: () => void\n  onImport: (data: { seed: string[]; password: string }) => void\n}\n\nexport const ImportAccount: React.FC<ImportAccountProps> = ({ onBack, onImport }) => {\n  const { handleSubmit, register, reset, control, errors } = useForm<FormData>({\n    criteriaMode: 'all',\n  })\n\n  const [seed, setSeed] = useState([] as string[])\n  const [showPassword, setShowPassword] = useState(false)\n  const [password, setPassword] = useState('')\n  const [passwordConfirm, setPasswordConfirm] = useState('')\n\n  return (\n    <div className={css()} data-testid={test()}>\n      {process.env.NODE_ENV !== 'production' && <DevTool control={control} />}\n      <section>\n        <SeedPanel classes={[css('SeedPanel')]} seed={seed} />\n\n        <form\n          onSubmit={handleSubmit((data: FormData) => onImport({ password: data.password, seed }))}\n          className={css('Form')}\n        >\n          <FormControl className={css('FormControl')} error={!!errors.seed}>\n            <InputLabel color=\"secondary\" className={css('FormControlLabel')} htmlFor=\"seed\">\n              Secret phrase\n            </InputLabel>\n\n            <Input\n              id=\"seed\"\n              className={css('Seed')}\n              color=\"secondary\"\n              inputProps={{ 'data-testid': test('Seed') }}\n              inputRef={register(seedInputParamsFactory(seed)) as any}\n              name=\"seed\"\n              onChange={() =>\n                setSeed(\n                  control\n                    .getValues()\n                    .seed.split(/[ ,.]+/)\n                    .filter((str) => !!str)\n                )\n              }\n              type={'text'}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  {seed.length ? (\n                    <IconButton\n                      className={css('FormControlButton')}\n                      aria-label=\"empty seed\"\n                      onClick={() => {\n                        reset({\n                          seed: undefined,\n                          password: control.getValues().password,\n                          confirm: control.getValues().confirm,\n                        })\n                        setSeed([])\n                      }}\n                      onMouseDown={(event) => event.preventDefault()}\n                    >\n                      <Close />\n                    </IconButton>\n                  ) : (\n                    <span />\n                  )}\n                </InputAdornment>\n              }\n            />\n\n            {errors.seed ? (\n              <FormHelperText data-testid={test('SeedError')}>\n                {errors.seed.message || 'Input 12 uniq words divided with comas or spaces'}\n              </FormHelperText>\n            ) : null}\n          </FormControl>\n\n          <FormControl className={css('FormControl')} error={!!errors.password}>\n            <InputLabel className={css('FormControlLabel')} htmlFor=\"password\">\n              Password\n            </InputLabel>\n\n            <Input\n              id=\"password\"\n              className={css('Password')}\n              color=\"secondary\"\n              classes={{ input: css('PasswordInput') }}\n              inputProps={{ 'data-testid': test('Password') }}\n              inputRef={register(PasswordInputParams)}\n              name=\"password\"\n              onChange={() => setPassword(control.getValues().password)}\n              type={showPassword ? 'text' : 'password'}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  {password ? (\n                    <IconButton\n                      className={css('FormControlButton')}\n                      aria-label=\"empty password\"\n                      onClick={() => {\n                        reset({\n                          seed: control.getValues().seed,\n                          password: undefined,\n                          confirm: control.getValues().confirm,\n                        })\n                        setPassword('')\n                      }}\n                      onMouseDown={(event) => event.preventDefault()}\n                    >\n                      <Close />\n                    </IconButton>\n                  ) : (\n                    <span />\n                  )}\n\n                  <IconButton\n                    className={css('FormControlButton')}\n                    aria-label=\"toggle visibility\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    onMouseDown={(event) => event.preventDefault()}\n                  >\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n\n            {errors.password ? (\n              <FormHelperText data-testid={test('PasswordError')}>\n                {errors.password.message}\n              </FormHelperText>\n            ) : null}\n          </FormControl>\n\n          <FormControl className={css('FormControl')} error={!!errors.confirm}>\n            <InputLabel className={css('FormControlLabel')} htmlFor=\"confirm\">\n              Confirm password\n            </InputLabel>\n\n            <Input\n              id=\"confirm\"\n              className={css('Password')}\n              color=\"secondary\"\n              classes={{ input: css('PasswordInput') }}\n              inputProps={{ 'data-testid': test('Confirm') }}\n              inputRef={register({\n                validate: (value) => value === control.getValues().password,\n              })}\n              name=\"confirm\"\n              onChange={() => setPasswordConfirm(control.getValues().confirm)}\n              type={showPassword ? 'text' : 'password'}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  {passwordConfirm ? (\n                    <IconButton\n                      className={css('FormControlButton')}\n                      aria-label=\"empty confirmation\"\n                      onClick={() => {\n                        reset({\n                          seed: control.getValues().seed,\n                          password: control.getValues().password,\n                          confirm: undefined,\n                        })\n                        setPasswordConfirm('')\n                      }}\n                      onMouseDown={(event) => event.preventDefault()}\n                    >\n                      <Close />\n                    </IconButton>\n                  ) : (\n                    <span />\n                  )}\n\n                  <IconButton\n                    className={css('FormControlButton')}\n                    aria-label=\"toggle visibility\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    onMouseDown={(event) => event.preventDefault()}\n                  >\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n\n            {errors.confirm ? (\n              <FormHelperText data-testid={test('PasswordConfirmError')}>\n                Passwords do not match\n              </FormHelperText>\n            ) : null}\n          </FormControl>\n\n          <Button\n            color=\"primary\"\n            className={css('Button')}\n            data-testid={test('Import')}\n            disableElevation={true}\n            variant=\"contained\"\n            type=\"submit\"\n          >\n            Import\n          </Button>\n\n          <Button\n            color=\"primary\"\n            className={css('Button')}\n            data-testid={test('Back')}\n            disableElevation={true}\n            onClick={onBack}\n            variant=\"outlined\"\n          >\n            Back\n          </Button>\n        </form>\n      </section>\n    </div>\n  )\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\nimport { push } from 'connected-react-router'\nimport { useDispatch, useSelector } from 'react-redux'\nimport logo from 'assets/images/logo1.svg'\n\nimport './CreateAccountPage.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nimport { StepOne } from 'register/components/StepOne/StepOne'\nimport { StepTwo } from 'register/components/StepTwo/StepTwo'\nimport { Welcome } from 'register/components/Welcome/Welcome'\nimport { StepFour } from 'register/components/StepFour/StepFour'\nimport { StepThree } from 'register/components/StepThree/StepThree'\nimport { StepHeader } from 'register/components/StepHeader/StepHeader'\nimport { ImportAccount } from 'register/components/ImportAccount/ImportAccount'\nimport { RegisterStage } from 'register/state/models/register-stage'\nimport { registerActions as actions } from 'register/state/register.actions'\nimport { getRegisterSeed, getRegisterStage, getShowSteps } from 'register/state/register.selectors'\n\nexport const componentId = 'CreateAccountPage'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\ntype CreateAccountProps = {}\n\nexport const CreateAccountPage: React.FC<CreateAccountProps> = () => {\n  const seed = useSelector(getRegisterSeed)\n  const stage = useSelector(getRegisterStage)\n  const showSteps = useSelector(getShowSteps)\n  const dispatch = useDispatch()\n\n  const components = () => {\n    switch (stage) {\n      case RegisterStage.STEP1:\n        return <StepOne onGenerate={() => dispatch(actions.generateSeed())} />\n      case RegisterStage.STEP2:\n        return <StepTwo seed={seed} onSubmit={() => dispatch(actions.submitSeed())} />\n      case RegisterStage.STEP3:\n        return <StepThree seed={seed} onConfirm={() => dispatch(actions.confirmSeed())} />\n      case RegisterStage.STEP4:\n        return <StepFour onRegister={(data) => dispatch(actions.register(data.password))} />\n      case RegisterStage.IMPORT:\n        return (\n          <ImportAccount\n            onImport={(data) => dispatch(actions.importAccount(data))}\n            onBack={() => dispatch(actions.stepBack())}\n          />\n        )\n      default:\n        return (\n          <Welcome\n            // TODO: remove next line after API is connected\n            onMockedLogin={() => dispatch(push('/wallet'))}\n            onCreate={() => dispatch(actions.startRegisterAccount())}\n            onImport={() => dispatch(actions.startImportAccount())}\n            onAbout={() => dispatch(push('/about'))}\n          />\n        )\n    }\n  }\n\n  return (\n    <div className={css()} data-testid={test()}>\n      {stage && showSteps ? (\n        <StepHeader step={stage} total={4} onBack={() => dispatch(actions.stepBack())} />\n      ) : null}\n\n      {components()}\n\n      {stage && showSteps ? (\n        <div className={css('Footer')}>\n          <img src={logo} alt=\"ZeroPool\" style={{ margin: 'auto' }} />\n        </div>\n      ) : null}\n    </div>\n  )\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\n\nimport './HelpPage.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nexport const componentId = 'HelpPage'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport type HelpPageProps = {}\n\nexport const HelpPage: React.FC<HelpPageProps> = () => {\n  return (\n    <div className={css()} data-testid={test()}>\n      <h2> Wallet is in test mode. How to start:</h2>\n\n      <p>\n        We use Kovan test network to emulate operations with Ethereum and standard Near's test\n        network for the Near. Operations with Waves are not yet implemented.\n      </p>\n\n      <h3>Ethereum</h3>\n\n      <p>\n        To try it out you can install Metamask, select Kovan network, get some free Eth from the\n        <a href=\"https://gitter.im/kovan-testnet/faucet#\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {' '}\n          kovan faucet{' '}\n        </a>\n        and send it to one of your Zero Pool <b>Eth</b> Wallet's address.\n      </p>\n\n      <h3>Near</h3>\n\n      <p>\n        You can register\n        <a href=\"https://wallet.testnet.near.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {' '}\n          Near test wallet{' '}\n        </a>\n        and send tokens recieved upon registration to one of your Zero Pool <b>Near</b> Wallet's\n        address and back.\n      </p>\n\n      <h3>Waves</h3>\n\n      <p>Operations with Waves are on final stage of implementation.</p>\n    </div>\n  )\n}\n","import { capFirstLetter } from './cap-first-letter'\n\nexport const cssMod = (value: string) => ({ [capFirstLetter(value)]: true })\n","export const capFirstLetter = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1)\n","import React, { HTMLAttributes } from 'react'\nimport { cn } from '@bem-react/classname'\n\nimport './RoundButton.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport { IconButton } from '@material-ui/core'\nimport { cssMod } from 'shared/util/css-mod'\n\nexport const componentId = 'RoundButton'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport interface RoundButtonProps extends HTMLAttributes<HTMLElement> {\n  label?: string\n  labelPosition?: 'top' | 'bottom' | 'left' | 'right'\n}\n\nexport const RoundButton: React.FC<RoundButtonProps> = ({\n  label,\n  labelPosition = 'bottom',\n  ...props\n}) => (\n  <div className={css({ NoLabel: !label })} data-testid={test()}>\n    <IconButton\n      className={css('Button', {}, [props.className])}\n      data-testid={test('Button')}\n      disableRipple={true}\n      disableFocusRipple={true}\n      disableTouchRipple={true}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </IconButton>\n\n    <span\n      className={css('Label', { ...cssMod(labelPosition) }, ['noselect'])}\n      data-testid={test('Label')}\n    >\n      {label}\n    </span>\n  </div>\n)\n","import React, { forwardRef, HTMLAttributes, memo } from 'react'\nimport { cn } from '@bem-react/classname'\n\nimport './Icon.scss'\n\nimport { IconOption } from 'shared/components/Icon/IconOption'\n\nexport const componentId = 'Icon'\n\nconst css = cn(componentId)\n\nexport interface IconProps extends HTMLAttributes<HTMLElement> {\n  icon: IconOption\n  spaceOn?: 'right' | 'left'\n}\n\nconst component = memo(\n  forwardRef<HTMLElement, IconProps>(({ icon, spaceOn, ...props }, ref) => (\n    <i\n      {...props}\n      className={css(\n        {\n          [icon]: true,\n          RightMargin: spaceOn === 'right',\n          LeftMargin: spaceOn === 'left',\n          Clickable: !!props.onClick,\n        },\n        [props.className]\n      )}\n      ref={ref}\n    />\n  ))\n)\n\ncomponent.displayName = componentId\n\nexport const Icon = component\n","export enum WalletHeaderMode {\n  Info = 'Info', // only text information about opened view\n  Balance = 'Balance', // label strind and balance string with tokens amount if it passed\n}\n","import React, { HTMLAttributes } from 'react'\nimport { cn } from '@bem-react/classname'\nimport { IconButton } from '@material-ui/core'\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos'\n\nimport './ExpandButton.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nexport const componentId = 'ExpandButton'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport interface ExpendButtonProps extends HTMLAttributes<HTMLElement> {\n  expanded: boolean\n  click: () => void\n}\n\nexport const ExpandButton: React.FC<ExpendButtonProps> = ({ expanded, click, ...props }) => {\n  return (\n    <div\n      className={css({ Expended: expanded }, [props.className])}\n      data-testid={test()}\n      onClick={click}\n    >\n      <IconButton disableRipple={true} disableFocusRipple={true} disableTouchRipple={true}>\n        <ArrowForwardIosIcon />\n      </IconButton>\n    </div>\n  )\n}\n","import { cn } from '@bem-react/classname'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport VerticalAlignTopIcon from '@material-ui/icons/VerticalAlignTop'\nimport VerticalAlignBottomIcon from '@material-ui/icons/VerticalAlignBottom'\nimport React, { useEffect, useState } from 'react'\n\nimport './WalletRow.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport { RoundButton } from 'shared/components/RoundButton/RoundButton'\nimport { IconOption } from 'shared/components/Icon/IconOption'\nimport { Token } from 'shared/models/token'\nimport { Icon } from 'shared/components/Icon/Icon'\n\nimport { ExpandButton } from 'wallet/components/ExpandButton/ExpandButton'\nimport { Wallet } from 'wallet/state/models/wallet'\n\nexport const componentId = 'WalletRow'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport type WalletRowProps = {\n  rollUp: number\n  rate: number\n  token: Token\n  wallet: Wallet\n\n  onEditClick: (wallet: Wallet) => void\n  onReceiveClick: (wallet: Wallet) => void\n  onSendClick: (wallet: Wallet) => void\n  onRollUpClick: () => void\n  onWalletNameClick: (wallet: Wallet) => void\n}\n\nexport const WalletRow: React.FC<WalletRowProps> = ({\n  token,\n  wallet,\n  rate,\n  rollUp,\n  onReceiveClick,\n  onSendClick,\n  onEditClick,\n  onRollUpClick,\n  onWalletNameClick,\n}) => {\n  const [showButtons, setShowButtons] = useState(false)\n  const [toBeOpened, setToBeOpened] = useState(false)\n\n  const showButtonsHandler = () => {\n    if (showButtons) {\n      setShowButtons(false)\n    } else {\n      onRollUpClick()\n      setToBeOpened(true)\n    }\n  }\n\n  useEffect(() => {\n    if (toBeOpened) {\n      setToBeOpened(false)\n      setShowButtons(true)\n    } else {\n      setShowButtons(false)\n    }\n    // eslint-disable-next-line\n  }, [wallet.name, rollUp])\n\n  return (\n    <div className={css({ Expanded: showButtons }, ['noselect'])} data-testid={test()}>\n      <div className={css('Main')}>\n        <Icon className={css('Icon')} icon={wallet.token.symbol as IconOption} />\n\n        <div className={css('Values')}>\n          <div\n            className={css('WalletName', ['noselect'])}\n            onClick={() => onWalletNameClick(wallet)}\n          >\n            {wallet.name}\n          </div>\n          <div className={css('WalletAmount')}>\n            {wallet.amount} {token.symbol} ({(rate * wallet.amount).toFixed(2)} $)\n          </div>\n        </div>\n\n        <ExpandButton\n          className={css('Expander')}\n          expanded={showButtons}\n          click={showButtonsHandler}\n        />\n      </div>\n\n      <div className={css('Buttons', { Hidden: !showButtons })}>\n        <RoundButton className={css('Button1')} label={'Send'} onClick={() => onSendClick(wallet)}>\n          <VerticalAlignTopIcon />\n        </RoundButton>\n\n        <RoundButton\n          className={css('Button2')}\n          label={'Receive'}\n          onClick={() => onReceiveClick(wallet)}\n        >\n          <VerticalAlignBottomIcon />\n        </RoundButton>\n\n        <RoundButton className={css('Button2')} label={'Edit'} onClick={() => onEditClick(wallet)}>\n          <SettingsIcon />\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { cn } from '@bem-react/classname'\nimport { Button, TextField } from '@material-ui/core'\n\nimport './EditWallet.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nexport const componentId = 'EditWallet'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport type EditWalletProps = {\n  onRename: (name: string) => void\n  onDelete: () => void\n  onCancel: () => void\n  walletName: string\n}\n\nexport const EditWallet: React.FC<EditWalletProps> = ({\n  walletName,\n  onRename,\n  onDelete,\n  onCancel,\n}) => {\n  const [newName, setNewName] = useState('')\n  const minNameLength = 3\n\n  return (\n    <div className={css()} data-testid={test()}>\n      <p className={css('Name')}> {walletName} </p>\n\n      <TextField\n        className={css('NewName')}\n        label={`New name (min. ${minNameLength} symbols)`}\n        value={newName}\n        onChange={(event) => {\n          setNewName(event.target.value)\n        }}\n      />\n\n      <Button\n        disabled={newName.length < minNameLength}\n        className={css('Rename')}\n        data-testid={test('Rename')}\n        onClick={() => onRename(newName)}\n        color=\"primary\"\n        variant=\"contained\"\n      >\n        Rename\n      </Button>\n\n      <Button\n        className={css('Delete')}\n        data-testid={test('Delete')}\n        onClick={onDelete}\n        color=\"primary\"\n        variant=\"contained\"\n      >\n        Delete\n      </Button>\n\n      <Button\n        className={css('Cancel')}\n        data-testid={test('Cancel')}\n        onClick={onCancel}\n        color=\"primary\"\n        variant=\"contained\"\n      >\n        Cancel\n      </Button>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Button, TextField } from '@material-ui/core'\nimport { cn } from '@bem-react/classname'\n\nimport './DeleteWallet.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nexport const componentId = 'DeleteWallet'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport type DeleteWalletProps = {\n  onDelete: () => void\n  onCancel: () => void\n  walletName: string\n}\n\nexport const DeleteWallet: React.FC<DeleteWalletProps> = ({ walletName, onCancel, onDelete }) => {\n  const [confirmName, setConfirmName] = useState('')\n\n  return (\n    <div className={css()} data-testid={test()}>\n      <p className={css('Name')}> {walletName} </p>\n\n      <TextField\n        className={css('Confirm')}\n        label=\"Enter wallet name to confirm\"\n        value={confirmName}\n        onChange={(event) => {\n          setConfirmName(event.target.value)\n        }}\n      />\n\n      <Button\n        className={css('Delete')}\n        data-testid={test('Delete')}\n        disabled={confirmName !== walletName}\n        onClick={() => onDelete()}\n        color=\"primary\"\n        variant=\"contained\"\n      >\n        Delete anyway\n      </Button>\n\n      <Button\n        className={css('Cancel')}\n        data-testid={test('Cancel')}\n        onClick={onCancel}\n        color=\"primary\"\n        variant=\"contained\"\n      >\n        Cancel\n      </Button>\n    </div>\n  )\n}\n","import { cn } from '@bem-react/classname'\nimport AddIcon from '@material-ui/icons/Add'\nimport React, { useState } from 'react'\nimport { Dialog, DialogContent } from '@material-ui/core'\n\nimport './Wallets.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport { RoundButton } from 'shared/components/RoundButton/RoundButton'\nimport { Token } from 'shared/models/token'\n\nimport { Wallet } from 'wallet/state/models/wallet'\nimport { WalletRow } from 'wallet/components/WalletRow/WalletRow'\nimport { EditWallet } from 'wallet/components/EditWallet/EditWallet'\nimport { DeleteWallet } from 'wallet/components/DeleteWallet/DeleteWallet'\n\nexport const componentId = 'Wallets'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport interface WalletsHandlers {\n  onReceive: (wallet: Wallet) => void\n  onSend: (wallet: Wallet) => void\n  onDelete: (wallet: Wallet) => void\n  onRename: (wallet: Wallet, name: string) => void\n  onAdd: () => void\n  onOpen: (wallet: Wallet) => void\n}\nexport interface WalletsProps {\n  handlers: WalletsHandlers\n  rate: number\n  token: Token\n  wallets: Wallet[]\n}\n\nexport const Wallets: React.FC<WalletsProps> = ({ handlers, wallets, rate, token }) => {\n  const [rollUpSignal, setRollUpSignal] = useState(0)\n  const [openEditDialog, setOpenEditDialog] = useState(false)\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false)\n  const [selectedWallet, setSelectedWallet] = useState<Wallet | null>(null)\n\n  const handleWalletRename = (name: string) => {\n    if (selectedWallet) {\n      setOpenEditDialog(false)\n      handlers.onRename(selectedWallet, name)\n    } else {\n      throw new Error('No active wallet set!')\n    }\n  }\n  const handleWalletDelete = () => {\n    if (selectedWallet) {\n      setOpenDeleteDialog(false)\n      handlers.onDelete(selectedWallet)\n    } else {\n      throw new Error('No active wallet set!')\n    }\n  }\n\n  return (\n    <div className={css()} data-testid={test()}>\n      {wallets.map((wallet, index) => (\n        <WalletRow\n          rollUp={rollUpSignal}\n          wallet={wallet}\n          token={token}\n          rate={rate}\n          key={index}\n          onEditClick={(_wallet) => {\n            setSelectedWallet(_wallet)\n            setOpenEditDialog(true)\n          }}\n          onReceiveClick={handlers.onReceive}\n          onRollUpClick={() => setRollUpSignal(rollUpSignal + 1)}\n          onSendClick={handlers.onSend}\n          onWalletNameClick={handlers.onOpen}\n        />\n      ))}\n\n      <div className={css('Add')}>\n        <RoundButton label={'Add wallet'} onClick={handlers.onAdd}>\n          <AddIcon />\n        </RoundButton>\n      </div>\n\n      <Dialog\n        onClose={() => {\n          setOpenEditDialog(false)\n        }}\n        open={openEditDialog}\n        fullWidth={true}\n        maxWidth={'xs'}\n      >\n        <DialogContent dividers={true}>\n          <EditWallet\n            walletName={selectedWallet?.name || ''}\n            onRename={handleWalletRename}\n            onDelete={() => {\n              setOpenDeleteDialog(true)\n              setOpenEditDialog(false)\n            }}\n            onCancel={() => {\n              setOpenEditDialog(false)\n            }}\n          />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog\n        onClose={() => {\n          setOpenDeleteDialog(false)\n        }}\n        open={openDeleteDialog}\n        fullWidth={true}\n        maxWidth={'xs'}\n      >\n        <DialogContent dividers={true}>\n          <DeleteWallet\n            walletName={selectedWallet?.name || ''}\n            onDelete={handleWalletDelete}\n            onCancel={() => {\n              setOpenDeleteDialog(false)\n              setOpenEditDialog(true)\n            }}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\nimport { Button, TextField, Tooltip } from '@material-ui/core'\n\nimport './SendConfirmation.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport { Wallet } from 'wallet/state/models/wallet'\n\nexport const componentId = 'SendConfirmation'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport type SendConfirmationProps = {\n  address: string\n  amount: number\n  fee: number\n  rate: number\n  wallet: Wallet\n  onConfirmClick: () => void\n}\n\nexport const SendConfirmation: React.FC<SendConfirmationProps> = ({\n  address,\n  amount,\n  fee,\n  rate,\n  wallet,\n  onConfirmClick,\n}) => {\n  return (\n    <div className={css()} data-testid={test()}>\n      <div className={css('Title')}>Confirm transaction</div>\n\n      <form className={css('Inputs')} noValidate={true} autoComplete=\"off\">\n        <Tooltip title={wallet.name} placement=\"bottom\">\n          <TextField\n            className={css('From')}\n            id=\"from\"\n            label=\"From\"\n            value={wallet.name}\n            disabled={true}\n          />\n        </Tooltip>\n\n        <Tooltip title={address} placement=\"bottom\">\n          <TextField className={css('To')} id=\"to\" label=\"To\" value={address} disabled={true} />\n        </Tooltip>\n\n        <Tooltip title={amount} placement=\"bottom\">\n          <TextField\n            className={css('Amount')}\n            id=\"amount\"\n            label=\"Amount\"\n            value={`${amount} ${wallet.token.symbol}`}\n            disabled={true}\n          />\n        </Tooltip>\n\n        <TextField\n          className={css('Fee')}\n          id=\"fee\"\n          label=\"Network fee\"\n          value={`${fee} ${wallet.token.symbol} (${Math.round(rate * fee * 10000) / 10000} $)`}\n          disabled={true}\n        />\n      </form>\n\n      <div className={css('Confirm')}>\n        <Button\n          className={css('ConfirmButton')}\n          data-testid={test('Confirm')}\n          onClick={() => onConfirmClick()}\n          color=\"primary\"\n          disableElevation={true}\n          variant=\"contained\"\n        >\n          Confirm\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\nimport NumberFormat from 'react-number-format'\nimport { ArrowBack } from '@material-ui/icons'\nimport { Tooltip, Button } from '@material-ui/core'\n\nimport './WalletHeader.scss'\n\nimport { useNavigateBack } from 'shared/hooks/use-navigate-back'\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nimport { WalletHeaderMode } from 'wallet/components/WalletHeader/WalletHeaderMode'\n\nexport const componentId = 'WalletHeader'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport type WalletHeaderProps = {\n  fiatValue?: number\n  hideBackButton?: boolean\n  label: string\n  mode: WalletHeaderMode\n  tokenAmount?: number\n  tokenName?: string\n  tokenSymbol?: string\n  tokenRate?: number\n\n  onBackClick: () => void\n}\n\nexport const WalletHeader: React.FC<WalletHeaderProps> = ({\n  mode,\n  tokenAmount,\n  tokenSymbol,\n  label,\n  fiatValue,\n  hideBackButton,\n  tokenName,\n  onBackClick,\n}) => {\n  useNavigateBack(onBackClick)\n\n  return (\n    <div className={css()} data-testid={test()}>\n      {!hideBackButton ? (\n        <Tooltip title=\"Step back\" placement=\"bottom\">\n          <Button\n            className={css('BackButton')}\n            data-testid={test('BackButton')}\n            onClick={onBackClick}\n            disableRipple={true}\n          >\n            <ArrowBack className={css('Icon')} />\n          </Button>\n        </Tooltip>\n      ) : null}\n\n      <div className={css('Title')}>\n        <span>{label}</span>\n      </div>\n\n      <div className={css('Amount')}>\n        {mode === WalletHeaderMode.Info ? null : (\n          <NumberFormat\n            className={css('FiatAmount')}\n            data-testid={test('FiatAmount')}\n            value={fiatValue}\n            displayType={'text'}\n            thousandSeparator={true}\n            suffix={' $'}\n            decimalScale={2}\n          />\n        )}\n      </div>\n\n      <div className={css('Tokens')}>\n        {tokenAmount && tokenName ? `${tokenAmount} ${tokenSymbol}` : null}\n      </div>\n    </div>\n  )\n}\n","import { useEffect, useRef } from 'react'\n\n// Intercepts browser's Navigate Back event\nexport const useNavigateBack = (callback: () => void): void => {\n  const isInitialMount = useRef(true)\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false\n\n      window.addEventListener(\n        'popstate',\n        (event) => {\n          window.history.pushState(null, '', document.URL)\n          callback()\n        },\n        false\n      )\n    } else {\n      // Fix browser history\n      window.history.pushState(null, '', document.URL)\n    }\n  }, [callback])\n}\n","import { TokenSymbol } from 'shared/models'\n\nexport const total = (\n  amounts: Record<TokenSymbol, number>,\n  rates: Record<TokenSymbol, number>,\n  filter?: TokenSymbol\n): number => {\n  let t = 0\n\n  for (const symbol in amounts) {\n    if (amounts.hasOwnProperty(symbol) && rates.hasOwnProperty(symbol)) {\n      if (filter && filter !== symbol) {\n        continue\n      }\n\n      t += amounts[symbol] * rates[symbol]\n    }\n  }\n\n  return t\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\nimport NumberFormat from 'react-number-format'\n\nimport './TokenRow.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport { IconOption } from 'shared/components/Icon/IconOption'\nimport { Token } from 'shared/models/token'\nimport { Icon } from 'shared/components/Icon/Icon'\n\nexport const componentId = 'TokenRow'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport interface TokenRowProps {\n  amount: number\n  onSelectToken: (token: Token) => void\n  rate: number\n  token: Token\n}\n\nexport const TokenRow: React.FC<TokenRowProps> = ({ amount = 0, token, rate, onSelectToken }) => {\n  return (\n    <div\n      className={css({}, ['noselect'])}\n      data-testid={test()}\n      onClick={() => onSelectToken(token)}\n    >\n      <div className={css('Rates')}>\n        <Icon icon={token.symbol as IconOption} />\n\n        <span className={css('Name')}>{token.name}</span>\n\n        <NumberFormat\n          className={css('Rate')}\n          data-testid={test('Rate')}\n          value={rate}\n          displayType={'text'}\n          thousandSeparator={true}\n          suffix={' $'}\n          decimalScale={2}\n        />\n      </div>\n\n      <div className={css('Amounts')}>\n        <NumberFormat\n          className={css('TokenAmount')}\n          data-testid={test('TokenAmount')}\n          value={amount}\n          displayType={'text'}\n          thousandSeparator={true}\n          suffix={' ' + token.symbol}\n          decimalScale={6}\n        />\n\n        <NumberFormat\n          className={css('FiatAmount')}\n          data-testid={test('FiatAmount')}\n          value={amount * rate}\n          displayType={'text'}\n          thousandSeparator={true}\n          suffix={' $'}\n          decimalScale={2}\n        />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\n\nimport './Balance.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport { Token, TokenSymbol } from 'shared/models/token'\n\nimport { TokenRow } from 'wallet/components/TokenRow/TokenRow'\n\nexport const componentId = 'Balance'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport interface BalanceProps {\n  amounts: Record<TokenSymbol, number>\n  onSelectToken: (token: Token) => void\n  rates: Record<string, number>\n  tokens: string[]\n  tokensRecord: Record<string, Token>\n}\n\nexport const Balance: React.FC<BalanceProps> = ({\n  amounts,\n  rates,\n  tokens,\n  tokensRecord,\n  onSelectToken,\n}) => {\n  return (\n    <div className={css()} data-testid={test()}>\n      {tokens.map((tokenSymbol, index) => (\n        <TokenRow\n          onSelectToken={onSelectToken}\n          amount={amounts[tokenSymbol]}\n          token={tokensRecord[tokenSymbol]}\n          rate={rates[tokenSymbol]}\n          key={index}\n        />\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\nimport { Tooltip } from '@material-ui/core'\nimport { useSnackbar } from 'notistack'\n\nimport './Receive.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport { Token } from 'shared/models'\n\nexport const componentId = 'Receive'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport type ReceiveProps = {\n  address: string\n  rate: number\n  token: Token\n}\n\nexport const Receive: React.FC<ReceiveProps> = ({ address, rate, token }) => {\n  const { enqueueSnackbar } = useSnackbar()\n  const QRCode = require('qrcode.react')\n  const handleCodeClick = (): void => {\n    navigator.clipboard.writeText(address).then(\n      () => {\n        enqueueSnackbar('Address copied to the clipboard', { variant: 'success' })\n      },\n      (err) => {\n        enqueueSnackbar(`Can't access clipboard`, { variant: 'error' })\n      }\n    )\n  }\n\n  return (\n    <div className={css()} data-testid={test()}>\n      <div className={css('Title')}>Receive {token.symbol}</div>\n\n      <Tooltip title={address} placement=\"bottom\">\n        <div className={css('Code')} onClick={handleCodeClick}>\n          <QRCode value={address} />\n        </div>\n      </Tooltip>\n    </div>\n  )\n}\n","import { isEthereumAddress } from 'shared/helpers/validators/eth.validator'\nimport { TokenSymbol } from 'shared/models'\n\nexport const validateAddress = (address: string, symbol: TokenSymbol): boolean | undefined => {\n  let result\n  const supportedSymbols = ['ETH', 'WAWES', 'NEAR']\n\n  if (!supportedSymbols.includes(symbol)) {\n    return undefined\n  }\n\n  switch (symbol) {\n    case 'ETH':\n      result = isEthereumAddress(address)\n      break\n\n    case 'WAVES':\n      result = true\n      break\n\n    case 'NEAR':\n      result = true\n      break\n  }\n\n  return result\n}\n","import jsSHA from 'jssha'\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n */\nexport const isEthereumAddress = (address: string) => {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    // check if it has the basic requirements of an address\n    return false\n  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n    // If it's all small caps or all all caps, return true\n    return true\n  } else {\n    // hardcoded for test tetworks\n    return /^(0x)?[0-9a-fA-F]{40}$/.test(address)\n    // Otherwise check each case\n    // return isChecksumAddress(address);\n  }\n}\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method isChecksumAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n */\nconst isChecksumAddress = (address: string) => {\n  let addressHash: string\n  const shaObj = new jsSHA('SHA-512', 'TEXT', { encoding: 'UTF8' })\n\n  address = address.replace('0x', '')\n  shaObj.update(address.toLowerCase())\n  addressHash = shaObj.getHash('HEX')\n\n  for (let i = 0; i < 40; i++) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (\n      (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) ||\n      (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])\n    ) {\n      return false\n    }\n  }\n  return true\n}\n","import { Button, TextField } from '@material-ui/core'\nimport React, { useState } from 'react'\nimport { useSnackbar } from 'notistack'\nimport NumberFormat from 'react-number-format'\nimport { cn } from '@bem-react/classname'\n\nimport './Send.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\nimport { validateAddress } from 'shared/helpers/addres.helper'\n\nimport { Wallet } from 'wallet/state/models/wallet'\n\nexport const componentId = 'Send'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport type SendProps = {\n  rate: number\n  wallet: Wallet\n  onNextClick: (address: string, amount: number) => void\n}\n\nexport const Send: React.FC<SendProps> = ({ rate, wallet, onNextClick }) => {\n  const [address, setAddress] = useState('')\n  const [amount, setAmount] = useState(0)\n  const { enqueueSnackbar } = useSnackbar()\n\n  const handleAddressChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAddress(event.target.value)\n  }\n\n  const handleAddressPaste = async (event: React.MouseEvent) => {\n    const text = await navigator.clipboard.readText()\n\n    if (validateAddress(text, wallet.token.symbol)) {\n      setAddress(text)\n      enqueueSnackbar('Address added from the clipboard', { variant: 'success' })\n    } else {\n      enqueueSnackbar('Clipboard contains bad address', { variant: 'error' })\n    }\n  }\n\n  const handleAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(Number(event.target.value) || 0)\n  }\n\n  const handleAmountMaximise = (event: React.MouseEvent) => {\n    setAmount(wallet.amount)\n  }\n\n  return (\n    <div className={css()} data-testid={test()}>\n      <div className={css('Title')}>Send {wallet.token.symbol}</div>\n\n      <form className={css('Inputs')} noValidate={true} autoComplete=\"off\">\n        <TextField\n          className={css('AddressInput')}\n          id=\"address\"\n          label=\"Address\"\n          value={address}\n          onChange={handleAddressChange}\n        />\n\n        <span className={css('AddressInputPaste')} onClick={handleAddressPaste}>\n          Paste\n        </span>\n\n        <TextField\n          className={css('AmountInput')}\n          id=\"amount\"\n          label=\"Token amount\"\n          value={amount}\n          onChange={handleAmountChange}\n        />\n\n        <span className={css('AmountInputMax')} onClick={handleAmountMaximise}>\n          Max\n        </span>\n\n        <NumberFormat\n          className={css('FiatAmount')}\n          data-testid={test('FiatAmount')}\n          value={amount * rate}\n          displayType={'text'}\n          thousandSeparator={true}\n          prefix={'(= '}\n          suffix={' $)'}\n          decimalScale={2}\n        />\n      </form>\n\n      <div className={css('Next')}>\n        <Button\n          className={css('NextButton')}\n          data-testid={test('Next')}\n          onClick={() => onNextClick(address, amount)}\n          color=\"primary\"\n          disabled={!(address && amount)}\n          disableElevation={!(address && amount)}\n          variant=\"contained\"\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { cn } from '@bem-react/classname'\n\nimport './Log.scss'\n\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nimport { Wallet } from 'wallet/state/models'\n\nexport const componentId = 'Log'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport type LogProps = {\n  wallet: Wallet\n}\n\nexport const Log: React.FC<LogProps> = ({ wallet }) => {\n  return (\n    <div className={css()} data-testid={test()}>\n      <h1> Log is under construction</h1>\n    </div>\n  )\n}\n","import {\n  AppBar,\n  Toolbar,\n  IconButton,\n  SwipeableDrawer,\n  Badge,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  Tooltip,\n} from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport AttachMoneyOutlinedIcon from '@material-ui/icons/AttachMoneyOutlined'\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport BuildOutlinedIcon from '@material-ui/icons/BuildOutlined'\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline'\nimport { useSnackbar } from 'notistack'\nimport FileCopyIcon from '@material-ui/icons/FileCopy'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Divider from '@material-ui/core/Divider'\nimport { cn } from '@bem-react/classname'\n\nimport logo from 'assets/images/logo1.svg'\nimport { Token } from 'shared/models/token'\nimport { HelpPage } from 'shared/components/HelpPage/HelpPage'\nimport { AboutPage } from 'shared/components/AboutPage/AboutPage'\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\n\nimport {\n  getActiveToken,\n  getActiveView,\n  getSupportedTokens,\n  getSupportedTokensRecord,\n  getUsdRates,\n  getAmounts,\n  getWalletsForActiveToken,\n  getActiveWallet,\n  getSendData,\n  getSeed,\n} from 'wallet/state/wallet.selectors'\nimport { Wallets, WalletsHandlers } from 'wallet/components/Wallets/Wallets'\nimport { SendConfirmation } from 'wallet/components/SendConfirmation/SendConfirmation'\nimport { WalletHeaderMode } from 'wallet/components/WalletHeader/WalletHeaderMode'\nimport { walletActions } from 'wallet/state/wallet.actions'\nimport { WalletHeader } from 'wallet/components/WalletHeader/WalletHeader'\nimport { total } from 'wallet/state/helpers/total.helper'\nimport { WalletView } from 'wallet/state/models/wallet-view'\nimport { Balance } from 'wallet/components/Balance/Balance'\nimport { Receive } from 'wallet/components/Receive/Receive'\nimport { Wallet } from 'wallet/state/models/wallet'\nimport { Send } from 'wallet/components/Send/Send'\nimport { Log } from 'wallet/components/Log/Log'\n\nexport const componentId = 'WalletPage'\n\nconst css = cn(componentId)\nconst test = testIdBuilder(componentId)\n\nexport type WalletPageProps = {}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: 'white',\n    flexGrow: 1,\n    flexDirection: 'column',\n    display: 'flex',\n    height: '100vh',\n    minWidth: '350px',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  toolbar: {\n    alignItems: 'flex-start',\n    flexDirection: 'column',\n    paddingTop: theme.spacing(1),\n    minHeight: 160,\n    paddingBottom: '0',\n  },\n  toolbarHeader: {\n    display: 'flex',\n    borderBottom: `${theme.palette.grey[600]} 1px solid`,\n    width: '100%',\n  },\n  toolbarHeaderItems: {\n    display: 'flex',\n    flexGrow: 1,\n    justifyContent: 'flex-end',\n    marginRight: '-15px',\n  },\n  toolbarHeaderItemsEdgeStart: {\n    marginLeft: '-15px',\n  },\n  toolbarBody: {\n    margin: 'auto',\n    position: 'relative',\n    width: '100%',\n  },\n  title: {\n    flexGrow: 1,\n    alignSelf: 'flex-end',\n  },\n  drower: {},\n  drowerItem: {\n    paddingRight: '20px',\n  },\n  drowerItemIcon: {\n    color: theme.palette.grey[600],\n  },\n  drowerItemText: {},\n  wrapper: {\n    display: 'flex',\n    margin: '50px auto',\n  },\n  footer: {\n    backgroundColor: '#020941',\n    bottom: 0,\n    display: 'flex',\n    position: 'fixed',\n    height: '70px',\n    width: '100%',\n  },\n  AboutPage: {\n    height: '50vh',\n  },\n  zeroPaddingRight: {\n    paddingRight: '0',\n  },\n}))\n\nexport const WalletPage: React.FC<WalletPageProps> = () => {\n  const { enqueueSnackbar } = useSnackbar()\n  const [state, setState] = useState({ drower: false })\n  const dispatch = useDispatch()\n  const classes = useStyles()\n  const view = useSelector(getActiveView)\n  const token = useSelector(getActiveToken)\n  const rates = useSelector(getUsdRates)\n  const tokens = useSelector(getSupportedTokens)\n  const amounts = useSelector(getAmounts) || {}\n  const tokensRecord = useSelector(getSupportedTokensRecord)\n  const wallet = useSelector(getActiveWallet)\n  const wallets = useSelector(getWalletsForActiveToken)\n  const send = useSelector(getSendData)\n  const seed = useSelector(getSeed)\n\n  const handleExportSeed = () => {\n    navigator.clipboard.writeText(seed || 'No seed set').then(\n      () => {\n        enqueueSnackbar('Seed copied to the clipboard', { variant: 'success' })\n      },\n      (err) => {\n        enqueueSnackbar(`Can't access clipboard`, { variant: 'error' })\n      }\n    )\n  }\n\n  const toggleDrawer = (open?: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n    if (\n      event &&\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return\n    }\n\n    setState({ ...state, drower: open === undefined ? !state.drower : open })\n  }\n\n  const drowerMenu = () => (\n    <div\n      className={classes.drower}\n      role=\"presentation\"\n      onClick={toggleDrawer(false)}\n      onKeyDown={toggleDrawer(false)}\n    >\n      <List>\n        {[WalletView.Balance, WalletView.Reset].map((text, index) => (\n          <ListItem\n            className={classes.drowerItem}\n            button={true}\n            key={text}\n            onClick={() => dispatch(walletActions.menu(text))}\n          >\n            <ListItemIcon className={classes.drowerItemIcon}>\n              {[<AttachMoneyOutlinedIcon key={index} />, <BuildOutlinedIcon key={index} />][index]}\n            </ListItemIcon>\n            <ListItemText className={classes.drowerItemText} primary={text} />\n          </ListItem>\n        ))}\n        <ListItem className={classes.drowerItem} button={true} onClick={handleExportSeed}>\n          <ListItemIcon className={classes.drowerItemIcon}>\n            <FileCopyIcon />\n          </ListItemIcon>\n          <ListItemText className={classes.drowerItemText} primary=\"Export Seed\" />\n        </ListItem>\n      </List>\n\n      <Divider />\n\n      <List>\n        {[WalletView.Help, WalletView.About].map((text, index) => (\n          <ListItem button={true} key={text} onClick={() => dispatch(walletActions.menu(text))}>\n            <ListItemIcon className={css('DrowerMenu-ItemIcon')}>\n              {[<InfoOutlinedIcon key={index} />, <HelpOutlineIcon key={index} />][index]}\n            </ListItemIcon>\n            <ListItemText className={css('DrowerMenu-ItemText')} primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  )\n\n  const walletsButtonHandlers: WalletsHandlers = {\n    onReceive: (_wallet: Wallet) => dispatch(walletActions.openReceiveView(_wallet)),\n    onSend: (_wallet: Wallet) => dispatch(walletActions.openSendInitialView(_wallet)),\n    onRename: (_wallet: Wallet, name: string) =>\n      dispatch(walletActions.edit({ wallet: _wallet, name })),\n    onDelete: (_wallet: Wallet) => dispatch(walletActions.hideWallet({ wallet: _wallet })),\n    onAdd: () => dispatch(walletActions.addWallet()),\n    onOpen: (_wallet: Wallet) => dispatch(walletActions.openLogView(_wallet)),\n  }\n\n  const actualView = () => {\n    switch (view) {\n      case WalletView.Wallets:\n        return token ? (\n          <Wallets\n            handlers={walletsButtonHandlers}\n            rate={rates[token.symbol]}\n            token={token}\n            wallets={wallets ? Object.values(wallets) : []}\n          />\n        ) : null\n      case WalletView.Send:\n        return wallet && token ? (\n          <Send\n            rate={rates[token.symbol]}\n            wallet={wallet}\n            onNextClick={(address, amount) =>\n              dispatch(walletActions.prepareSendConfirmView({ wallet, address, amount }))\n            }\n          />\n        ) : null\n      case WalletView.SendConfirmation:\n        return send && token && wallet ? (\n          <SendConfirmation\n            amount={send.amount}\n            address={send.address}\n            fee={send.fee}\n            rate={rates[token.symbol]}\n            wallet={wallet}\n            onConfirmClick={() => dispatch(walletActions.send())}\n          />\n        ) : null\n      case WalletView.Receive:\n        return wallet && token ? (\n          <Receive address={wallet.address} rate={rates[wallet.token.symbol]} token={token} />\n        ) : null\n      case WalletView.Log:\n        return wallet ? <Log wallet={wallet} /> : null\n      case WalletView.About:\n        return <AboutPage showBackButton={false} />\n      case WalletView.Help:\n        return <HelpPage />\n      default:\n        return (\n          <Balance\n            amounts={amounts}\n            onSelectToken={(t: Token) => dispatch(walletActions.openWalletsView(t))}\n            rates={rates}\n            tokens={tokens.map((i) => i.symbol)}\n            tokensRecord={tokensRecord}\n          />\n        )\n    }\n  }\n\n  const walletHeaderMode = [WalletView.Help, WalletView.About].includes(view)\n    ? WalletHeaderMode.Info\n    : WalletHeaderMode.Balance\n\n  const walletHeaderLabels: Record<WalletView, string> = {\n    [WalletView.Balance]: 'Overall balance',\n    [WalletView.Wallets]: `${token?.name} wallets`,\n    [WalletView.Receive]: `${wallet?.name}`,\n    [WalletView.Send]: `${wallet?.name}`,\n    [WalletView.SendConfirmation]: `${wallet?.name}`,\n    [WalletView.Log]: `${wallet?.name}`,\n    [WalletView.About]: 'About',\n    [WalletView.Help]: 'Help',\n    [WalletView.Reset]: '',\n  }\n\n  useEffect(() => {\n    dispatch(walletActions.openBalanceView())\n  }, [dispatch])\n\n  return (\n    <div className={css('', [classes.root])} data-testid={test()} id={componentId}>\n      <AppBar position=\"static\" className={css('AppBar')}>\n        <Toolbar className={classes.toolbar}>\n          <div className={classes.toolbarHeader}>\n            <IconButton\n              classes={{ edgeStart: classes.toolbarHeaderItemsEdgeStart }}\n              onClick={toggleDrawer()}\n              color=\"inherit\"\n              aria-label=\"menu\"\n              edge=\"start\"\n            >\n              <MenuIcon />\n            </IconButton>\n\n            <div className={classes.toolbarHeaderItems}>\n              <Tooltip title=\"No new messages\" placement=\"bottom\">\n                <IconButton color=\"inherit\" className={classes.zeroPaddingRight}>\n                  <Badge badgeContent={0} color=\"secondary\">\n                    <NotificationsIcon />\n                  </Badge>\n                </IconButton>\n              </Tooltip>\n\n              <Tooltip title=\"Update balances\" placement=\"bottom\">\n                <IconButton color=\"inherit\" onClick={() => dispatch(walletActions.updateWallets())}>\n                  <RefreshIcon />\n                </IconButton>\n              </Tooltip>\n            </div>\n          </div>\n\n          <div className={classes.toolbarBody}>\n            <WalletHeader\n              mode={walletHeaderMode}\n              label={walletHeaderLabels[view]}\n              hideBackButton={view === WalletView.Balance}\n              fiatValue={\n                walletHeaderMode === WalletHeaderMode.Info\n                  ? undefined\n                  : total(amounts, rates, token?.symbol)\n              }\n              tokenAmount={token ? amounts[token.symbol] : undefined}\n              tokenSymbol={token?.symbol}\n              tokenName={token?.name}\n              onBackClick={() => dispatch(walletActions.headerBack())}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n\n      <div className={css('Wrapper', [classes.wrapper])}>{actualView()}</div>\n\n      <div className={css('Footer', [classes.footer])}>\n        <img src={logo} alt=\"ZeroPool\" style={{ margin: 'auto' }} />\n      </div>\n\n      <SwipeableDrawer\n        open={state.drower}\n        onClose={toggleDrawer(false)}\n        onOpen={toggleDrawer(true)}\n      >\n        {drowerMenu()}\n      </SwipeableDrawer>\n    </div>\n  )\n}\n","import { createMuiTheme } from '@material-ui/core/styles'\n\nconst COLOR_PRIMARY = '#020941'\nconst COLOR_BLUE_PRIMARY = '#2699fb'\nconst COLOR_BLUE_SECCONDARY = '#84c6ff'\n// const COLOR_BLUE_LIGHT = '#c4e1fa';\nconst WHITE = 'white'\nconst GREEN = '#4be3fa'\nconst INPUT_UNDERLINE_COLOR = COLOR_BLUE_SECCONDARY\n\nexport const theme = createMuiTheme({\n  palette: {\n    action: {\n      disabledBackground: COLOR_BLUE_SECCONDARY,\n      disabled: 'set color of text here',\n    },\n    primary: {\n      main: COLOR_PRIMARY,\n    },\n  },\n\n  overrides: {\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: COLOR_PRIMARY,\n      },\n    },\n\n    MuiButton: {\n      root: {\n        fontSize: '1rem',\n        fontFamily: '\"Exo 2\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        margin: '5px',\n      },\n      outlinedPrimary: {\n        backgroundColor: COLOR_PRIMARY,\n        border: `solid 2px ${COLOR_BLUE_PRIMARY}`,\n        color: WHITE,\n        '&:hover': {\n          backgroundColor: COLOR_PRIMARY,\n          border: `solid 2px ${COLOR_BLUE_SECCONDARY}`,\n        },\n      },\n      containedPrimary: {\n        // backgroundColor: 'linear-gradient(90deg, rgba(132,198,255,1) 10%,\n        // rgba(38,153,251,1) 100%)',\n        backgroundColor: COLOR_BLUE_PRIMARY,\n        color: WHITE,\n        '&:hover': {\n          backgroundColor: COLOR_BLUE_SECCONDARY,\n        },\n      },\n    },\n\n    MuiLinearProgress: {\n      barColorPrimary: {\n        backgroundColor: GREEN,\n      },\n      colorPrimary: {\n        backgroundColor: COLOR_PRIMARY,\n      },\n    },\n\n    MuiDialog: {\n      root: {\n        minWidth: '350px',\n      },\n    },\n\n    MuiInputLabel: {},\n\n    MuiInput: {\n      colorSecondary: {\n        color: WHITE,\n      },\n\n      underline: {\n        borderBottomColor: INPUT_UNDERLINE_COLOR,\n\n        '&:not($disabled):after': {\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\n        },\n\n        '&:hover:not($disabled):after': {\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\n        },\n\n        '&:not($disabled):before': {\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\n        },\n\n        '&:hover:not($disabled):before': {\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\n        },\n      },\n    },\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { ThemeProvider } from '@material-ui/core'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { SnackbarProvider } from 'notistack'\nimport { Router, Route, Redirect, Switch } from 'react-router-dom'\n\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nimport { SnackbarUtilsConfigurator } from 'shared/helpers/toast.helper'\nimport { http, setupInterceptors } from 'shared/http/http'\nimport { LoadingBar } from 'shared/loading-bar/containers/loading-bar/loading-bar.component'\nimport { AboutPage } from 'shared/components/AboutPage/AboutPage'\nimport { timeout } from 'shared/util/timeout'\n\nimport { store, history, persistedStore } from 'state'\nimport { CreateAccountPage } from 'register/containers/CreateAccount/CreateAccountPage'\nimport { WalletPage } from 'wallet/containers/WalletPage/WalletPage'\nimport { theme } from 'theme'\n\nsetupInterceptors(http(), store)\n\nasync function start() {\n  await timeout(1000)\n\n  ReactDOM.render(\n    <ThemeProvider theme={theme}>\n      <SnackbarProvider maxSnack={5} anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\n        {/* <React.StrictMode> */}\n        <Provider store={store}>\n          <PersistGate loading={null} persistor={persistedStore}>\n            <ConnectedRouter history={history}>\n              <Router history={history}>\n                <Switch>\n                  <Route path=\"/welcome\" exact={true} component={CreateAccountPage} />\n                  <Route path=\"/about\" exact={true} component={AboutPage} />\n                  <Route path=\"/wallet\" exact={true} component={WalletPage} />\n                  <Route>\n                    <Redirect to=\"/welcome\" />\n                  </Route>\n                </Switch>\n              </Router>\n            </ConnectedRouter>\n            <LoadingBar />\n          </PersistGate>\n        </Provider>\n        {/* </React.StrictMode> */}\n        <SnackbarUtilsConfigurator />\n      </SnackbarProvider>\n    </ThemeProvider>,\n    document.getElementById('root')\n  )\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\nstart()\n","import { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios'\nimport { Store } from 'redux'\n\nimport { RootState } from 'state'\nimport { RequestConfig } from 'shared/http/http'\nimport { loadingBarActions } from 'shared/loading-bar/state/loading-bar.actions'\n\nexport const loadingBarRequestInterceptor = (store: Store<RootState>) => (\n  request: AxiosRequestConfig\n): AxiosRequestConfig => {\n  const { context } = request as RequestConfig\n  const noBar = !!context?.noLoadingBar\n\n  if (!noBar) {\n    store.dispatch(loadingBarActions.addRequest())\n  }\n\n  return request\n}\n\nexport const loadingBarResponseInterceptor = (store: Store<RootState>) => (\n  response: AxiosResponse\n): AxiosResponse => {\n  const { context } = response.config as RequestConfig\n  const noBar = !!context?.noLoadingBar\n\n  if (!noBar) {\n    store.dispatch(loadingBarActions.removeRequest())\n  }\n\n  return response\n}\n\nexport const loadingBarErrorResponseInterceptor = (store: Store<RootState>) => (\n  error: AxiosError\n): unknown => {\n  const context = (error.config as RequestConfig)?.context\n  const noBar = !!context?.noLoadingBar\n\n  if (!noBar) {\n    store.dispatch(loadingBarActions.removeRequest())\n  }\n\n  throw error\n}\n","import { AxiosRequestConfig } from 'axios'\nimport { Store } from 'redux'\n\nimport { RequestConfig } from 'shared/http/http'\nimport { RootState } from 'state'\nimport { Provider } from 'shared/models/provider'\n\nimport providers from 'assets/settings/providers.json'\n\nexport const authInterceptor = (store: Store<RootState>) => (\n  request: AxiosRequestConfig\n): AxiosRequestConfig => {\n  const { context } = request as RequestConfig\n\n  if (!context?.provider) {\n    return request\n  }\n\n  const authHeaders: Record<string, string>[] = []\n  const provider: { authHeader: string; authValue: string } = providers[Provider[context.provider]]\n\n  authHeaders[provider.authHeader] = provider.authValue\n\n  return {\n    ...request,\n    headers: {\n      ...request.headers,\n      ...authHeaders,\n    },\n  }\n}\n"],"sourceRoot":""}