{"version":3,"sources":["serviceWorker.ts","shared/helpers/toast.helper.tsx","shared/models/provider.ts","register/state/models/register-stage.ts","shared/loading-bar/state/loading-bar.actions.ts","shared/http/http.ts","shared/loading-bar/state/loading-bar.selectors.ts","shared/loading-bar/containers/loading-bar/loading-bar.component.tsx","assets/logo.svg","shared/helpers/test/test-id-builder.helper.ts","shared/components/AboutPage/AboutPage.tsx","shared/util/timeout.ts","register/state/register.actions.ts","register/state/helpers/stage.helper.ts","register/state/register.reducer.ts","register/state/helpers/seed.helper.ts","wallet/state/wallet.actions.ts","register/state/register.selectors.ts","register/state/register.epics.ts","state-migrations.ts","shared/util/from.ts","shared/util/round-number.ts","wallet/state/helpers/amounts.helper.ts","wallet/state/helpers/navigation.helper.ts","wallet/state/helpers/wallets.helper.ts","wallet/state/wallet.reducer.ts","shared/operators/handle-epic-error.operator.ts","shared/operators/filter-actions.operator.ts","wallet/state/wallet.selectors.ts","shared/util/fix-timestamp.ts","wallet/api/promice-error.handler.ts","wallet/api/es.api.ts","wallet/api/zeropool.api.ts","state.ts","shared/util/not-implemented.ts","wallet/api/rates.api.ts","shared/operators/get-payload.operator.ts","wallet/state/wallet.epics.ts","wallet/state/helpers/map-rates-to-tokens.ts","wallet/state/helpers/init-balances.helper.ts","wallet/state/helpers/update-balances.helper.ts","shared/util/near-bug.ts","shared/loading-bar/state/loading-bar.reducer.ts","assets/images/logo1.svg","register/components/SeedTag/SeedTag.tsx","shared/util/shuffle.ts","register/components/SeedPanel/SeedPanel.tsx","register/components/StepOne/StepOne.tsx","register/components/StepTwo/StepTwo.tsx","assets/images/guy_welcomes@2x.png","register/components/Welcome/Welcome.tsx","register/components/StepFour/StepFour.tsx","register/components/StepThree/StepThree.tsx","register/components/Perl/Perl.tsx","register/components/StepHeader/StepHeader.tsx","register/components/ImportAccount/ImportAccount.tsx","register/containers/CreateAccount/CreateAccountPage.tsx","shared/components/HelpPage/HelpPage.tsx","shared/util/css-mod.ts","shared/util/cap-first-letter.ts","shared/components/RoundButton/RoundButton.tsx","shared/components/Icon/Icon.tsx","wallet/components/WalletHeader/WalletHeaderMode.tsx","wallet/components/ExpandButton/ExpandButton.tsx","wallet/components/WalletRow/WalletRow.tsx","wallet/components/EditWallet/EditWallet.tsx","wallet/components/DeleteWallet/DeleteWallet.tsx","wallet/components/Wallets/Wallets.tsx","wallet/components/SendConfirmation/SendConfirmation.tsx","wallet/components/WalletHeader/WalletHeader.tsx","shared/hooks/use-navigate-back.ts","wallet/state/helpers/total.helper.ts","wallet/components/TokenRow/TokenRow.tsx","wallet/components/Balance/Balance.tsx","wallet/components/Receive/Receive.tsx","shared/helpers/addres.helper.ts","shared/helpers/validators/eth.validator.ts","wallet/components/Send/Send.tsx","wallet/state/helpers/transaction.helper.ts","wallet/components/Transaction/Transaction.tsx","wallet/containers/Transactions/Transactions.tsx","wallet/containers/WalletPage/WalletPage.tsx","theme.ts","index.tsx","shared/http/interceptors/loading-bar.interceptor.ts","shared/http/interceptors/auth.interceptor.ts","wallet/state/models/wallet-view.ts","wallet/state/models/index.ts"],"names":["Boolean","window","location","hostname","match","useSnackbarRef","Provider","InnerSnackbarUtilsConfigurator","props","setUseSnackbarRef","useSnackbar","useSnackbarRefProp","SnackbarUtilsConfigurator","success","msg","options","this","toast","variant","warning","info","error","enqueueSnackbar","RegisterStage","loadingBarActions","addRequest","create","removeRequest","instance","http","axios","getActiveRequestCount","createSelector","state","shared","loadingBar","requestsInProgress","showLoadingBar","activeRequests","css","cn","LoadingBar","useSelector","className","testIdBuilder","baseName","names","reduce","prev","curr","componentId","test","AboutPage","showBackButton","dispatch","useDispatch","data-testid","src","logo","alt","Button","color","onClick","push","timeout","delay","Promise","res","setTimeout","registerActions","stepBack","startRegisterAccount","generateSeed","submitSeed","confirmSeed","register","reset","startImportAccount","importAccount","initialRegisterState","stage","undefined","seed","seedConfirmed","showSteps","registerReducer","createReducer","handleAction","actions","IMPORT","STEP1","Number","includes","STEP2","getPreviousStage","generateMnemonic","split","STEP3","STEP4","password","walletActions","apiError","addWallet","addWalletSuccess","addWalletError","openBalanceView","openWalletsView","openTransactionsView","openReceiveView","openSendInitialView","prepareSendConfirmView","openSendConfirmView","initWallets","updateBalances","updateWalletsSuccess","updateWalletsError","getTransactions","getTransactionsSuccess","refreshAmounts","getRates","getRatesSuccess","getRatesError","headerBack","menu","edit","send","setSeed","setSeedSuccess","setSeedError","hideWallet","resetAccount","getPrivateAddress","getPrivateAddressSuccess","getRegisterState","getRegisterStage","getRegisterSeed","getShowSteps","registerEpics","combineEpics","action$","state$","pipe","filter","isActionOf","switchMap","action","payload","join","of","withLatestFrom","map","stateMigrations","0","newState","recordFromArray","array","id","obj","item","round","num","decimals","result","toFixed","parseInt","parseFloat","roundNumber","amountsHelper","getAmountsForAllTakens","tokens","wallets","amounts","symbol","token","amount","getAmountsForToken","accu","next","getAmountsForWallet","wallet","getAmounts","activeView","WalletView","Wallets","activeToken","Receive","Send","SendConfirmation","Transactions","activeWallet","supportedTokens","navigationHelper","previousView","Balance","walletsHelper","name","_wallet","lastValuableIndex","i","length","slice","findIndex","address","initialWalletState","pollSettings","account","offset","supported","supportedTokensRecord","transactions","usdRates","privateAddress","walletReducer","Reset","fee","handleEpicError","errorAction","catchError","caught","merge","message","filterActions","actionCreators","isOneAction","argument","getWalletState","getActiveView","getActiveToken","getWallets","getActiveWallet","getWalletsForActiveToken","getSupportedTokens","getSupportedTokensRecord","getUsdRates","getSendData","getSeed","getPollSettings","fixTimestamp","timestamp","promiceErrorHandler","mock","err","console","getUrl","toTransaction","tr","hash","blockHash","status","value","from","to","timeStamp","getEthTransactions","mocked","resolve","mocks","ETH","fetch","then","val","clone","json","response","data","hdWallet","_history","getAllBalances","Error","getBalances","catch","getWalletBalance","walletId","coin","getCoin","balances","balance","fromBaseUnit","getNetworkFee","e","estimateTxFee","getWalletTransactions","getAddress","convertValues","generatePrivateAddress","initHDWallet","coins","HDWallet","devConfig","transfer","toBaseUnit","toString","transaction","notImplemented","toLowerCase","RatesApi","proxy","cors","Marketcap","ratesMock","getPayload","nextWalletId","walletEpics","api","switchMapTo","rates","ratesMap","quote","USD","price","mapRatesToTokens","_seed","iif","tap","mergeMap","settings","tokenId","Object","entries","balanceDataIndex","balanceData","initBalances","promices","forEach","tokenWallets","walletPromises","getBalance","nearBug","all","tokenIndex","walletIndex","ignoreElements","sendData","mapTo","loadingBarReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","rootEpic","history","createBrowserHistory","persistConfig","key","version","storage","migrate","createMigrate","debug","whitelist","persistedReducer","persistReducer","combineReducers","router","connectRouter","store","createStore","applyMiddleware","routerMiddleware","persistedStore","persistStore","run","SeedTag","str","text","hidden","hideNumber","Placeholder","sort","Math","random","SeedPanel","classes","check","onCheck","useState","confirmedSeed","setConfirmedSeed","setSuccess","shuffledSeed","setShuffledSeed","useEffect","same","JSON","stringify","bodyTagClickHandler","index","splice","footerTagClickHandler","Paper","tag","StepOne","onGenerate","StepTwo","onSubmit","Welcome","onCreate","onImport","onAbout","onMockedLogin","guy","disableElevation","PasswordInputParams","required","pattern","minLength","StepFour","onRegister","useForm","criteriaMode","handleSubmit","control","errors","showPassword","setShowPassword","setPassword","passwordConfirm","setPasswordConfirm","process","FormControl","InputLabel","htmlFor","Input","inputProps","inputRef","onChange","getValues","type","endAdornment","InputAdornment","position","IconButton","aria-label","confirm","onMouseDown","event","preventDefault","Close","Visibility","VisibilityOff","FormHelperText","validate","StepThree","onConfirm","buttonDisabled","setButtonDisabled","Disabled","disabled","Perl","isActive","Active","StepHeader","step","total","onBack","Tooltip","title","placement","disableRipple","ArrowBack","MobileStepper","steps","activeStep","backButton","nextButton","seedInputParamsFactory","validateMnemonic","validateSeed","ImportAccount","input","CreateAccountPage","components","style","margin","HelpPage","href","target","rel","cssMod","charAt","toUpperCase","RoundButton","label","labelPosition","NoLabel","disableFocusRipple","disableTouchRipple","children","component","memo","forwardRef","ref","icon","spaceOn","displayName","WalletHeaderMode","Icon","ExpandButton","expanded","click","Expended","WalletRow","rate","rollUp","onReceiveClick","onSendClick","onEditClick","onRollUpClick","onWalletNameClick","showButtons","setShowButtons","toBeOpened","setToBeOpened","Expanded","Private","Hidden","EditWallet","walletName","onRename","onDelete","onCancel","newName","setNewName","TextField","DeleteWallet","confirmName","setConfirmName","handlers","rollUpSignal","setRollUpSignal","openEditDialog","setOpenEditDialog","openDeleteDialog","setOpenDeleteDialog","selectedWallet","setSelectedWallet","onReceive","onSend","onOpen","onAdd","Dialog","onClose","open","fullWidth","maxWidth","DialogContent","dividers","onConfirmClick","processing","setProcessing","noValidate","autoComplete","CircularProgress","axi","WalletHeader","mode","tokenAmount","tokenSymbol","fiatValue","hideBackButton","priv","tokenName","onBackClick","callback","isInitialMount","useRef","current","addEventListener","pushState","document","URL","useNavigateBack","Info","displayType","thousandSeparator","suffix","decimalScale","t","hasOwnProperty","TokenRow","onSelectToken","tokensRecord","QRCode","require","navigator","clipboard","writeText","validateAddress","isEthereumAddress","beautifyAdress","limit","substring","beautifyAmount","arr","lastDigit","onNextClick","setAddress","setAmount","amountValid","setAmountValid","handleAddressPaste","a","readText","Invalid","prefix","lastElement","m","moment","reverse","currentTimestamp","lastTimestamp","isAfter","date","format","Transaction","isIncoming","toLocaleLowerCase","sorted","opened","setOpened","transactionHelper","day","Down","openHandler","j","Open","useStyles","makeStyles","theme","root","backgroundColor","flexGrow","flexDirection","display","height","minWidth","menuButton","marginRight","spacing","toolbar","alignItems","paddingTop","minHeight","paddingBottom","toolbarHeader","borderBottom","palette","grey","width","toolbarHeaderItems","justifyContent","toolbarHeaderItemsEdgeStart","marginLeft","toolbarBody","alignSelf","drower","drowerItem","paddingRight","drowerItemIcon","drowerItemText","wrapper","footer","bottom","zeroPaddingRight","WalletPage","setState","view","handleExportSeed","toggleDrawer","walletsButtonHandlers","walletHeaderMode","Help","About","walletHeaderLabels","AppBar","Toolbar","edgeStart","edge","Badge","badgeContent","values","_token","actualView","SwipeableDrawer","role","onKeyDown","List","ListItem","button","ListItemIcon","ListItemText","primary","Divider","COLOR_PRIMARY","COLOR_BLUE_PRIMARY","COLOR_BLUE_SECCONDARY","WHITE","INPUT_UNDERLINE_COLOR","createMuiTheme","disabledBackground","main","overrides","MuiAppBar","colorPrimary","MuiButton","fontSize","fontFamily","outlinedPrimary","border","containedPrimary","MuiIconButton","MuiLinearProgress","barColorPrimary","MuiDialog","MuiInputLabel","MuiInput","colorSecondary","underline","borderBottomColor","ReactDOM","render","ThemeProvider","maxSnack","anchorOrigin","vertical","horizontal","loading","persistor","path","exact","getElementById","interceptors","request","use","context","noLoadingBar","loadingBarRequestInterceptor","provider","authHeaders","providers","authHeader","authValue","headers","config","loadingBarResponseInterceptor","loadingBarErrorResponseInterceptor","serviceWorker","ready","registration","unregister","start"],"mappings":"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","file":"static/js/main.7b2683f6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useSnackbar, WithSnackbarProps } from 'notistack'\r\n\r\ninterface IProps {\r\n  setUseSnackbarRef: (showSnackbar: WithSnackbarProps) => void\r\n}\r\n\r\ntype OptionsObject = {\r\n  [key: string]: string\r\n}\r\n\r\nconst InnerSnackbarUtilsConfigurator: React.FC<IProps> = (props: IProps) => {\r\n  props.setUseSnackbarRef(useSnackbar())\r\n  return null\r\n}\r\n\r\nlet useSnackbarRef: WithSnackbarProps\r\nconst setUseSnackbarRef = (useSnackbarRefProp: WithSnackbarProps) => {\r\n  useSnackbarRef = useSnackbarRefProp\r\n}\r\n\r\nexport const SnackbarUtilsConfigurator = () => {\r\n  return <InnerSnackbarUtilsConfigurator setUseSnackbarRef={setUseSnackbarRef} />\r\n}\r\n\r\nexport default {\r\n  success(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'success' })\r\n  },\r\n  warning(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'warning' })\r\n  },\r\n  info(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'info' })\r\n  },\r\n  error(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'error' })\r\n  },\r\n  toast(msg: string, options: OptionsObject = {}) {\r\n    useSnackbarRef.enqueueSnackbar(msg, options)\r\n  },\r\n}\r\n","export enum Provider {\r\n  Marketcap = 'Marketcap',\r\n}\r\n","export enum RegisterStage {\r\n  'STEP1' = 1,\r\n  'STEP2',\r\n  'STEP3',\r\n  'STEP4',\r\n  'IMPORT',\r\n}\r\n","import { createAction as create } from 'typesafe-actions'\r\n\r\nexport const loadingBarActions = {\r\n  addRequest: create('@loadingBar/addRequest')<void>(),\r\n  removeRequest: create('@loadingBar/removeRequest')<void>(),\r\n}\r\n","import { Store } from 'redux'\r\nimport axios, { Axios } from 'axios-observable'\r\nimport { AxiosRequestConfig } from 'axios'\r\n\r\nimport { authInterceptor } from 'shared/http/interceptors/auth.interceptor'\r\nimport { RootState } from 'state'\r\nimport { Provider } from 'shared/models/provider'\r\nimport {\r\n  loadingBarErrorResponseInterceptor,\r\n  loadingBarRequestInterceptor,\r\n  loadingBarResponseInterceptor,\r\n} from 'shared/http/interceptors/loading-bar.interceptor'\r\n\r\nlet instance: Axios | null = null\r\n\r\nexport interface RequestConfig extends AxiosRequestConfig {\r\n  context?: {\r\n    noBasicHeaders?: boolean\r\n    noLoadingBar?: boolean\r\n    provider?: Provider\r\n  }\r\n  params: any\r\n  headers: any\r\n}\r\n\r\nexport const setupInterceptors = (axi: Axios, store: Store<RootState>): void => {\r\n  axi.interceptors.request.use(loadingBarRequestInterceptor(store))\r\n  axi.interceptors.request.use(authInterceptor(store))\r\n\r\n  axi.interceptors.response.use(\r\n    loadingBarResponseInterceptor(store),\r\n    loadingBarErrorResponseInterceptor(store),\r\n  )\r\n}\r\n\r\nexport const http = (): Axios => {\r\n  if (!instance) {\r\n    instance = axios.create({})\r\n  }\r\n\r\n  return instance\r\n}\r\n","import { createSelector } from 'reselect'\r\n\r\nimport { RootState } from 'state'\r\n\r\nconst getLoadingBarState = (state: RootState) => state.shared.loadingBar\r\n\r\nconst getActiveRequestCount = createSelector(\r\n  getLoadingBarState,\r\n  (state) => state.requestsInProgress,\r\n)\r\n\r\nexport const showLoadingBar = createSelector(\r\n  getActiveRequestCount,\r\n  (activeRequests) => activeRequests > 0,\r\n)\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport './loading-bar.component.scss'\r\n\r\nimport { showLoadingBar } from 'shared/loading-bar/state/loading-bar.selectors'\r\n\r\nconst css = cn('LoadingBar')\r\n\r\nexport const LoadingBar: React.FC = () => {\r\n  const show = useSelector(showLoadingBar)\r\n\r\n  return show ? (\r\n    <>\r\n      <div className={css()} />\r\n      <div className={css('SpinnerContainer')}>\r\n        <div className={css('Spinner')} />\r\n      </div>\r\n    </>\r\n  ) : null\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.a7790139.svg\";","export const testIdBuilder = (baseName: string) => (...names: string[]) =>\r\n  names.reduce((prev, curr) => `${prev}-${curr}`, baseName)\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { push } from 'connected-react-router'\r\nimport { Button } from '@material-ui/core'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport './AboutPage.scss'\r\nimport logo from 'assets/logo.svg'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'AboutPage'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\ninterface AboutPageProps {\r\n  showBackButton: boolean\r\n}\r\n\r\nexport const AboutPage: React.FC<AboutPageProps> = ({ showBackButton = true }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <div className={css()} data-testid=\"AboutPage\">\r\n      <img src={logo} className={css('Logo')} data-testid={test('Logo')} alt=\"logo\" />\r\n\r\n      <h1 className={css('Header')}> WHAT IS ZEROPOOL </h1>\r\n\r\n      <p className={css('Text')}>\r\n        ZeroPool is fully private multi-blokchain solution. Low transaction fees, atomic swaps and\r\n        common anonymity set. Balances and transaction graph are hidden and compatibility with\r\n        network identity hiding technologies, like Tor. You can deposit, transfer and withdraw\r\n        tokens in our product.\r\n      </p>\r\n\r\n      <p className={css('Text')}>\r\n        The projec was found at ethDenver by a group of reserchers and still developed as product\r\n        with strong scientific base.\r\n      </p>\r\n\r\n      {showBackButton ? (\r\n        <p className={css('Button')}>\r\n          <Button\r\n            color=\"primary\"\r\n            data-testid={test('BackButton')}\r\n            onClick={() => dispatch(push('/'))}\r\n            variant=\"contained\"\r\n          >\r\n            Back\r\n          </Button>\r\n        </p>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","export const timeout = (delay: number) => new Promise((res) => setTimeout(res, delay))\r\n","import { createAction as create } from 'typesafe-actions'\r\n\r\nexport const registerActions = {\r\n  stepBack: create('@register/stepBack')<void>(),\r\n\r\n  startRegisterAccount: create('@register/startRegisterAccount')<void>(),\r\n  generateSeed: create('@register/generateSeed')<void>(),\r\n  submitSeed: create('@register/submitSeed')<void>(),\r\n  confirmSeed: create('@register/confirmSeed')<void>(),\r\n  register: create('@register/register')<string>(),\r\n  reset: create('@register/reset')<void>(),\r\n\r\n  startImportAccount: create('@register/startImportAccount')<void>(),\r\n  importAccount: create('@register/importAccount')<{\r\n    seed: string[]\r\n    password: string\r\n  }>(),\r\n}\r\n","import { RegisterStage } from 'register/state/models/register-stage'\r\nimport { RegisterState } from 'register/state/register.reducer'\r\n\r\ntype RegisterStageStateSlice = {\r\n  stage: RegisterStage | undefined\r\n  showSteps: boolean\r\n  seed: string[]\r\n}\r\n\r\nexport const getPreviousStage = (state: RegisterState): RegisterStageStateSlice => {\r\n  if (state.stage === RegisterStage.IMPORT) {\r\n    return {\r\n      stage: undefined,\r\n      showSteps: false,\r\n      seed: [],\r\n    }\r\n  }\r\n\r\n  return {\r\n    stage: state.stage === RegisterStage.STEP1 ? undefined : Number(state.stage) - 1,\r\n    showSteps: [1, undefined].includes(state.stage) ? false : true,\r\n    seed: state.stage === RegisterStage.STEP2 ? [] : state.seed,\r\n  }\r\n}\r\n","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport { registerActions as actions } from 'register/state/register.actions'\r\nimport { getPreviousStage } from 'register/state/helpers/stage.helper'\r\nimport { RegisterStage } from 'register/state/models/register-stage'\r\nimport { generateSeed } from 'register/state/helpers/seed.helper'\r\n\r\nexport interface RegisterState {\r\n  stage: RegisterStage | undefined\r\n  seed: string[]\r\n  seedConfirmed: boolean\r\n  showSteps: boolean\r\n}\r\n\r\nexport const initialRegisterState: RegisterState = {\r\n  stage: undefined,\r\n  seed: [],\r\n  seedConfirmed: false,\r\n  showSteps: false,\r\n}\r\n\r\nexport const registerReducer = createReducer<RegisterState, ActionType<typeof actions>>(\r\n  initialRegisterState,\r\n)\r\n  .handleAction(actions.stepBack, (state) => ({\r\n    ...state,\r\n    ...getPreviousStage(state),\r\n  }))\r\n  .handleAction(actions.startRegisterAccount, (state) => ({\r\n    ...state,\r\n    showSteps: true,\r\n    stage: RegisterStage.STEP1,\r\n  }))\r\n  .handleAction(actions.generateSeed, (state) => ({\r\n    ...state,\r\n    seed: generateSeed(),\r\n    seedConfirmed: false,\r\n    stage: RegisterStage.STEP2,\r\n  }))\r\n  .handleAction(actions.submitSeed, (state) => ({\r\n    ...state,\r\n    seedConfirmed: false,\r\n    stage: RegisterStage.STEP3,\r\n  }))\r\n  .handleAction(actions.confirmSeed, (state) => ({\r\n    ...state,\r\n    seedConfirmed: true,\r\n    stage: RegisterStage.STEP4,\r\n  }))\r\n  .handleAction(actions.register, (state, password) => ({\r\n    ...state,\r\n    showSteps: false,\r\n    stage: undefined,\r\n  }))\r\n  .handleAction(actions.startImportAccount, (state) => ({\r\n    ...state,\r\n    showSteps: false,\r\n    stage: RegisterStage.IMPORT,\r\n  }))\r\n  .handleAction(actions.reset, () => ({\r\n    ...initialRegisterState,\r\n  }))\r\n  .handleAction(actions.importAccount, (state) => ({\r\n    ...state,\r\n    showSteps: false,\r\n    stage: undefined,\r\n  }))\r\n","import { generateMnemonic, validateMnemonic } from 'zeropool-api-js/lib/utils'\r\n\r\nexport const generateSeed = () => {\r\n  return generateMnemonic().split(' ')\r\n}\r\n\r\nexport const validateSeed = (seed: string[]): boolean => {\r\n  return validateMnemonic(seed.join(' '))\r\n}\r\n","import { createAction as create } from 'typesafe-actions'\r\n\r\nimport { Token, TokenName } from 'shared/models/token'\r\n\r\nimport { WalletView } from 'wallet/state/models/wallet-view'\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\nimport { WalletRecord } from './models'\r\nimport { Transaction } from 'zeropool-api-js/lib/coins/transaction'\r\n\r\nexport const walletActions = {\r\n  apiError: create('@wallet/apiError')<string>(),\r\n\r\n  addWallet: create('@wallet/addWallet')<void>(),\r\n  addWalletSuccess: create('@wallet/addWalletSuccess')<WalletRecord>(),\r\n  addWalletError: create('@wallet/addWalletError')<string>(),\r\n\r\n  openBalanceView: create('@wallet/openBalanceView')<void>(), // called on wallet first load\r\n  openWalletsView: create('@wallet/openWalletsView')<Token>(),\r\n  openTransactionsView: create('@wallet/openTransactionsView')<Wallet>(), // Transactions View\r\n  openReceiveView: create('@wallet/openReceiveView')<Wallet>(),\r\n  openSendInitialView: create('@wallet/openSendInitialView')<Wallet>(),\r\n  prepareSendConfirmView: create('@wallet/prepareSendConfirmView')<{\r\n    wallet: Wallet\r\n    address: string\r\n    amount: number\r\n  }>(),\r\n  openSendConfirmView: create('@wallet/openSendConfirmView')<{\r\n    wallet: Wallet\r\n    address: string\r\n    amount: number\r\n    fee: string\r\n  }>(),\r\n\r\n  initWallets: create('@wallet/initWallets')<void>(),\r\n  updateBalances: create('@wallet/updateBalances')<void>(),\r\n  updateWalletsSuccess: create('@wallet/updateWalletsSuccess')<WalletRecord>(),\r\n  updateWalletsError: create('@wallet/updateWalletsError')<string>(),\r\n\r\n  getTransactions: create('@wallet/getTransactions')<Wallet>(),\r\n  getTransactionsSuccess: create('@wallet/getTransactionsSussess')<Transaction[]>(),\r\n\r\n  refreshAmounts: create('@wallet/refreshAmounts')<void>(),\r\n\r\n  getRates: create('@wallet/getRates')<void>(),\r\n  getRatesSuccess: create('@wallet/getRatesSuccess')<Record<TokenName, number>>(),\r\n  getRatesError: create('@wallet/getRates')<string>(),\r\n\r\n  headerBack: create('@wallet/header/back')<void>(),\r\n\r\n  menu: create('@wallet/menu')<WalletView>(),\r\n  edit: create('@wallet/edit')<{ wallet: Wallet; name: string }>(),\r\n  send: create('@wallet/send')<void>(),\r\n\r\n  setSeed: create('@wallet/setSeed')<string>(),\r\n  setSeedSuccess: create('@wallet/setSeedSuccess')<void>(),\r\n  setSeedError: create('@wallet/setSeedError')<string>(),\r\n\r\n  hideWallet: create('@wallet/hideWallet')<Wallet>(),\r\n\r\n  resetAccount: create('@wallet/resetAccount')<void>(),\r\n\r\n  getPrivateAddress: create('@wallet/getPrivateAddress')<Token>(),\r\n  getPrivateAddressSuccess: create('@wallet/getPrivateAddressSuccess')<string>(),\r\n}\r\n","import { createSelector } from 'reselect'\r\n\r\nimport { RootState } from 'state'\r\n\r\nexport const getRegisterState = (state: RootState) => state.register\r\n\r\nexport const getRegisterStage = createSelector(getRegisterState, (state) => state.stage)\r\n\r\nexport const getRegisterSeed = createSelector(getRegisterState, (state) => state.seed)\r\n\r\nexport const getRegisterSeedConfirmed = createSelector(\r\n  getRegisterState,\r\n  (state) => state.seedConfirmed,\r\n)\r\n\r\nexport const getShowSteps = createSelector(getRegisterState, (state) => state.showSteps)\r\n","import { Observable, of } from 'rxjs'\r\nimport { Epic, combineEpics } from 'redux-observable'\r\nimport { ActionType, isActionOf } from 'typesafe-actions'\r\nimport { withLatestFrom, filter, map, switchMap } from 'rxjs/operators'\r\n\r\nimport { walletActions } from 'wallet/state/wallet.actions'\r\nimport { registerActions } from 'register/state/register.actions'\r\nimport { getRegisterSeed } from 'register/state/register.selectors'\r\n\r\nimport { RootState } from 'state'\r\n\r\ntype Actions = ActionType<typeof registerActions>\r\n\r\nconst importAccount$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(registerActions.importAccount)),\r\n    switchMap((action) => {\r\n      const seed = action.payload.seed.join(' ')\r\n      return of(registerActions.reset(), walletActions.setSeed(seed))\r\n    }),\r\n  )\r\n\r\nconst register$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(registerActions.register)),\r\n    withLatestFrom(state$.pipe(map(getRegisterSeed))),\r\n    switchMap(([_action, seed]) => {\r\n      return of(registerActions.reset(), walletActions.setSeed(seed.join(' ')))\r\n    }),\r\n  )\r\n\r\nexport const registerEpics: Epic = combineEpics(importAccount$, register$)\r\n","import { RootState } from 'state'\r\n\r\n// @todo check maybe it is possible to get rid of any.\r\nexport const stateMigrations = {\r\n  0: (state: any): any => {\r\n    const newState: RootState = {\r\n      ...state,\r\n    }\r\n\r\n    return {\r\n      ...newState,\r\n    }\r\n  },\r\n}\r\n","export const recordFromArray = <T>(array: T[], id: string = 'id'): Record<string, T> =>\r\n  array.reduce((obj, item) => {\r\n    obj[item[id]] = item\r\n    return obj\r\n  }, {})\r\n","export const roundNumber = (num: number, decimals: number) => {\r\n  const result = Number(num + '').toFixed(parseInt(decimals + '', undefined))\r\n\r\n  return parseFloat(result)\r\n}\r\n\r\nexport const round = (num: number) => roundNumber(num, 12)\r\n","import { Token, TokenSymbol } from 'shared/models/token'\r\nimport { round } from 'shared/util/round-number'\r\n\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\nimport { WalletView } from 'wallet/state/models'\r\nimport { WalletState } from 'wallet/state/wallet.reducer'\r\n\r\nexport const amountsHelper = {\r\n  getAmountsForAllTakens: (\r\n    tokens: Token[],\r\n    wallets: Record<TokenSymbol, Wallet[]> | null,\r\n  ): Record<TokenSymbol, number> | null => {\r\n    if (!wallets) return null\r\n\r\n    const amounts: Record<TokenSymbol, number> = {}\r\n\r\n    for (const token of tokens) {\r\n      amounts[token.symbol] = 0\r\n    }\r\n\r\n    for (const token of tokens) {\r\n      let amount = 0\r\n\r\n      for (const wallet of wallets[token.symbol]) {\r\n        amount += wallet.amount\r\n      }\r\n\r\n      amounts[token.symbol] = round(amount)\r\n    }\r\n\r\n    return amounts\r\n  },\r\n\r\n  getAmountsForToken: (token: Token, wallets: Wallet[]): Record<TokenSymbol, number> => ({\r\n    [token.symbol]: round(wallets.reduce((accu, next) => (accu += next.amount), 0)),\r\n  }),\r\n\r\n  getAmountsForWallet: (wallet: Wallet | null): Record<TokenSymbol, number> => {\r\n    return wallet ? { [wallet.token.symbol]: wallet.amount } : {}\r\n  },\r\n\r\n  getAmounts: (state: WalletState) => {\r\n    switch (state.activeView) {\r\n      case WalletView.Wallets:\r\n        return state.activeToken && state.wallets\r\n          ? amountsHelper.getAmountsForToken(\r\n              state.activeToken,\r\n              state.wallets[state.activeToken.symbol],\r\n            )\r\n          : state.amounts\r\n      case WalletView.Receive:\r\n      case WalletView.Send:\r\n      case WalletView.SendConfirmation:\r\n      case WalletView.Transactions:\r\n        return state.activeWallet\r\n          ? amountsHelper.getAmountsForWallet(state.activeWallet)\r\n          : state.amounts\r\n      default:\r\n        return amountsHelper.getAmountsForAllTakens(state.supportedTokens, state.wallets)\r\n    }\r\n  },\r\n}\r\n","import { WalletState } from 'wallet/state/wallet.reducer'\r\nimport { amountsHelper } from 'wallet/state/helpers/amounts.helper'\r\nimport { WalletView, Wallet } from 'wallet/state/models'\r\n\r\nexport const navigationHelper = {\r\n  handleBackClick: (state: WalletState): WalletState => {\r\n    switch (state.activeView) {\r\n      case WalletView.Send:\r\n        return state.activeToken && state.wallets\r\n          ? {\r\n              ...state,\r\n              activeView: WalletView.Wallets,\r\n              activeWallet: null,\r\n              amounts: amountsHelper.getAmountsForToken(\r\n                state.activeToken,\r\n                state.wallets[state.activeToken.symbol],\r\n              ),\r\n            }\r\n          : state\r\n\r\n      case WalletView.SendConfirmation:\r\n        return state.activeToken && state.activeWallet\r\n          ? {\r\n              ...state,\r\n              activeView: WalletView.Send,\r\n              amounts: amountsHelper.getAmountsForWallet(state.activeWallet),\r\n            }\r\n          : state\r\n\r\n      case WalletView.Receive:\r\n        return state.activeToken && state.wallets\r\n          ? {\r\n              ...state,\r\n              activeView: WalletView.Wallets,\r\n              activeWallet: null,\r\n              amounts: amountsHelper.getAmountsForToken(\r\n                state.activeToken,\r\n                state.wallets[state.activeToken.symbol],\r\n              ),\r\n            }\r\n          : state\r\n\r\n      case WalletView.Transactions:\r\n        return state.activeToken && state.wallets\r\n          ? {\r\n              ...state,\r\n              activeView: state.previousView || WalletView.Balance,\r\n              activeToken: state.previousView ? state.activeToken : null,\r\n              activeWallet: null,\r\n              amounts: state.previousView\r\n                ? amountsHelper.getAmountsForToken(\r\n                    state.activeToken,\r\n                    state.wallets[state.activeToken.symbol],\r\n                  )\r\n                : amountsHelper.getAmountsForAllTakens(state.supportedTokens, state.wallets),\r\n            }\r\n          : state\r\n\r\n      default:\r\n        return {\r\n          ...state,\r\n          activeView: WalletView.Balance,\r\n          activeToken: null,\r\n          activeWallet: null,\r\n          amounts: amountsHelper.getAmountsForAllTakens(state.supportedTokens, state.wallets),\r\n        }\r\n    }\r\n  },\r\n\r\n  getReceiveView: (state: WalletState, wallet: Wallet) =>\r\n    state.activeToken && state.wallets\r\n      ? {\r\n          ...state,\r\n          activeView: WalletView.Receive,\r\n          activeWallet: wallet,\r\n          amounts: amountsHelper.getAmountsForWallet(wallet),\r\n        }\r\n      : state,\r\n\r\n  getSendInitialView: (state: WalletState, wallet: Wallet) =>\r\n    state.activeToken && state.wallets\r\n      ? {\r\n          ...state,\r\n          activeView: WalletView.Send,\r\n          activeWallet: wallet,\r\n          amounts: amountsHelper.getAmountsForWallet(wallet),\r\n        }\r\n      : state,\r\n\r\n  getBalanceView: (state: WalletState) => ({\r\n    ...state,\r\n    activeToken: null,\r\n    activeView: WalletView.Balance,\r\n    activeWallet: null,\r\n    amounts: amountsHelper.getAmountsForAllTakens(state.supportedTokens, state.wallets),\r\n  }),\r\n}\r\n","import { Wallet } from 'wallet/state/models/wallet'\r\n\r\nexport const walletsHelper = {\r\n  renameWallet: (wallets: Wallet[], wallet: Wallet, name: string): Wallet[] => {\r\n    const result: Wallet[] = []\r\n\r\n    for (const _wallet of wallets) {\r\n      if (_wallet === wallet) {\r\n        result.push({\r\n          ..._wallet,\r\n          name,\r\n        })\r\n      } else {\r\n        result.push(_wallet)\r\n      }\r\n    }\r\n\r\n    return result\r\n  },\r\n\r\n  hideWallet: (wallets: Wallet[], wallet: Wallet) => {\r\n    const result: Wallet[] = []\r\n\r\n    for (const _wallet of wallets) {\r\n      if (_wallet !== wallet) {\r\n        result.push(_wallet)\r\n      }\r\n    }\r\n\r\n    return result\r\n  },\r\n\r\n  addWallet: (wallets: Wallet[]): Wallet[] => {\r\n    const first: Wallet = wallets[0]\r\n\r\n    return [\r\n      ...wallets,\r\n      {\r\n        ...first,\r\n        name: `Wallet${first.token.symbol}${wallets.length}`,\r\n        amount: 0,\r\n        address: first.address + wallets.length,\r\n      },\r\n    ]\r\n  },\r\n\r\n  reduceWallets: (wallets: Wallet[]): Wallet[] => {\r\n    let lastValuableIndex = 0\r\n\r\n    for (let i = wallets.length - 1; i > 0; i--) {\r\n      if (wallets[i].amount > 0) {\r\n        lastValuableIndex = i\r\n        break\r\n      }\r\n    }\r\n\r\n    return wallets.slice(0, lastValuableIndex ? lastValuableIndex + 1 : 1)\r\n  },\r\n\r\n  getActiveIndex: (wallets: Wallet[], activeWallet: Wallet): number =>\r\n    wallets.findIndex((wallet) => wallet.address === activeWallet.address),\r\n}\r\n","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport supportedTokens from 'assets/settings/supported-tokens.json'\r\n\r\nimport { recordFromArray } from 'shared/util/from'\r\nimport { Token, TokenSymbol } from 'shared/models/token'\r\n\r\nimport { PollSettings, SendData, Wallet } from 'wallet/state/models'\r\nimport { walletActions as actions } from 'wallet/state/wallet.actions'\r\nimport { navigationHelper } from 'wallet/state/helpers/navigation.helper'\r\nimport { amountsHelper } from 'wallet/state/helpers/amounts.helper'\r\nimport { walletsHelper } from 'wallet/state/helpers/wallets.helper'\r\nimport { Transaction } from 'wallet/state/models/transaction'\r\nimport { WalletView } from 'wallet/state/models/wallet-view'\r\n\r\nexport const initialWalletName = 'Main wallet'\r\n\r\nconst pollSettingsDefault: PollSettings = { account: 0, amount: 5, offset: 0 }\r\n\r\nexport type WalletState = {\r\n  activeView: WalletView\r\n  activeToken: Token | null\r\n  activeWallet: Wallet | null\r\n  amounts: Record<TokenSymbol, number> | null\r\n  pollSettings: PollSettings\r\n  seed: string | null\r\n  send: SendData | null\r\n  supportedTokens: Token[]\r\n  supportedTokensRecord: Record<TokenSymbol, Token>\r\n  transactions: Transaction[] | null\r\n  usdRates: Record<TokenSymbol, number>\r\n  wallets: Record<TokenSymbol, Wallet[]> | null\r\n  previousView: WalletView | null\r\n  privateAddress: string | null\r\n}\r\n\r\nexport const initialWalletState: WalletState = {\r\n  activeView: WalletView.Balance,\r\n  activeToken: null,\r\n  activeWallet: null,\r\n  amounts: null,\r\n  pollSettings: pollSettingsDefault,\r\n  seed: null,\r\n  send: null,\r\n  supportedTokens: supportedTokens.supported,\r\n  supportedTokensRecord: recordFromArray(supportedTokens.supported, 'symbol'),\r\n  transactions: null,\r\n  usdRates: {},\r\n  wallets: null,\r\n  previousView: null,\r\n  privateAddress: null,\r\n}\r\n\r\nexport const walletReducer = createReducer<WalletState, ActionType<typeof actions>>(\r\n  initialWalletState,\r\n)\r\n  .handleAction(actions.menu, (state, { payload }) => ({\r\n    ...state,\r\n    activeView: payload !== WalletView.Reset ? payload : state.activeView,\r\n  }))\r\n  .handleAction(actions.headerBack, (state) => ({\r\n    ...navigationHelper.handleBackClick(state),\r\n  }))\r\n  .handleAction(actions.openBalanceView, (state) => ({\r\n    ...navigationHelper.getBalanceView(state),\r\n  }))\r\n  .handleAction(actions.openWalletsView, (state, { payload }) => ({\r\n    ...state,\r\n    activeView: WalletView.Wallets,\r\n    activeToken: payload,\r\n    previousView: state.activeView,\r\n  }))\r\n  .handleAction(actions.openTransactionsView, (state, { payload }) => ({\r\n    ...state,\r\n    activeView: WalletView.Transactions,\r\n    activeWallet: payload,\r\n    previousView: state.activeView,\r\n    transactions: null,\r\n    amounts: amountsHelper.getAmountsForWallet(payload),\r\n  }))\r\n  .handleAction(actions.openReceiveView, (state, { payload }) => ({\r\n    ...navigationHelper.getReceiveView(state, payload),\r\n    privateAddress: null,\r\n  }))\r\n  .handleAction(actions.openSendInitialView, (state, { payload }) => ({\r\n    ...navigationHelper.getSendInitialView(state, payload),\r\n  }))\r\n  .handleAction(actions.openSendConfirmView, (state, { payload }) => ({\r\n    ...state,\r\n    activeView: WalletView.SendConfirmation,\r\n    send: {\r\n      wallet: payload.wallet,\r\n      address: payload.address,\r\n      amount: payload.amount,\r\n      fee: payload.fee,\r\n    },\r\n  }))\r\n  .handleAction(actions.getTransactionsSuccess, (state, { payload }) => ({\r\n    ...state,\r\n    transactions: payload,\r\n  }))\r\n  .handleAction(actions.setSeed, (state, { payload }) => ({\r\n    ...state,\r\n    seed: payload,\r\n  }))\r\n  .handleAction(actions.updateWalletsSuccess, (state, { payload }) => ({\r\n    ...state,\r\n    wallets: payload,\r\n    activeWallet:\r\n      state.activeWallet && state.activeToken\r\n        ? payload[state.activeToken.symbol][\r\n            walletsHelper.getActiveIndex(payload[state.activeToken.symbol], state.activeWallet)\r\n          ]\r\n        : null,\r\n  }))\r\n  .handleAction(actions.refreshAmounts, (state) => ({\r\n    ...state,\r\n    amounts: amountsHelper.getAmounts(state),\r\n  }))\r\n  .handleAction(actions.resetAccount, () => initialWalletState)\r\n  .handleAction(actions.edit, (state, { payload }) => ({\r\n    ...state,\r\n    wallets: !(state.activeToken && state.wallets)\r\n      ? state.wallets\r\n      : {\r\n          ...state.wallets,\r\n          [state.activeToken.symbol]: walletsHelper.renameWallet(\r\n            state.wallets[state.activeToken.symbol],\r\n            payload.wallet,\r\n            payload.name,\r\n          ),\r\n        },\r\n  }))\r\n  .handleAction(actions.addWalletSuccess, (state, { payload }) => ({\r\n    ...state,\r\n    wallets: payload,\r\n  }))\r\n  .handleAction(actions.hideWallet, (state, { payload }) => ({\r\n    ...state,\r\n    wallets: !(state.activeToken && state.wallets)\r\n      ? state.wallets\r\n      : {\r\n          ...state.wallets,\r\n          [state.activeToken.symbol]: walletsHelper.hideWallet(\r\n            state.wallets[state.activeToken.symbol],\r\n            payload,\r\n          ),\r\n        },\r\n  }))\r\n  .handleAction(actions.getRatesSuccess, (state, { payload }) => ({\r\n    ...state,\r\n    usdRates: payload,\r\n  }))\r\n  .handleAction(actions.getPrivateAddressSuccess, (state, { payload }) => ({\r\n    ...state,\r\n    privateAddress: payload,\r\n  }))\r\n","import { ActionCreatorBuilder } from 'typesafe-actions'\r\nimport { catchError } from 'rxjs/operators'\r\nimport { merge, of } from 'rxjs'\r\n\r\nexport const handleEpicError = (errorAction: ActionCreatorBuilder<string, string>) =>\r\n  catchError((error, caught) => merge(of(errorAction(error.message)), caught))\r\n","import { pipe } from 'rxjs'\r\nimport { filter } from 'rxjs/operators'\r\nimport { ActionCreator, isActionOf } from 'typesafe-actions'\r\n\r\n/**\r\n * @todo check this operator, because it swallow\r\n * action payload type when used for single action\r\n */\r\nexport const filterActions = <T extends string>(...actionCreators: ActionCreator<T>[]) => {\r\n  const isOneAction = actionCreators.length === 1\r\n  const argument = isOneAction ? actionCreators[0] : actionCreators\r\n  return pipe(filter(isActionOf(argument)))\r\n}\r\n","import { createSelector } from 'reselect'\r\n\r\nimport { RootState } from 'state'\r\n\r\nimport { WalletState } from 'wallet/state/wallet.reducer'\r\nimport { walletsHelper } from 'wallet/state/helpers/wallets.helper'\r\n\r\nexport const getWalletState = (state: RootState): WalletState => state.account\r\n\r\nexport const getActiveView = createSelector(getWalletState, (state) => state.activeView)\r\n\r\nexport const getActiveToken = createSelector(getWalletState, (state) => state.activeToken)\r\n\r\nexport const getWallets = createSelector(getWalletState, (state) => state.wallets)\r\n\r\nexport const getActiveWallet = createSelector(getWalletState, (state) => state.activeWallet)\r\n\r\nexport const getActiveWalletIndex = createSelector(\r\n  getWallets,\r\n  getActiveWallet,\r\n  getActiveToken,\r\n  (wallets, wallet, token) =>\r\n    wallets && token && wallet\r\n      ? walletsHelper.getActiveIndex(wallets[token?.symbol], wallet)\r\n      : null,\r\n)\r\n\r\nexport const getAmounts = createSelector(getWalletState, (state) => state.amounts)\r\n\r\nexport const getWalletsForActiveToken = createSelector(getWalletState, (state) =>\r\n  state.activeToken && state.wallets ? state.wallets[state.activeToken.symbol] : null,\r\n)\r\n\r\nexport const getSupportedTokens = createSelector(getWalletState, (state) => state.supportedTokens)\r\n\r\nexport const getSupportedTokensRecord = createSelector(\r\n  getWalletState,\r\n  (state) => state.supportedTokensRecord,\r\n)\r\n\r\nexport const getUsdRates = createSelector(getWalletState, (state) => state.usdRates)\r\n\r\nexport const getSendData = createSelector(getWalletState, (state) => state.send)\r\n\r\nexport const getSeed = createSelector(getWalletState, (state) => state.seed)\r\n\r\nexport const getPollSettings = createSelector(getWalletState, (state) => state.pollSettings)\r\n\r\nexport const getTransactions = createSelector(getWalletState, (state) => state.transactions)\r\n\r\nexport const getPrivateAddress = createSelector(getWalletState, (state) => state.privateAddress)\r\n","export const fixTimestamp = (timestamp: string | number) =>\r\n  (timestamp + '').length < 13\r\n    ? +timestamp * 1000 // add milliseconds\r\n    : +timestamp\r\n","import toast from 'shared/helpers/toast.helper'\r\n\r\nexport const promiceErrorHandler = <T>(mock: T, message?: string) => (err: Error) => {\r\n  console.error('Api error:')\r\n  console.error(err)\r\n  toast.error(message || err.message)\r\n\r\n  return mock\r\n}\r\n","import mocks from './mocks.json'\r\n\r\nimport { Transaction } from 'wallet/state/models/transaction'\r\nimport { fixTimestamp } from 'shared/util/fix-timestamp'\r\n\r\nconst k = 'MCTF6EHW28WGXZN21USVHDIAVFN9WC2IH7'\r\nconst getUrl = (address: string) =>\r\n  'https://api-kovan.etherscan.io/api?module=account&action=txlist&address=' +\r\n  address +\r\n  '&startblock=0&endblock=99999999&sort=asc&apikey=' +\r\n  k\r\n\r\nconst toTransaction = (tr: any) =>\r\n  ({\r\n    hash: tr.hash,\r\n    blockHash: tr.blockHash,\r\n    status: 0,\r\n    amount: tr.value,\r\n    from: tr.from,\r\n    to: tr.to,\r\n    timestamp: fixTimestamp(tr.timeStamp),\r\n  } as Transaction)\r\n\r\nexport const getEthTransactions = (address: string, mocked = false): Promise<Transaction[]> =>\r\n  mocked\r\n    ? Promise.resolve(mocks.transactions.ETH)\r\n    : fetch(getUrl(address)).then((val) =>\r\n        val\r\n          .clone()\r\n          .json()\r\n          .then((response) => response.result)\r\n          .then((data) => data.map(toTransaction)),\r\n      )\r\n","import { HDWallet, CoinType, devConfig, Balance, Coin } from 'zeropool-api-js'\r\nimport { from, Observable, of } from 'rxjs'\r\nimport { Transaction } from 'zeropool-api-js/lib/coins/transaction'\r\nimport { map, tap } from 'rxjs/operators'\r\n\r\nimport { Token } from 'shared/models'\r\nimport { fixTimestamp } from 'shared/util/fix-timestamp'\r\n\r\nimport { promiceErrorHandler } from 'wallet/api/promice-error.handler'\r\nimport { getEthTransactions } from 'wallet/api/es.api'\r\n\r\nimport mocks from './mocks.json'\r\n\r\nexport let hdWallet: HDWallet | null = null\r\nexport let transaction$: Observable<Transaction> | null = null\r\n\r\nfunction initHDWallet(seed: string, coins: CoinType[]): HDWallet {\r\n  hdWallet = new HDWallet(seed, devConfig, coins)\r\n\r\n  return hdWallet\r\n}\r\n\r\nconst getWalletBalance = (token: Token, walletId: number) => {\r\n  if (!hdWallet) {\r\n    throw Error('API not available!')\r\n  }\r\n\r\n  const coin = hdWallet.getCoin(token.name as CoinType)\r\n\r\n  if (!coin) {\r\n    throw Error(`Can not access ${token.name} data!`)\r\n  }\r\n\r\n  return from(coin.getBalances(1, walletId).catch(promiceErrorHandler<Balance[]>([]))).pipe(\r\n    map((balances: any[]) => balances[0]),\r\n    map((balance: any) => ({\r\n      ...balance,\r\n      balance: coin.fromBaseUnit(balance.balance),\r\n    })),\r\n  )\r\n}\r\n\r\nconst getPrivateAddress = (token: Token) => {\r\n  if (!hdWallet) {\r\n    throw Error('API not available!')\r\n  }\r\n\r\n  const coin = hdWallet.getCoin(token.name as CoinType)\r\n  const e = `Can't estimate fee for ${token.name}`\r\n\r\n  if (!coin) {\r\n    throw Error(`Can't estimate fee for ${token.symbol}`)\r\n  }\r\n\r\n  return from([coin.generatePrivateAddress()])\r\n}\r\n\r\nconst getAllBalances = (amount: number, offset = 0) => {\r\n  if (!hdWallet) {\r\n    throw Error('API not available!')\r\n  }\r\n\r\n  return from(hdWallet.getBalances(amount, offset).catch(promiceErrorHandler({})))\r\n}\r\n\r\nconst getNetworkFee = (token: Token): Observable<{ fee: string }> => {\r\n  if (!hdWallet) {\r\n    throw Error('API not available!')\r\n  }\r\n\r\n  const coin = hdWallet.getCoin(token.name as CoinType)\r\n  const e = `Can't estimate fee for ${token.name}`\r\n\r\n  if (!coin) {\r\n    throw Error(`Can't estimate fee for ${token.symbol}`)\r\n  }\r\n\r\n  return from(coin.estimateTxFee().catch(promiceErrorHandler<{ fee: string }>({ fee: '' }, e)))\r\n}\r\n\r\n// tslint:disable-next-line: prettier\r\nconst getWalletTransactions = (token: Token, walletId: number, mocked = false): Observable<Transaction[]> => {\r\n  if (!hdWallet) {\r\n    throw Error('API not available!')\r\n  }\r\n\r\n  const coin = hdWallet.getCoin(token.name as CoinType)\r\n  const e = `Can't get transactions for ${token.name}`\r\n\r\n  if (!coin) {\r\n    throw Error(`Can't connect to ${token.symbol}`)\r\n  }\r\n\r\n  //#region TODO: Fix after implementing private transactions history\r\n  if (walletId === 0) {\r\n    return of([])\r\n  }\r\n\r\n  walletId -= 1\r\n  //#endregion ---------------------------------------------------------\r\n\r\n  const tr =\r\n    token.symbol === 'ETH'\r\n      ? from(\r\n          getEthTransactions(coin.getAddress(walletId), mocked).catch(\r\n            promiceErrorHandler<Transaction[]>([], e),\r\n          ),\r\n        )\r\n      : mocked\r\n      ? of(mocks.transactions[token.symbol])\r\n      : from(coin.getTransactions(walletId, 10, 0).catch(promiceErrorHandler<Transaction[]>([], e)))\r\n\r\n  return tr.pipe(map(convertValues(coin)))\r\n}\r\n\r\nconst transfer = (account: number, to: string, amount: number, token: Token) => {\r\n  if (!hdWallet) {\r\n    throw Error('API not available!')\r\n  }\r\n\r\n  const coin = hdWallet.getCoin(token.name as CoinType)\r\n  const e = `Can't transfer ${token.name}`\r\n\r\n  if (!coin) {\r\n    throw Error(`Can't estimate fee for ${token.symbol}`)\r\n  }\r\n\r\n  return from(\r\n    coin\r\n      .transfer(account, to, coin.toBaseUnit(amount.toString()))\r\n      .catch(promiceErrorHandler<Transaction[]>([], e)),\r\n  )\r\n}\r\n\r\nexport default {\r\n  getAllBalances,\r\n  getWalletBalance,\r\n  getNetworkFee,\r\n  getWalletTransactions,\r\n  getPrivateAddress,\r\n  initHDWallet,\r\n  transfer,\r\n}\r\n\r\nconst convertValues = (coin: Coin) => (transactions: Transaction[]) =>\r\n  transactions.map((transaction) => ({\r\n    ...transaction,\r\n    amount: coin.fromBaseUnit(transaction.amount),\r\n    timestamp: fixTimestamp(transaction.timestamp),\r\n  }))\r\n","import storage from 'redux-persist/lib/storage'\r\nimport { PersistConfig } from 'redux-persist/es/types'\r\nimport { createBrowserHistory, History } from 'history'\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable'\r\nimport { persistStore, persistReducer, createMigrate } from 'redux-persist'\r\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\n\r\nimport { registerReducer } from 'register/state/register.reducer'\r\nimport { registerEpics } from 'register/state/register.epics'\r\n\r\nimport { stateMigrations } from 'state-migrations'\r\nimport { walletReducer } from 'wallet/state/wallet.reducer'\r\nimport { walletEpics } from 'wallet/state/wallet.epics'\r\nimport { loadingBarReducer } from 'shared/loading-bar/state/loading-bar.reducer'\r\n\r\n//#region Setup Devtools\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: <R>(a: R) => R\r\n  }\r\n}\r\n\r\nconst devToolsCompose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n\r\nconst composeEnhancers = devToolsCompose || compose\r\n//#endregion\r\n\r\n//#region Setup Epics\r\nconst epicMiddleware = createEpicMiddleware()\r\n\r\nconst rootEpic = combineEpics(\r\n  registerEpics,\r\n  walletEpics,\r\n  // alertsEpics,\r\n  // notificationsEpics,\r\n)\r\n//#endregion\r\n\r\n//#region Setup Reducers\r\nexport type RootState = NonNullable<Parameters<ReturnType<typeof createRootReducer>>[0]>\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nexport const createRootReducer = (_history: History) =>\r\n  combineReducers({\r\n    register: registerReducer,\r\n    account: walletReducer,\r\n    router: connectRouter(_history),\r\n    shared: combineReducers({\r\n      loadingBar: loadingBarReducer,\r\n      //   // alerts: alertsReducer,\r\n      //   // notifications: notificationsReducer,\r\n      //   // menuBar: menuBarReducer,\r\n    }),\r\n  })\r\n//#endregion\r\n\r\n//#region Setup Persisted Store\r\nconst persistConfig: PersistConfig<RootState> = {\r\n  key: 'root',\r\n  version: 0,\r\n  storage,\r\n  migrate: createMigrate(stateMigrations, { debug: false }),\r\n  whitelist: ['register', 'account'],\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, createRootReducer(history))\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  composeEnhancers(applyMiddleware(epicMiddleware, routerMiddleware(history))),\r\n)\r\n\r\nexport const persistedStore = persistStore(store)\r\n//#endregion\r\n\r\nepicMiddleware.run(rootEpic)\r\n","export const notImplemented = (err: Error) =>\r\n  typeof err?.message === 'string' && /(?=.*not)(?=.*implemented)/.test(err.message.toLowerCase())\r\n","import { of } from 'rxjs'\r\nimport { map } from 'rxjs/operators'\r\n\r\nimport { http, RequestConfig } from 'shared/http/http'\r\nimport { getHTTPData } from 'shared/operators/get-http-data.operator'\r\nimport { Provider } from 'shared/models/provider'\r\nimport { Token } from 'shared/models/token'\r\nimport { Rate } from 'shared/models/rate'\r\n\r\nimport ratesMock from 'assets/mocks/rates.mock.json'\r\nimport proxy from 'assets/settings/proxy.json'\r\n\r\nconst useMock = true\r\n\r\nexport const RatesApi = {\r\n  getRates() {\r\n    const url = proxy.cors + `https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest`\r\n    const config: RequestConfig = {\r\n      params: {},\r\n      context: {\r\n        noLoadingBar: true,\r\n        provider: Provider.Marketcap,\r\n      },\r\n      headers: {\r\n        'X-CMC_PRO_API_KEY': '66b703ca-d01c-4977-8876-b42c09e8b99e',\r\n      },\r\n    }\r\n\r\n    if (useMock) {\r\n      return of(ratesMock.data)\r\n    }\r\n\r\n    return http()\r\n      .get<{ status: any; data: Rate<Token>[] }>(url, config)\r\n      .pipe(\r\n        getHTTPData(),\r\n        map(({ status, data }) => data),\r\n      )\r\n  },\r\n}\r\n","import { map } from 'rxjs/operators'\r\nimport { PayloadAction } from 'typesafe-actions'\r\n\r\nexport const getPayload = <T>() => map((action: PayloadAction<string, T>) => action.payload)\r\n","import { push } from 'connected-react-router'\r\nimport { CoinType } from 'zeropool-api-js'\r\nimport { Epic, combineEpics } from 'redux-observable'\r\nimport { iif, Observable, of } from 'rxjs'\r\nimport { ActionType, isActionOf } from 'typesafe-actions'\r\nimport {\r\n  switchMapTo,\r\n  map,\r\n  withLatestFrom,\r\n  filter,\r\n  switchMap,\r\n  mergeMap,\r\n  ignoreElements,\r\n  tap,\r\n  mapTo,\r\n} from 'rxjs/operators'\r\n\r\nimport toast from 'shared/helpers/toast.helper'\r\nimport { Token, Rate } from 'shared/models'\r\nimport { handleEpicError } from 'shared/operators/handle-epic-error.operator'\r\nimport { filterActions } from 'shared/operators/filter-actions.operator'\r\n\r\nimport {\r\n  getActiveToken,\r\n  getActiveView,\r\n  getActiveWallet,\r\n  getPollSettings,\r\n  getSeed,\r\n  getSendData,\r\n  getSupportedTokens,\r\n  getWallets,\r\n} from 'wallet/state/wallet.selectors'\r\nimport api, { hdWallet } from 'wallet/api/zeropool.api'\r\nimport { SendData, Wallet, WalletRecord, WalletView } from 'wallet/state/models'\r\nimport { mapRatesToTokens } from 'wallet/state/helpers/map-rates-to-tokens'\r\nimport { updateBalances } from 'wallet/state/helpers/update-balances.helper'\r\nimport { walletActions } from 'wallet/state/wallet.actions'\r\nimport { RatesApi } from 'wallet/api/rates.api'\r\n\r\nimport { RootState } from 'state'\r\nimport { getPayload } from 'shared/operators/get-payload.operator'\r\nimport { initBalances } from './helpers/init-balances.helper'\r\n\r\ntype Actions = ActionType<typeof walletActions>\r\n\r\nconst defaultAccount = 0\r\nconst nextWalletId = (wallets: WalletRecord, token: Token) =>\r\n  wallets[token.symbol][wallets[token.symbol].length - 1].id + 1\r\n\r\nconst getRates$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.getRates)),\r\n    switchMapTo(\r\n      (RatesApi.getRates() as Observable<Rate<Token>[]>).pipe(\r\n        withLatestFrom(state$.pipe(map(getSupportedTokens))),\r\n        map(([ratesData, tokens]) => mapRatesToTokens(ratesData, tokens)),\r\n        map((rates) => walletActions.getRatesSuccess(rates)),\r\n      ),\r\n    ),\r\n    handleEpicError(walletActions.getRatesError),\r\n  )\r\n\r\nconst redirectToTheWalletOnSetSeed$: Epic = (\r\n  action$: Observable<Actions>,\r\n  state$: Observable<RootState>,\r\n) => action$.pipe(filter(isActionOf(walletActions.setSeed)), switchMapTo(of(push('/wallet'))))\r\n\r\nconst resetAccount$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.menu)),\r\n    filter((action) => action.payload === WalletView.Reset),\r\n    tap(() => toast.success('Wallet reseted and data cleared')),\r\n    mergeMap(() => of(push('/welcome'), walletActions.resetAccount())),\r\n  )\r\n\r\nconst initApi$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.openBalanceView),\r\n    withLatestFrom(\r\n      state$.pipe(map(getSeed)),\r\n      state$.pipe(map(getWallets)),\r\n      state$.pipe(map(getSupportedTokens)),\r\n    ),\r\n    switchMap(([, _seed, wallets, tokens]) =>\r\n      iif(\r\n        () => !!_seed,\r\n        of(_seed).pipe(\r\n          filter((seed): seed is string => typeof seed === 'string'),\r\n          tap((seed) =>\r\n            api.initHDWallet(\r\n              seed,\r\n              tokens.map((item) => item.name as CoinType),\r\n            ),\r\n          ),\r\n          map(() => (!wallets ? walletActions.initWallets() : walletActions.updateBalances())),\r\n        ),\r\n        of(false).pipe(\r\n          mergeMap(() => of(push('/welcome'), walletActions.setSeedError('Seed phrase not set'))),\r\n        ),\r\n      ),\r\n    ),\r\n    handleEpicError(walletActions.setSeedError),\r\n  )\r\n\r\nconst initWallets$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.initWallets),\r\n    withLatestFrom(state$.pipe(map(getPollSettings)), state$.pipe(map(getSupportedTokens))),\r\n    switchMap(([, settings, tokens]) =>\r\n      api.getAllBalances(settings.amount).pipe(\r\n        map((balances) => initBalances(hdWallet as any, balances, tokens)),\r\n        mergeMap((wallets) =>\r\n          of(walletActions.getRates(), walletActions.updateWalletsSuccess(wallets)),\r\n        ),\r\n      ),\r\n    ),\r\n    handleEpicError(walletActions.updateWalletsError),\r\n  )\r\n\r\nconst updateBalances$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.updateBalances),\r\n    withLatestFrom(state$.pipe(map(getWallets)), state$.pipe(map(getSupportedTokens))),\r\n    map(([, wallets, tokens]) => ({ wallets, tokens })),\r\n    filter((value): value is { wallets: WalletRecord; tokens: Token[] } => !!value.wallets),\r\n    switchMap(({ wallets, tokens }) => updateBalances(hdWallet as any, wallets, tokens)),\r\n    tap(() => toast.success('Balances updated')),\r\n    mergeMap((wallets) =>\r\n      of(walletActions.getRates(), walletActions.updateWalletsSuccess(wallets)),\r\n    ),\r\n    handleEpicError(walletActions.updateWalletsError),\r\n  )\r\n\r\nconst addWallet$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.addWallet),\r\n    withLatestFrom(state$.pipe(map(getWallets)), state$.pipe(map(getActiveToken))),\r\n    map(([, wallets, token]) => ({ wallets, token })),\r\n    filter(\r\n      (value): value is { wallets: WalletRecord; token: Token } => !!value.wallets && !!value.token,\r\n    ),\r\n    switchMap(({ wallets, token }) =>\r\n      api.getWalletBalance(token, nextWalletId(wallets, token)).pipe(\r\n        map((balance) =>\r\n          walletActions.addWalletSuccess({\r\n            ...wallets,\r\n            [token.symbol]: [\r\n              ...wallets[token.symbol],\r\n              {\r\n                account: defaultAccount,\r\n                address: balance.address,\r\n                token: { ...token },\r\n                id: nextWalletId(wallets, token),\r\n                amount: +balance.balance,\r\n                name: `Wallet${token.symbol}${nextWalletId(wallets, token)}`,\r\n              },\r\n            ],\r\n          }),\r\n        ),\r\n      ),\r\n    ),\r\n    handleEpicError(walletActions.addWalletError),\r\n  )\r\n\r\nconst refreshAmounts$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.updateWalletsSuccess),\r\n    map(() => walletActions.refreshAmounts()),\r\n  )\r\n\r\nconst getPrivateAddress$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.getPrivateAddress)),\r\n    switchMap(({ payload }) =>\r\n      api\r\n        .getPrivateAddress(payload)\r\n        .pipe(map((address) => walletActions.getPrivateAddressSuccess(address))),\r\n    ),\r\n    handleEpicError(walletActions.apiError),\r\n  )\r\n\r\nconst openSendConfirmView$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.prepareSendConfirmView)),\r\n    getPayload(),\r\n    switchMap((payload) =>\r\n      api.getNetworkFee(payload.wallet.token).pipe(\r\n        map((fee) =>\r\n          walletActions.openSendConfirmView({\r\n            ...payload,\r\n            fee: fee.fee,\r\n          }),\r\n        ),\r\n      ),\r\n    ),\r\n    handleEpicError(walletActions.apiError),\r\n  )\r\n\r\nconst sendTransaction$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.send),\r\n    withLatestFrom(state$.pipe(map(getSendData)), state$.pipe(map(getActiveWallet))),\r\n    map(([, sendData, wallet]) => ({ sendData, wallet })),\r\n    filter(\r\n      (value): value is { sendData: SendData; wallet: Wallet } =>\r\n        !!value.sendData && !!value.wallet,\r\n    ),\r\n    switchMap(({ sendData, wallet }) =>\r\n      api.transfer(wallet.id, sendData.address, sendData.amount, wallet.token).pipe(\r\n        tap(() => toast.success('Transaction completed successfully')),\r\n        mapTo(walletActions.openTransactionsView(wallet)),\r\n      ),\r\n    ),\r\n    handleEpicError(walletActions.apiError),\r\n  )\r\n\r\nconst callGetTransactionsOnOpenTransactionsView$: Epic = (\r\n  action$: Observable<Actions>,\r\n  state$: Observable<RootState>,\r\n) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.openTransactionsView)),\r\n    getPayload(),\r\n    map((wallet) => walletActions.getTransactions(wallet)),\r\n  )\r\n\r\nconst callGetTransactionsOnUpdateWallets$: Epic = (\r\n  action$: Observable<Actions>,\r\n  state$: Observable<RootState>,\r\n) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.updateBalances),\r\n    withLatestFrom(state$.pipe(map(getActiveView)), state$.pipe(map(getActiveWallet))),\r\n    filter(([, view]) => view === WalletView.Transactions),\r\n    map(([, , wallet]) => wallet),\r\n    filter((wallet): wallet is Wallet => !!wallet),\r\n    map((wallet) => walletActions.getTransactions(wallet)),\r\n  )\r\n\r\nconst getTransactions$: Epic = (action$: Observable<Actions>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.getTransactions)),\r\n    getPayload(),\r\n    switchMap((wallet) =>\r\n      api.getWalletTransactions(wallet.token, wallet.id, false).pipe(\r\n        map((transactions) => walletActions.getTransactionsSuccess(transactions)),\r\n      ),\r\n    ),\r\n    handleEpicError(walletActions.apiError),\r\n  )\r\n\r\nconst handleErrorActions$: Epic = (action$: Observable<Actions>) =>\r\n  action$.pipe(\r\n    filter(\r\n      isActionOf([\r\n        walletActions.addWalletError,\r\n        walletActions.setSeedError,\r\n        walletActions.updateWalletsError,\r\n        walletActions.apiError,\r\n      ]),\r\n    ),\r\n    tap(({ payload }) => toast.error(payload)),\r\n    ignoreElements(),\r\n  )\r\n\r\nexport const walletEpics: Epic = combineEpics(\r\n  addWallet$,\r\n  getRates$,\r\n  getTransactions$,\r\n  callGetTransactionsOnOpenTransactionsView$,\r\n  callGetTransactionsOnUpdateWallets$,\r\n  initApi$,\r\n  resetAccount$,\r\n  redirectToTheWalletOnSetSeed$,\r\n  initWallets$,\r\n  updateBalances$,\r\n  handleErrorActions$,\r\n  refreshAmounts$,\r\n  openSendConfirmView$,\r\n  sendTransaction$,\r\n  getPrivateAddress$,\r\n)\r\n","import { Rate } from 'shared/models/rate'\r\nimport { Token, TokenSymbol } from 'shared/models/token'\r\nimport { recordFromArray } from 'shared/util/from'\r\n\r\nexport const mapRatesToTokens = (\r\n  rates: Rate<Token>[],\r\n  tokens: Token[],\r\n): Record<TokenSymbol, number> => {\r\n  const result: Record<TokenSymbol, number> = {}\r\n  const ratesMap = recordFromArray(rates, 'symbol')\r\n\r\n  for (const token of tokens) {\r\n    if (ratesMap[token.symbol]) {\r\n      result[token.symbol] = ratesMap[token.symbol].quote.USD.price\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n","import { Balance, CoinType, HDWallet } from 'zeropool-api-js'\r\n\r\nimport { Token, TokenSymbol } from 'shared/models'\r\nimport { notImplemented } from 'shared/util/not-implemented'\r\n\r\nimport { Wallet } from 'wallet/state/models'\r\nimport { walletsHelper } from 'wallet/state/helpers/wallets.helper'\r\n\r\nexport const initBalances = (\r\n  hdWallet: HDWallet,\r\n  balances: Record<TokenSymbol, Balance[]>,\r\n  tokens: Token[],\r\n  account = 0,\r\n): Record<TokenSymbol, Wallet[]> => {\r\n  const wallets: Record<TokenSymbol, Wallet[]> = {}\r\n\r\n  for (const token of tokens) {\r\n    const tokenId = token.symbol\r\n    const coin = hdWallet?.getCoin(token.name as CoinType)\r\n    wallets[tokenId] = []\r\n\r\n    wallets[tokenId].push({\r\n      account,\r\n      address: '',\r\n      id: 0,\r\n      amount: 0,\r\n      name: 'Private',\r\n      token,\r\n    })\r\n\r\n    for (const [balanceDataIndex, balanceData] of Object.entries(balances[token.name])) {\r\n      let amount\r\n      const id = +balanceDataIndex + 1\r\n\r\n      try {\r\n        amount = coin\r\n          ? +coin.fromBaseUnit((balanceData as Balance).balance)\r\n          : +(balanceData as Balance).balance\r\n      } catch (err) {\r\n        if (notImplemented(err)) {\r\n          amount = 0\r\n        } else {\r\n          throw Error(err.message)\r\n        }\r\n      }\r\n\r\n      wallets[tokenId].push({\r\n        account,\r\n        address: (balanceData as Balance).address,\r\n        id,\r\n        amount,\r\n        name: `Wallet ${id < 10 ? '0' + id : id}`,\r\n        token,\r\n      })\r\n    }\r\n\r\n    wallets[tokenId] = walletsHelper.reduceWallets(wallets[tokenId])\r\n  }\r\n\r\n  return wallets\r\n}\r\n","import { CoinType, HDWallet } from 'zeropool-api-js'\r\nimport { from, Observable } from 'rxjs'\r\nimport { map } from 'rxjs/operators'\r\n\r\nimport { nearBug } from 'shared/util/near-bug'\r\nimport { notImplemented } from 'shared/util/not-implemented'\r\nimport { Token, TokenSymbol } from 'shared/models/token'\r\n\r\nimport { Wallet } from 'wallet/state/models'\r\n\r\nexport const updateBalances = (\r\n  hdWallet: HDWallet,\r\n  wallets: Record<TokenSymbol, Wallet[]>,\r\n  tokens: Token[],\r\n): Observable<Record<string, Wallet[]>> => {\r\n  const promices: Promise<string[]>[] = []\r\n  const result: Record<string, Wallet[]> = {}\r\n\r\n  tokens.forEach((token) => {\r\n    const tokenWallets = wallets[token.symbol]\r\n    const walletPromises: Promise<string>[] = []\r\n    const coin = hdWallet?.getCoin(token.name as CoinType)\r\n\r\n    if (!coin) {\r\n      throw Error(`Can not access ${token.name} data!`)\r\n    }\r\n\r\n    tokenWallets.forEach((wallet) => {\r\n      if (wallet.id !== 0) {\r\n        walletPromises.push(\r\n          coin\r\n            .getBalance(wallet.id - 1)\r\n            .catch((err) => {\r\n              // Near Fix\r\n              if (nearBug(err)) {\r\n                return '0'\r\n              }\r\n\r\n              throw Error(err)\r\n            })\r\n            .then((balance) => {\r\n              try {\r\n                return coin.fromBaseUnit(balance)\r\n              } catch (err) {\r\n                // Waves Fix\r\n                if (notImplemented(err)) {\r\n                  return '0'\r\n                }\r\n                throw Error(err?.message)\r\n              }\r\n            }),\r\n        )\r\n      }\r\n    })\r\n\r\n    promices.push(Promise.all(walletPromises))\r\n  })\r\n\r\n  return from(Promise.all(promices)).pipe(\r\n    map((balances) => {\r\n      tokens.forEach((token, tokenIndex) => {\r\n        result[token.symbol] = wallets[token.symbol].map((wallet, walletIndex) => {\r\n\r\n          return {\r\n            ...wallet,\r\n            amount: walletIndex ? +balances[tokenIndex][walletIndex - 1] : wallet.amount,\r\n          }\r\n        })\r\n      })\r\n\r\n      return result\r\n    }),\r\n  )\r\n}\r\n","export const nearBug = (err: Error) =>\r\n  typeof err?.message === 'string' && err.message.includes('[-32000]')\r\n","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport { loadingBarActions } from 'shared/loading-bar/state/loading-bar.actions'\r\n\r\nexport interface LoadingBarState {\r\n  requestsInProgress: number\r\n}\r\n\r\nexport const initialState: LoadingBarState = {\r\n  requestsInProgress: 0,\r\n}\r\n\r\nexport const loadingBarReducer = createReducer<\r\n  LoadingBarState,\r\n  ActionType<typeof loadingBarActions>\r\n>(initialState)\r\n  .handleAction(\r\n    loadingBarActions.addRequest,\r\n    (state): LoadingBarState => ({\r\n      requestsInProgress: state.requestsInProgress + 1,\r\n    }),\r\n  )\r\n  .handleAction(\r\n    loadingBarActions.removeRequest,\r\n    (state): LoadingBarState => ({\r\n      requestsInProgress: state.requestsInProgress - 1,\r\n    }),\r\n  )\r\n","export default __webpack_public_path__ + \"static/media/logo1.00704935.svg\";","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './SeedTag.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { shuffleString } from 'shared/util/shuffle'\r\n\r\nexport const componentId = 'SeedTag'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface SeedTagProps {\r\n  text: string\r\n  num: number\r\n  hidden?: boolean\r\n  hideNumber?: boolean\r\n  onClick?: (num: number) => void\r\n}\r\n\r\nexport const SeedTag: React.FC<SeedTagProps> = ({ text, num, hidden, hideNumber, onClick }) => {\r\n  const clickHandler = () => (onClick && !hidden ? onClick(num) : null)\r\n\r\n  return (\r\n    <div className={css({ Placeholder: hidden })} data-testid={test()} onClick={clickHandler}>\r\n      {hidden || hideNumber ? null : <div className={css('Number')}>{num + 1}</div>}\r\n\r\n      <div className={css('Text')}>{hidden ? shuffleString(text) : text}</div>\r\n    </div>\r\n  )\r\n}\r\n","export const shuffleString = (str: string): string =>\r\n  str\r\n    .split('')\r\n    .sort(() => 0.5 - Math.random())\r\n    .join('')\r\n\r\nexport const shuffleArray = (arr: string[]): string[] => arr.sort(() => 0.5 - Math.random())\r\n","import { cn } from '@bem-react/classname'\r\nimport { Paper } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport './SeedPanel.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { shuffleArray } from 'shared/util/shuffle'\r\n\r\nimport { SeedTag } from 'register/components/SeedTag/SeedTag'\r\n\r\nexport const componentId = 'SeedPanel'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface SeedPanelProps {\r\n  classes?: string[]\r\n  seed: string[]\r\n  check?: boolean\r\n  onCheck?: (checked: boolean) => void\r\n}\r\n\r\nexport const SeedPanel: React.FC<SeedPanelProps> = ({ classes = [], seed, check, onCheck }) => {\r\n  const [confirmedSeed, setConfirmedSeed] = useState([] as string[])\r\n  const [success, setSuccess] = useState(false)\r\n  const [shuffledSeed, setShuffledSeed] = useState([] as string[])\r\n\r\n  useEffect(() => {\r\n    if (!shuffledSeed.length && check) {\r\n      setShuffledSeed(shuffleArray([...seed]))\r\n    }\r\n  }, [shuffledSeed.length, check, seed])\r\n\r\n  useEffect(() => {\r\n    const same = JSON.stringify(seed) === JSON.stringify(confirmedSeed)\r\n    setSuccess(same)\r\n    if (onCheck) {\r\n      onCheck(same)\r\n    }\r\n  }, [success, confirmedSeed, seed, onCheck])\r\n\r\n  const bodyTagClickHandler = (index: number) => {\r\n    confirmedSeed.splice(index, 1)\r\n    setConfirmedSeed([...confirmedSeed])\r\n    setSuccess(false)\r\n  }\r\n  const footerTagClickHandler = (index: number) => {\r\n    setConfirmedSeed([...confirmedSeed, seed[index]])\r\n  }\r\n\r\n  return (\r\n    <Paper className={css('', classes)} data-testid={test()}>\r\n      <div className={css('Body')} data-testid={test('Body')}>\r\n        {check\r\n          ? confirmedSeed.map((tag: string, index: number) => (\r\n              <SeedTag text={tag} num={index} key={index} onClick={bodyTagClickHandler} />\r\n            ))\r\n          : seed.map((tag: string, index: number) => (\r\n              <SeedTag text={tag} num={index} key={index} />\r\n            ))}\r\n      </div>\r\n\r\n      <div className={css('Footer')} data-testid={test('Footer')}>\r\n        {check\r\n          ? shuffledSeed.map((tag: string, index: number) => (\r\n              <SeedTag\r\n                text={tag}\r\n                num={seed.findIndex((str) => str === tag)}\r\n                hidden={confirmedSeed.includes(tag)}\r\n                hideNumber={true}\r\n                key={seed.findIndex((str) => str === tag)}\r\n                onClick={footerTagClickHandler}\r\n              />\r\n            ))\r\n          : null}\r\n        {confirmedSeed.length === seed.length && !success ? (\r\n          <div className={css('Warning')} data-testid={test('Warning')}>\r\n            The phrases do not match!\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </Paper>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { Button } from '@material-ui/core'\r\n\r\nimport './StepOne.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\r\n\r\nexport const componentId = 'StepOne'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface StepOneProps {\r\n  onGenerate: () => void\r\n}\r\n\r\nexport const StepOne: React.FC<StepOneProps> = ({ onGenerate }) => {\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <section>\r\n        <SeedPanel classes={[css('SeedPanel')]} seed={[]} />\r\n\r\n        <p className={css('Description')}>\r\n          Your secret phrase consists of 12 words. Store it carefully. If you loose it, you will\r\n          loose access to all of your associated wallets!\r\n        </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button')}\r\n        data-testid={test('GenerateButton')}\r\n        onClick={onGenerate}\r\n        variant=\"contained\"\r\n      >\r\n        Generate a secret phrase\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { Button } from '@material-ui/core'\r\n\r\nimport './StepTwo.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\r\n\r\nexport const componentId = 'StepTwo'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\ninterface StepTwoProps {\r\n  seed: string[]\r\n  onSubmit: () => void\r\n}\r\n\r\nexport const StepTwo: React.FC<StepTwoProps> = ({ seed, onSubmit }) => {\r\n  return (\r\n    <div className={css()} data-testid=\"StepTwo\">\r\n      <section>\r\n        <SeedPanel classes={[css('SeedPanel')]} seed={seed} />\r\n\r\n        <p className={css('Description')}>\r\n          By submiting, you confirm that you have stored the secret phrase on paper or using another\r\n          safe method.\r\n        </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button')}\r\n        data-testid={test('SubmitButton')}\r\n        onClick={onSubmit}\r\n        variant=\"contained\"\r\n      >\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/guy_welcomes@2x.49f9ac60.png\";","import * as React from 'react'\r\nimport { Button } from '@material-ui/core'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './Welcome.scss'\r\nimport guy from 'assets/images/guy_welcomes@2x.png'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'Welcome'\r\nexport interface WelcomeProps {\r\n  // TODO: remove onMockedLogin after API is connected\r\n  onMockedLogin: () => void\r\n  onCreate: () => void\r\n  onImport: () => void\r\n  onAbout: () => void\r\n}\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport const Welcome: React.FC<WelcomeProps> = ({ onCreate, onImport, onAbout, onMockedLogin }) => {\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <section className=\"noselect\">\r\n        <img\r\n          src={guy}\r\n          className={css('Logo')}\r\n          data-testid={test('Logo')}\r\n          alt=\"logo\"\r\n          onClick={onMockedLogin}\r\n        />\r\n\r\n        <h1 className={css('Greeting')} data-testid={test('Greeting')}>\r\n          Welcome to ZeroPool\r\n        </h1>\r\n\r\n        <p className={css('Description')} data-testid={test('Description')}>\r\n          Please create a new wallet or import an existing one using a secret phrase\r\n        </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        className={css('Button')}\r\n        data-testid={test('CreateButton')}\r\n        disableElevation={true}\r\n        onClick={onCreate}\r\n      >\r\n        Create new wallet\r\n      </Button>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        className={css('Button')}\r\n        data-testid={test('ImportButton')}\r\n        onClick={onImport}\r\n      >\r\n        Import existing\r\n      </Button>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"outlined\"\r\n        className={css('Button')}\r\n        data-testid={test('AboutButton')}\r\n        onClick={onAbout}\r\n      >\r\n        About zeropool\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { useForm } from 'react-hook-form'\r\nimport { DevTool } from '@hookform/devtools'\r\n\r\nimport './StepFour.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  FormHelperText,\r\n  IconButton,\r\n  Input,\r\n  InputAdornment,\r\n  InputLabel,\r\n} from '@material-ui/core'\r\nimport { Close, Visibility, VisibilityOff } from '@material-ui/icons'\r\nexport const componentId = 'StepFour'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nconst PasswordInputParams = {\r\n  required: 'Required',\r\n  pattern: {\r\n    value: /^(?=.*?\\d)(?=.*?[a-zA-Z])[a-zA-Z\\d]+$/,\r\n    message: 'Use letters and numbers',\r\n  },\r\n  minLength: {\r\n    value: 8,\r\n    message: 'Use at least 8 characters',\r\n  },\r\n}\r\n\r\ninterface FormData {\r\n  password: string\r\n  confirm: string\r\n}\r\n\r\nexport interface StepFourProps {\r\n  onRegister: (data: { password: string }) => void\r\n}\r\n\r\nexport const StepFour: React.FC<StepFourProps> = ({ onRegister }) => {\r\n  const { handleSubmit, register, reset, control, errors } = useForm<FormData>({\r\n    criteriaMode: 'all',\r\n  })\r\n\r\n  const [showPassword, setShowPassword] = useState(false)\r\n  const [password, setPassword] = useState('')\r\n  const [passwordConfirm, setPasswordConfirm] = useState('')\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {process.env.NODE_ENV !== 'production' && <DevTool control={control} />}\r\n\r\n      <form onSubmit={handleSubmit(onRegister)} className={css('Form')}>\r\n        <FormControl className={css('FormControl')} error={!!errors.password}>\r\n          <InputLabel className={css('FormControlLabel')} htmlFor=\"password\">\r\n            Password\r\n          </InputLabel>\r\n\r\n          <Input\r\n            id=\"password\"\r\n            color=\"secondary\"\r\n            className={css('Password')}\r\n            inputProps={{ 'data-testid': test('Password') }}\r\n            inputRef={register(PasswordInputParams)}\r\n            name=\"password\"\r\n            onChange={() => setPassword(control.getValues().password)}\r\n            type={showPassword ? 'text' : 'password'}\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                {password ? (\r\n                  <IconButton\r\n                    className={css('FormControlButton')}\r\n                    aria-label=\"empty password\"\r\n                    onClick={() => {\r\n                      reset({\r\n                        password: undefined,\r\n                        confirm: control.getValues().confirm,\r\n                      })\r\n                      setPassword('')\r\n                    }}\r\n                    onMouseDown={(event) => event.preventDefault()}\r\n                  >\r\n                    <Close />\r\n                  </IconButton>\r\n                ) : null}\r\n\r\n                <IconButton\r\n                  className={css('FormControlButton')}\r\n                  aria-label=\"toggle visibility\"\r\n                  onClick={() => setShowPassword(!showPassword)}\r\n                  onMouseDown={(event) => event.preventDefault()}\r\n                >\r\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n\r\n          {errors.password ? (\r\n            <FormHelperText data-testid={test('PasswordError')}>\r\n              {errors.password.message}\r\n            </FormHelperText>\r\n          ) : null}\r\n        </FormControl>\r\n\r\n        <FormControl className={css('FormControl')} error={!!errors.confirm}>\r\n          <InputLabel className={css('FormControlLabel')} htmlFor=\"confirm\">\r\n            Confirm password\r\n          </InputLabel>\r\n\r\n          <Input\r\n            id=\"confirm\"\r\n            color=\"secondary\"\r\n            className={css('Password')}\r\n            inputProps={{ 'data-testid': test('Confirm') }}\r\n            inputRef={register({\r\n              validate: (value) => value === control.getValues().password,\r\n            })}\r\n            name=\"confirm\"\r\n            onChange={() => setPasswordConfirm(control.getValues().confirm)}\r\n            type={showPassword ? 'text' : 'password'}\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                {passwordConfirm ? (\r\n                  <IconButton\r\n                    className={css('FormControlButton')}\r\n                    aria-label=\"empty confirmation\"\r\n                    onClick={() => {\r\n                      reset({\r\n                        password: control.getValues().password,\r\n                        confirm: undefined,\r\n                      })\r\n                      setPasswordConfirm('')\r\n                    }}\r\n                    onMouseDown={(event) => event.preventDefault()}\r\n                  >\r\n                    <Close />\r\n                  </IconButton>\r\n                ) : null}\r\n\r\n                <IconButton\r\n                  className={css('FormControlButton')}\r\n                  aria-label=\"toggle visibility\"\r\n                  onClick={() => setShowPassword(!showPassword)}\r\n                  onMouseDown={(event) => event.preventDefault()}\r\n                >\r\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n\r\n          {errors.confirm ? (\r\n            <FormHelperText data-testid={test('PasswordConfirmError')}>\r\n              Passwords do not match\r\n            </FormHelperText>\r\n          ) : null}\r\n        </FormControl>\r\n\r\n        <p className={css('Description')}>\r\n          Finally, please choose a password to be used to export your secret phrase in the future.\r\n        </p>\r\n\r\n        <Button\r\n          color=\"primary\"\r\n          className={css('Button')}\r\n          data-testid={test('Submit')}\r\n          disableElevation={true}\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n        >\r\n          Register\r\n        </Button>\r\n\r\n        {/* TODO: remove after testing */}\r\n        <Button\r\n          color=\"primary\"\r\n          className={css('Button')}\r\n          disableElevation={true}\r\n          onClick={() => {\r\n            reset({ password: 'test1234', confirm: 'test1234' })\r\n            handleSubmit(onRegister)\r\n          }}\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n        >\r\n          Testing: use 'test1234'\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { Button } from '@material-ui/core'\r\n\r\nimport './StepThree.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\r\n\r\nexport const componentId = 'StepThree'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface StepThreeProps {\r\n  seed: string[]\r\n  onConfirm: () => void\r\n}\r\nexport const StepThree: React.FC<StepThreeProps> = ({ seed, onConfirm }) => {\r\n  const [buttonDisabled, setButtonDisabled] = useState(true)\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <section>\r\n        <SeedPanel\r\n          classes={[css('SeedPanel')]}\r\n          seed={seed}\r\n          check={true}\r\n          onCheck={(success: boolean) => setButtonDisabled(!success)}\r\n        />\r\n\r\n        <p className={css('Description')}>\r\n          Please confirm your secret phrase. We want to be sure that you saved it correctly.\r\n        </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button', { Disabled: buttonDisabled })}\r\n        data-testid={test('ConfirmButton')}\r\n        disabled={buttonDisabled}\r\n        onClick={onConfirm}\r\n        variant=\"contained\"\r\n      >\r\n        Confirm\r\n      </Button>\r\n\r\n      {/* TODO: remove after testing */}\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button')}\r\n        disableElevation={true}\r\n        onClick={onConfirm}\r\n        variant=\"contained\"\r\n      >\r\n        Testing: force confirm\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './Perl.scss'\r\n\r\nexport const componentId = 'Perl'\r\n\r\nconst css = cn(componentId)\r\n\r\nexport type PerlProps = {\r\n  classes?: string[]\r\n  num: number\r\n  isActive: boolean\r\n}\r\n\r\nexport const Perl: React.FC<PerlProps> = ({ classes = [], num, isActive }) => {\r\n  return (\r\n    <div className={css({ Active: isActive }, classes)}>\r\n      <div className={css('Number')}>{num}</div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { ArrowBack } from '@material-ui/icons'\r\nimport { Button, MobileStepper, Tooltip } from '@material-ui/core'\r\n\r\nimport './StepHeader.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { Perl } from 'register/components/Perl/Perl'\r\n\r\nexport const componentId = 'StepHeader'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type StepHeaderProps = {\r\n  step: number\r\n  total: number\r\n  onBack: () => void\r\n}\r\n\r\nexport const StepHeader: React.FC<StepHeaderProps> = ({ step, total, onBack }) => {\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <Tooltip title=\"Step back\" placement=\"top-end\">\r\n        <Button\r\n          className={css('Button')}\r\n          data-testid={test('BackButton')}\r\n          onClick={onBack}\r\n          disableRipple={true}\r\n        >\r\n          <ArrowBack className={css('Icon')} />\r\n        </Button>\r\n      </Tooltip>\r\n\r\n      <div className={css('Perls')} data-testid={test('Perls')}>\r\n        {[1, 2, 3, 4].map((value) => (\r\n          <Perl\r\n            classes={[css('Perl', { Active: value === step })]}\r\n            isActive={value === step}\r\n            key={value}\r\n            num={value}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <MobileStepper\r\n        className={css('Progress')}\r\n        variant=\"progress\"\r\n        steps={total + 1}\r\n        position=\"static\"\r\n        activeStep={step - 1}\r\n        backButton={<span className=\"hidden\">back</span>}\r\n        nextButton={<span className=\"hidden\">next</span>}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { cn } from '@bem-react/classname'\r\nimport { DevTool } from '@hookform/devtools'\r\nimport { useForm } from 'react-hook-form'\r\nimport React, { useState } from 'react'\r\nimport { Close, Visibility, VisibilityOff } from '@material-ui/icons'\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  FormHelperText,\r\n  IconButton,\r\n  Input,\r\n  InputAdornment,\r\n  InputLabel,\r\n} from '@material-ui/core'\r\n\r\nimport './ImportAccount.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\r\nimport { validateSeed } from 'register/state/helpers/seed.helper'\r\n\r\nexport const componentId = 'ImportAccount'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nconst PasswordInputParams = {\r\n  required: 'Required',\r\n  pattern: {\r\n    value: /^(?=.*?\\d)(?=.*?[a-zA-Z])[a-zA-Z\\d]+$/,\r\n    message: 'Use letters and numbers',\r\n  },\r\n  minLength: {\r\n    value: 8,\r\n    message: 'Use at least 8 characters',\r\n  },\r\n}\r\n\r\nconst seedInputParamsFactory = (seed: string[]): any => ({\r\n  required: 'Required',\r\n  validate: (value: string[]) => validateSeed(seed),\r\n})\r\n\r\ninterface FormData {\r\n  seed: string\r\n  password: string\r\n  confirm: string\r\n}\r\n\r\nexport interface ImportAccountProps {\r\n  onBack: () => void\r\n  onImport: (data: { seed: string[]; password: string }) => void\r\n}\r\n\r\nexport const ImportAccount: React.FC<ImportAccountProps> = ({ onBack, onImport }) => {\r\n  const { handleSubmit, register, reset, control, errors } = useForm<FormData>({\r\n    criteriaMode: 'all',\r\n  })\r\n\r\n  const [seed, setSeed] = useState([] as string[])\r\n  const [showPassword, setShowPassword] = useState(false)\r\n  const [password, setPassword] = useState('')\r\n  const [passwordConfirm, setPasswordConfirm] = useState('')\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {process.env.NODE_ENV !== 'production' && <DevTool control={control} />}\r\n      <section>\r\n        <SeedPanel classes={[css('SeedPanel')]} seed={seed} />\r\n\r\n        <form\r\n          onSubmit={handleSubmit((data: FormData) => onImport({ password: data.password, seed }))}\r\n          className={css('Form')}\r\n        >\r\n          <FormControl className={css('FormControl')} error={!!errors.seed}>\r\n            <InputLabel color=\"secondary\" className={css('FormControlLabel')} htmlFor=\"seed\">\r\n              Secret phrase\r\n            </InputLabel>\r\n\r\n            <Input\r\n              id=\"seed\"\r\n              className={css('Seed')}\r\n              color=\"secondary\"\r\n              inputProps={{ 'data-testid': test('Seed') }}\r\n              inputRef={register(seedInputParamsFactory(seed)) as any}\r\n              name=\"seed\"\r\n              onChange={() =>\r\n                setSeed(\r\n                  control\r\n                    .getValues()\r\n                    .seed.split(/[ ,.]+/)\r\n                    .filter((str) => !!str),\r\n                )\r\n              }\r\n              type={'text'}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  {seed.length ? (\r\n                    <IconButton\r\n                      className={css('FormControlButton')}\r\n                      aria-label=\"empty seed\"\r\n                      onClick={() => {\r\n                        reset({\r\n                          seed: undefined,\r\n                          password: control.getValues().password,\r\n                          confirm: control.getValues().confirm,\r\n                        })\r\n                        setSeed([])\r\n                      }}\r\n                      onMouseDown={(event) => event.preventDefault()}\r\n                    >\r\n                      <Close />\r\n                    </IconButton>\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n                </InputAdornment>\r\n              }\r\n            />\r\n\r\n            {errors.seed ? (\r\n              <FormHelperText data-testid={test('SeedError')}>\r\n                {errors.seed.message || 'Input 12 uniq words divided with comas or spaces'}\r\n              </FormHelperText>\r\n            ) : null}\r\n          </FormControl>\r\n\r\n          <FormControl className={css('FormControl')} error={!!errors.password}>\r\n            <InputLabel className={css('FormControlLabel')} htmlFor=\"password\">\r\n              Password\r\n            </InputLabel>\r\n\r\n            <Input\r\n              id=\"password\"\r\n              className={css('Password')}\r\n              color=\"secondary\"\r\n              classes={{ input: css('PasswordInput') }}\r\n              inputProps={{ 'data-testid': test('Password') }}\r\n              inputRef={register(PasswordInputParams)}\r\n              name=\"password\"\r\n              onChange={() => setPassword(control.getValues().password)}\r\n              type={showPassword ? 'text' : 'password'}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  {password ? (\r\n                    <IconButton\r\n                      className={css('FormControlButton')}\r\n                      aria-label=\"empty password\"\r\n                      onClick={() => {\r\n                        reset({\r\n                          seed: control.getValues().seed,\r\n                          password: undefined,\r\n                          confirm: control.getValues().confirm,\r\n                        })\r\n                        setPassword('')\r\n                      }}\r\n                      onMouseDown={(event) => event.preventDefault()}\r\n                    >\r\n                      <Close />\r\n                    </IconButton>\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n\r\n                  <IconButton\r\n                    className={css('FormControlButton')}\r\n                    aria-label=\"toggle visibility\"\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                    onMouseDown={(event) => event.preventDefault()}\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            />\r\n\r\n            {errors.password ? (\r\n              <FormHelperText data-testid={test('PasswordError')}>\r\n                {errors.password.message}\r\n              </FormHelperText>\r\n            ) : null}\r\n          </FormControl>\r\n\r\n          <FormControl className={css('FormControl')} error={!!errors.confirm}>\r\n            <InputLabel className={css('FormControlLabel')} htmlFor=\"confirm\">\r\n              Confirm password\r\n            </InputLabel>\r\n\r\n            <Input\r\n              id=\"confirm\"\r\n              className={css('Password')}\r\n              color=\"secondary\"\r\n              classes={{ input: css('PasswordInput') }}\r\n              inputProps={{ 'data-testid': test('Confirm') }}\r\n              inputRef={register({\r\n                validate: (value) => value === control.getValues().password,\r\n              })}\r\n              name=\"confirm\"\r\n              onChange={() => setPasswordConfirm(control.getValues().confirm)}\r\n              type={showPassword ? 'text' : 'password'}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  {passwordConfirm ? (\r\n                    <IconButton\r\n                      className={css('FormControlButton')}\r\n                      aria-label=\"empty confirmation\"\r\n                      onClick={() => {\r\n                        reset({\r\n                          seed: control.getValues().seed,\r\n                          password: control.getValues().password,\r\n                          confirm: undefined,\r\n                        })\r\n                        setPasswordConfirm('')\r\n                      }}\r\n                      onMouseDown={(event) => event.preventDefault()}\r\n                    >\r\n                      <Close />\r\n                    </IconButton>\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n\r\n                  <IconButton\r\n                    className={css('FormControlButton')}\r\n                    aria-label=\"toggle visibility\"\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                    onMouseDown={(event) => event.preventDefault()}\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            />\r\n\r\n            {errors.confirm ? (\r\n              <FormHelperText data-testid={test('PasswordConfirmError')}>\r\n                Passwords do not match\r\n              </FormHelperText>\r\n            ) : null}\r\n          </FormControl>\r\n\r\n          <Button\r\n            color=\"primary\"\r\n            className={css('Button')}\r\n            data-testid={test('Import')}\r\n            disableElevation={true}\r\n            variant=\"contained\"\r\n            type=\"submit\"\r\n          >\r\n            Import\r\n          </Button>\r\n\r\n          <Button\r\n            color=\"primary\"\r\n            className={css('Button')}\r\n            data-testid={test('Back')}\r\n            disableElevation={true}\r\n            onClick={onBack}\r\n            variant=\"outlined\"\r\n          >\r\n            Back\r\n          </Button>\r\n        </form>\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { push } from 'connected-react-router'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport logo from 'assets/images/logo1.svg'\r\n\r\nimport './CreateAccountPage.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { StepOne } from 'register/components/StepOne/StepOne'\r\nimport { StepTwo } from 'register/components/StepTwo/StepTwo'\r\nimport { Welcome } from 'register/components/Welcome/Welcome'\r\nimport { StepFour } from 'register/components/StepFour/StepFour'\r\nimport { StepThree } from 'register/components/StepThree/StepThree'\r\nimport { StepHeader } from 'register/components/StepHeader/StepHeader'\r\nimport { ImportAccount } from 'register/components/ImportAccount/ImportAccount'\r\nimport { RegisterStage } from 'register/state/models/register-stage'\r\nimport { registerActions as actions } from 'register/state/register.actions'\r\nimport { getRegisterSeed, getRegisterStage, getShowSteps } from 'register/state/register.selectors'\r\n\r\nexport const componentId = 'CreateAccountPage'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\ntype CreateAccountProps = {}\r\n\r\nexport const CreateAccountPage: React.FC<CreateAccountProps> = () => {\r\n  const seed = useSelector(getRegisterSeed)\r\n  const stage = useSelector(getRegisterStage)\r\n  const showSteps = useSelector(getShowSteps)\r\n  const dispatch = useDispatch()\r\n\r\n  const components = () => {\r\n    switch (stage) {\r\n      case RegisterStage.STEP1:\r\n        return <StepOne onGenerate={() => dispatch(actions.generateSeed())} />\r\n      case RegisterStage.STEP2:\r\n        return <StepTwo seed={seed} onSubmit={() => dispatch(actions.submitSeed())} />\r\n      case RegisterStage.STEP3:\r\n        return <StepThree seed={seed} onConfirm={() => dispatch(actions.confirmSeed())} />\r\n      case RegisterStage.STEP4:\r\n        return <StepFour onRegister={(data) => dispatch(actions.register(data.password))} />\r\n      case RegisterStage.IMPORT:\r\n        return (\r\n          <ImportAccount\r\n            onImport={(data) => dispatch(actions.importAccount(data))}\r\n            onBack={() => dispatch(actions.stepBack())}\r\n          />\r\n        )\r\n      default:\r\n        return (\r\n          <Welcome\r\n            // TODO: remove next line after API is connected\r\n            onMockedLogin={() => dispatch(push('/wallet'))}\r\n            onCreate={() => dispatch(actions.startRegisterAccount())}\r\n            onImport={() => dispatch(actions.startImportAccount())}\r\n            onAbout={() => dispatch(push('/about'))}\r\n          />\r\n        )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {stage && showSteps ? (\r\n        <StepHeader step={stage} total={4} onBack={() => dispatch(actions.stepBack())} />\r\n      ) : null}\r\n\r\n      {components()}\r\n\r\n      {stage && showSteps ? (\r\n        <div className={css('Footer')}>\r\n          <img src={logo} alt=\"ZeroPool\" style={{ margin: 'auto' }} />\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './HelpPage.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'HelpPage'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type HelpPageProps = {}\r\n\r\nexport const HelpPage: React.FC<HelpPageProps> = () => {\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <h2> Wallet is in test mode. How to start:</h2>\r\n\r\n      <p>\r\n        We use Kovan test network to emulate operations with Ethereum and standard Near's test\r\n        network for the Near. Operations with Waves are not yet implemented.\r\n      </p>\r\n\r\n      <h3>Ethereum</h3>\r\n\r\n      <p>\r\n        To try it out you can install Metamask, select Kovan network, get some free Eth from the\r\n        <a href=\"https://gitter.im/kovan-testnet/faucet#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {' '}\r\n          kovan faucet{' '}\r\n        </a>\r\n        and send it to one of your Zero Pool <b>Eth</b> Wallet's address.\r\n      </p>\r\n\r\n      <h3>Near</h3>\r\n\r\n      <p>\r\n        You can register\r\n        <a href=\"https://wallet.testnet.near.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {' '}\r\n          Near test wallet{' '}\r\n        </a>\r\n        and send tokens recieved upon registration to one of your Zero Pool <b>Near</b> Wallet's\r\n        address and back.\r\n      </p>\r\n\r\n      <h3>Waves</h3>\r\n\r\n      <p>Operations with Waves are on final stage of implementation.</p>\r\n    </div>\r\n  )\r\n}\r\n","import { capFirstLetter } from './cap-first-letter'\r\n\r\nexport const cssMod = (value: string) => ({ [capFirstLetter(value)]: true })\r\n","export const capFirstLetter = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1)\r\n","import React, { HTMLAttributes } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './RoundButton.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { IconButton } from '@material-ui/core'\r\nimport { cssMod } from 'shared/util/css-mod'\r\n\r\nexport const componentId = 'RoundButton'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface RoundButtonProps extends HTMLAttributes<HTMLElement> {\r\n  label?: string\r\n  labelPosition?: 'top' | 'bottom' | 'left' | 'right'\r\n}\r\n\r\nexport const RoundButton: React.FC<RoundButtonProps> = ({\r\n  label,\r\n  labelPosition = 'bottom',\r\n  ...props\r\n}) => (\r\n  <div className={css({ NoLabel: !label })} data-testid={test()}>\r\n    <IconButton\r\n      className={css('Button', {}, [props.className])}\r\n      data-testid={test('Button')}\r\n      disableRipple={true}\r\n      disableFocusRipple={true}\r\n      disableTouchRipple={true}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.children}\r\n    </IconButton>\r\n\r\n    <span\r\n      className={css('Label', { ...cssMod(labelPosition) }, ['noselect'])}\r\n      data-testid={test('Label')}\r\n    >\r\n      {label}\r\n    </span>\r\n  </div>\r\n)\r\n","import React, { forwardRef, HTMLAttributes, memo } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './Icon.scss'\r\n\r\nimport { IconOption } from 'shared/components/Icon/IconOption'\r\n\r\nexport const componentId = 'Icon'\r\n\r\nconst css = cn(componentId)\r\n\r\nexport interface IconProps extends HTMLAttributes<HTMLElement> {\r\n  icon: IconOption\r\n  spaceOn?: 'right' | 'left'\r\n}\r\n\r\nconst component = memo(\r\n  forwardRef<HTMLElement, IconProps>(({ icon, spaceOn, ...props }, ref) => (\r\n    <i\r\n      {...props}\r\n      className={css(\r\n        {\r\n          [icon]: true,\r\n          RightMargin: spaceOn === 'right',\r\n          LeftMargin: spaceOn === 'left',\r\n          Clickable: !!props.onClick,\r\n        },\r\n        [props.className],\r\n      )}\r\n      ref={ref}\r\n    />\r\n  )),\r\n)\r\n\r\ncomponent.displayName = componentId\r\n\r\nexport const Icon = component\r\n","export enum WalletHeaderMode {\r\n  Info = 'Info', // only text information about opened view\r\n  Balance = 'Balance', // label strind and balance string with tokens amount if it passed\r\n}\r\n","import { cn } from '@bem-react/classname'\r\nimport { IconButton } from '@material-ui/core'\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos'\r\nimport React, { HTMLAttributes } from 'react'\r\n\r\nimport './ExpandButton.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'ExpandButton'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface ExpendButtonProps extends HTMLAttributes<HTMLElement> {\r\n  expanded: boolean\r\n  click: () => void\r\n}\r\n\r\nexport const ExpandButton: React.FC<ExpendButtonProps> = ({ expanded, click, ...props }) => {\r\n  return (\r\n    <div\r\n      className={css({ Expended: expanded }, [props.className])}\r\n      data-testid={test()}\r\n      onClick={click}\r\n    >\r\n      <IconButton disableRipple={true} disableFocusRipple={true} disableTouchRipple={true}>\r\n        <ArrowForwardIosIcon />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n","import { cn } from '@bem-react/classname'\r\nimport { Tooltip } from '@material-ui/core'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport VerticalAlignTopIcon from '@material-ui/icons/VerticalAlignTop'\r\nimport VerticalAlignBottomIcon from '@material-ui/icons/VerticalAlignBottom'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport './WalletRow.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { RoundButton } from 'shared/components/RoundButton/RoundButton'\r\nimport { IconOption } from 'shared/components/Icon/IconOption'\r\nimport { Token } from 'shared/models/token'\r\nimport { Icon } from 'shared/components/Icon/Icon'\r\n\r\nimport { ExpandButton } from 'wallet/components/ExpandButton/ExpandButton'\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\n\r\nexport const componentId = 'WalletRow'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type WalletRowProps = {\r\n  rollUp: number\r\n  rate: number\r\n  token: Token\r\n  wallet: Wallet\r\n\r\n  onEditClick: (wallet: Wallet) => void\r\n  onReceiveClick: (wallet: Wallet) => void\r\n  onSendClick: (wallet: Wallet) => void\r\n  onRollUpClick: () => void\r\n  onWalletNameClick: (wallet: Wallet) => void\r\n}\r\n\r\nexport const WalletRow: React.FC<WalletRowProps> = ({\r\n  token,\r\n  wallet,\r\n  rate,\r\n  rollUp,\r\n  onReceiveClick,\r\n  onSendClick,\r\n  onEditClick,\r\n  onRollUpClick,\r\n  onWalletNameClick,\r\n}) => {\r\n  const [showButtons, setShowButtons] = useState(false)\r\n  const [toBeOpened, setToBeOpened] = useState(false)\r\n\r\n  const showButtonsHandler = () => {\r\n    if (showButtons) {\r\n      setShowButtons(false)\r\n    } else {\r\n      onRollUpClick()\r\n      setToBeOpened(true)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (toBeOpened) {\r\n      setToBeOpened(false)\r\n      setShowButtons(true)\r\n    } else {\r\n      setShowButtons(false)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [wallet.name, rollUp])\r\n\r\n  return (\r\n    <div className={css({ Expanded: showButtons }, ['noselect'])} data-testid={test()}>\r\n      <div className={css('Main')}>\r\n        <Icon className={css('Icon')} icon={wallet.token.symbol as IconOption} />\r\n\r\n        <div className={css('Values')}>\r\n          <Tooltip title={'View transactions'} placement=\"bottom\">\r\n            <div\r\n              className={css('WalletName', { Private: !wallet.address }, ['noselect'])}\r\n              onClick={() => onWalletNameClick(wallet)}\r\n            >\r\n              {wallet.name}\r\n            </div>\r\n          </Tooltip>\r\n\r\n          <div className={css('WalletAmount')}>\r\n            {wallet.amount} {token.symbol} ({(rate * wallet.amount).toFixed(2)} $)\r\n          </div>\r\n        </div>\r\n\r\n        <ExpandButton\r\n          className={css('Expander', { Private: !wallet.address })}\r\n          expanded={showButtons}\r\n          click={showButtonsHandler}\r\n        />\r\n      </div>\r\n\r\n      <div className={css('Buttons', { Hidden: !showButtons })}>\r\n        <RoundButton\r\n          className={css('Button', { Private: !wallet.address })}\r\n          label={'Send'}\r\n          onClick={() => onSendClick(wallet)}\r\n        >\r\n          <VerticalAlignTopIcon />\r\n        </RoundButton>\r\n\r\n        <RoundButton\r\n          className={css('Button', { Private: !wallet.address })}\r\n          label={'Receive'}\r\n          onClick={() => onReceiveClick(wallet)}\r\n        >\r\n          <VerticalAlignBottomIcon />\r\n        </RoundButton>\r\n\r\n        {!!wallet.address ? (\r\n          <RoundButton\r\n            className={css('Button', { Private: !wallet.address })}\r\n            label={'Edit'}\r\n            onClick={() => onEditClick(wallet)}\r\n          >\r\n            <SettingsIcon />\r\n          </RoundButton>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { Button, TextField } from '@material-ui/core'\r\n\r\nimport './EditWallet.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'EditWallet'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type EditWalletProps = {\r\n  onRename: (name: string) => void\r\n  onDelete: () => void\r\n  onCancel: () => void\r\n  walletName: string\r\n}\r\n\r\nexport const EditWallet: React.FC<EditWalletProps> = ({\r\n  walletName,\r\n  onRename,\r\n  onDelete,\r\n  onCancel,\r\n}) => {\r\n  const [newName, setNewName] = useState('')\r\n  const minNameLength = 3\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <p className={css('Name')}> {walletName} </p>\r\n\r\n      <TextField\r\n        className={css('NewName')}\r\n        label={`New name (min. ${minNameLength} symbols)`}\r\n        value={newName}\r\n        onChange={(event) => {\r\n          setNewName(event.target.value)\r\n        }}\r\n      />\r\n\r\n      <Button\r\n        disabled={newName.length < minNameLength}\r\n        className={css('Rename')}\r\n        data-testid={test('Rename')}\r\n        onClick={() => onRename(newName)}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n      >\r\n        Rename\r\n      </Button>\r\n\r\n      <Button\r\n        className={css('Delete')}\r\n        data-testid={test('Delete')}\r\n        onClick={onDelete}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n      >\r\n        Delete\r\n      </Button>\r\n\r\n      <Button\r\n        className={css('Cancel')}\r\n        data-testid={test('Cancel')}\r\n        onClick={onCancel}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Button, TextField } from '@material-ui/core'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './DeleteWallet.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'DeleteWallet'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type DeleteWalletProps = {\r\n  onDelete: () => void\r\n  onCancel: () => void\r\n  walletName: string\r\n}\r\n\r\nexport const DeleteWallet: React.FC<DeleteWalletProps> = ({ walletName, onCancel, onDelete }) => {\r\n  const [confirmName, setConfirmName] = useState('')\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <p className={css('Name')}> {walletName} </p>\r\n\r\n      <TextField\r\n        className={css('Confirm')}\r\n        label=\"Enter wallet name to confirm\"\r\n        value={confirmName}\r\n        onChange={(event) => {\r\n          setConfirmName(event.target.value)\r\n        }}\r\n      />\r\n\r\n      <Button\r\n        className={css('Delete')}\r\n        data-testid={test('Delete')}\r\n        disabled={confirmName !== walletName}\r\n        onClick={() => onDelete()}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n      >\r\n        Delete anyway\r\n      </Button>\r\n\r\n      <Button\r\n        className={css('Cancel')}\r\n        data-testid={test('Cancel')}\r\n        onClick={onCancel}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import { cn } from '@bem-react/classname'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport React, { useState } from 'react'\r\nimport { Dialog, DialogContent } from '@material-ui/core'\r\n\r\nimport './Wallets.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { RoundButton } from 'shared/components/RoundButton/RoundButton'\r\nimport { Token } from 'shared/models/token'\r\n\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\nimport { WalletRow } from 'wallet/components/WalletRow/WalletRow'\r\nimport { EditWallet } from 'wallet/components/EditWallet/EditWallet'\r\nimport { DeleteWallet } from 'wallet/components/DeleteWallet/DeleteWallet'\r\n\r\nexport const componentId = 'Wallets'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface WalletsHandlers {\r\n  onReceive: (wallet: Wallet) => void\r\n  onSend: (wallet: Wallet) => void\r\n  onDelete: (wallet: Wallet) => void\r\n  onRename: (wallet: Wallet, name: string) => void\r\n  onAdd: () => void\r\n  onOpen: (wallet: Wallet) => void\r\n}\r\nexport interface WalletsProps {\r\n  handlers: WalletsHandlers\r\n  rate: number\r\n  token: Token\r\n  wallets: Wallet[]\r\n  getPrivateAddress: (token: Token) => void\r\n}\r\n\r\nexport const Wallets: React.FC<WalletsProps> = ({\r\n  handlers,\r\n  wallets,\r\n  rate,\r\n  token,\r\n  getPrivateAddress,\r\n}) => {\r\n  const [rollUpSignal, setRollUpSignal] = useState(0)\r\n  const [openEditDialog, setOpenEditDialog] = useState(false)\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false)\r\n  const [selectedWallet, setSelectedWallet] = useState<Wallet | null>(null)\r\n\r\n  const handleWalletRename = (name: string) => {\r\n    if (selectedWallet) {\r\n      setOpenEditDialog(false)\r\n      handlers.onRename(selectedWallet, name)\r\n    } else {\r\n      throw new Error('No active wallet set!')\r\n    }\r\n  }\r\n\r\n  const handleWalletDelete = () => {\r\n    if (selectedWallet) {\r\n      setOpenDeleteDialog(false)\r\n      handlers.onDelete(selectedWallet)\r\n    } else {\r\n      throw new Error('No active wallet set!')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {wallets.map((wallet, index) => (\r\n        <WalletRow\r\n          rollUp={rollUpSignal}\r\n          wallet={wallet}\r\n          token={token}\r\n          rate={rate}\r\n          key={index}\r\n          onEditClick={(_wallet) => {\r\n            setSelectedWallet(_wallet)\r\n            setOpenEditDialog(true)\r\n          }}\r\n          onReceiveClick={handlers.onReceive}\r\n          onRollUpClick={() => setRollUpSignal(rollUpSignal + 1)}\r\n          onSendClick={handlers.onSend}\r\n          onWalletNameClick={handlers.onOpen}\r\n        />\r\n      ))}\r\n\r\n      <div className={css('Add')}>\r\n        <RoundButton label={'Add wallet'} onClick={handlers.onAdd}>\r\n          <AddIcon />\r\n        </RoundButton>\r\n      </div>\r\n\r\n      <Dialog\r\n        onClose={() => {\r\n          setOpenEditDialog(false)\r\n        }}\r\n        open={openEditDialog}\r\n        fullWidth={true}\r\n        maxWidth={'xs'}\r\n      >\r\n        <DialogContent dividers={true}>\r\n          <EditWallet\r\n            walletName={selectedWallet?.name || ''}\r\n            onRename={handleWalletRename}\r\n            onDelete={() => {\r\n              setOpenDeleteDialog(true)\r\n              setOpenEditDialog(false)\r\n            }}\r\n            onCancel={() => {\r\n              setOpenEditDialog(false)\r\n            }}\r\n          />\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        onClose={() => {\r\n          setOpenDeleteDialog(false)\r\n        }}\r\n        open={openDeleteDialog}\r\n        fullWidth={true}\r\n        maxWidth={'xs'}\r\n      >\r\n        <DialogContent dividers={true}>\r\n          <DeleteWallet\r\n            walletName={selectedWallet?.name || ''}\r\n            onDelete={handleWalletDelete}\r\n            onCancel={() => {\r\n              setOpenDeleteDialog(false)\r\n              setOpenEditDialog(true)\r\n            }}\r\n          />\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","import { Button, TextField, Tooltip } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './SendConfirmation.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\n\r\nexport const componentId = 'SendConfirmation'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type SendConfirmationProps = {\r\n  address: string\r\n  amount: number\r\n  fee: string\r\n  rate: number\r\n  wallet: Wallet\r\n  onConfirmClick: () => void\r\n}\r\n\r\nexport const SendConfirmation: React.FC<SendConfirmationProps> = ({\r\n  address,\r\n  amount,\r\n  fee,\r\n  rate,\r\n  wallet,\r\n  onConfirmClick,\r\n}) => {\r\n  const [processing, setProcessing] = useState(false)\r\n\r\n  const handleConfirm = () => {\r\n    onConfirmClick()\r\n    setProcessing(true)\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <div className={css('Title')}>Confirm transaction</div>\r\n\r\n      <form className={css('Inputs')} noValidate={true} autoComplete=\"off\">\r\n        <Tooltip title={wallet.name} placement=\"bottom\">\r\n          <TextField\r\n            className={css('From')}\r\n            id=\"from\"\r\n            label=\"From\"\r\n            value={wallet.name}\r\n            disabled={true}\r\n          />\r\n        </Tooltip>\r\n\r\n        <Tooltip title={address} placement=\"bottom\">\r\n          <TextField className={css('To')} id=\"to\" label=\"To\" value={address} disabled={true} />\r\n        </Tooltip>\r\n\r\n        <Tooltip title={amount} placement=\"bottom\">\r\n          <TextField\r\n            className={css('Amount')}\r\n            id=\"amount\"\r\n            label=\"Amount\"\r\n            value={`${amount} ${wallet.token.symbol}`}\r\n            disabled={true}\r\n          />\r\n        </Tooltip>\r\n\r\n        <TextField\r\n          className={css('Fee')}\r\n          id=\"fee\"\r\n          label=\"Network fee\"\r\n          value={\r\n            fee ? `${fee} ${wallet.token.symbol} (${Math.round(rate * +fee * 10000) / 10000} $)` : 0\r\n          }\r\n          disabled={true}\r\n        />\r\n      </form>\r\n\r\n      <div className={css('Confirm')}>\r\n        {processing ? (\r\n          <CircularProgress />\r\n        ) : (\r\n          <Button\r\n            className={css('ConfirmButton')}\r\n            data-testid={test('Confirm')}\r\n            onClick={handleConfirm}\r\n            color=\"primary\"\r\n            disabled={!fee}\r\n            disableElevation={true}\r\n            variant=\"contained\"\r\n          >\r\n            Confirm\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport NumberFormat from 'react-number-format'\r\nimport { ArrowBack } from '@material-ui/icons'\r\nimport { Tooltip, Button } from '@material-ui/core'\r\n\r\nimport './WalletHeader.scss'\r\n\r\nimport { useNavigateBack } from 'shared/hooks/use-navigate-back'\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { WalletHeaderMode } from 'wallet/components/WalletHeader/WalletHeaderMode'\r\n\r\nexport const componentId = 'WalletHeader'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type WalletHeaderProps = {\r\n  fiatValue?: number\r\n  hideBackButton?: boolean\r\n  label: string\r\n  mode: WalletHeaderMode\r\n  priv?: boolean\r\n  tokenAmount?: number\r\n  tokenName?: string\r\n  tokenSymbol?: string\r\n  tokenRate?: number\r\n\r\n  onBackClick: () => void\r\n}\r\n\r\nexport const WalletHeader: React.FC<WalletHeaderProps> = ({\r\n  mode,\r\n  tokenAmount,\r\n  tokenSymbol,\r\n  label,\r\n  fiatValue,\r\n  hideBackButton,\r\n  priv,\r\n  tokenName,\r\n  onBackClick,\r\n}) => {\r\n  useNavigateBack(onBackClick)\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {!hideBackButton ? (\r\n        <Tooltip title=\"Step back\" placement=\"bottom\">\r\n          <Button\r\n            className={css('BackButton')}\r\n            data-testid={test('BackButton')}\r\n            onClick={onBackClick}\r\n            disableRipple={true}\r\n          >\r\n            <ArrowBack className={css('Icon')} />\r\n          </Button>\r\n        </Tooltip>\r\n      ) : null}\r\n\r\n      <div className={css('Title', { Private: priv })}>\r\n        <span>{label}</span>\r\n      </div>\r\n\r\n      <div className={css('Amount')}>\r\n        {mode === WalletHeaderMode.Info ? null : (\r\n          <NumberFormat\r\n            className={css('FiatAmount')}\r\n            data-testid={test('FiatAmount')}\r\n            value={fiatValue}\r\n            displayType={'text'}\r\n            thousandSeparator={true}\r\n            suffix={' $'}\r\n            decimalScale={2}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <div className={css('Tokens')}>\r\n        {tokenAmount && tokenName ? `${tokenAmount} ${tokenSymbol}` : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useRef } from 'react'\r\n\r\n// Intercepts browser's Navigate Back event\r\nexport const useNavigateBack = (callback: () => void): void => {\r\n  const isInitialMount = useRef(true)\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false\r\n\r\n      window.addEventListener(\r\n        'popstate',\r\n        (event) => {\r\n          window.history.pushState(null, '', document.URL)\r\n          callback()\r\n        },\r\n        false,\r\n      )\r\n    } else {\r\n      // Fix browser history\r\n      window.history.pushState(null, '', document.URL)\r\n    }\r\n  }, [callback])\r\n}\r\n","import { TokenSymbol } from 'shared/models'\r\n\r\nexport const total = (\r\n  amounts: Record<TokenSymbol, number>,\r\n  rates: Record<TokenSymbol, number>,\r\n  filter?: TokenSymbol,\r\n): number => {\r\n  let t = 0\r\n\r\n  for (const symbol in amounts) {\r\n    if (amounts.hasOwnProperty(symbol) && rates.hasOwnProperty(symbol)) {\r\n      if (filter && filter !== symbol) {\r\n        continue\r\n      }\r\n\r\n      t += amounts[symbol] * rates[symbol]\r\n    }\r\n  }\r\n\r\n  return t\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nimport './TokenRow.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { IconOption } from 'shared/components/Icon/IconOption'\r\nimport { Token } from 'shared/models/token'\r\nimport { Icon } from 'shared/components/Icon/Icon'\r\n\r\nexport const componentId = 'TokenRow'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface TokenRowProps {\r\n  amount: number\r\n  onSelectToken: (token: Token) => void\r\n  rate: number\r\n  token: Token\r\n}\r\n\r\nexport const TokenRow: React.FC<TokenRowProps> = ({ amount = 0, token, rate, onSelectToken }) => {\r\n  return (\r\n    <div\r\n      className={css({}, ['noselect'])}\r\n      data-testid={test()}\r\n      onClick={() => onSelectToken(token)}\r\n    >\r\n      <div className={css('Rates')}>\r\n        <Icon icon={token.symbol as IconOption} />\r\n\r\n        <span className={css('Name')}>{token.name}</span>\r\n\r\n        <NumberFormat\r\n          className={css('Rate')}\r\n          data-testid={test('Rate')}\r\n          value={rate}\r\n          displayType={'text'}\r\n          thousandSeparator={true}\r\n          suffix={' $'}\r\n          decimalScale={2}\r\n        />\r\n      </div>\r\n\r\n      <div className={css('Amounts')}>\r\n        <NumberFormat\r\n          className={css('TokenAmount')}\r\n          data-testid={test('TokenAmount')}\r\n          value={amount}\r\n          displayType={'text'}\r\n          thousandSeparator={true}\r\n          suffix={' ' + token.symbol}\r\n          decimalScale={6}\r\n        />\r\n\r\n        <NumberFormat\r\n          className={css('FiatAmount')}\r\n          data-testid={test('FiatAmount')}\r\n          value={amount * rate}\r\n          displayType={'text'}\r\n          thousandSeparator={true}\r\n          suffix={' $'}\r\n          decimalScale={2}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './Balance.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { Token, TokenSymbol } from 'shared/models/token'\r\n\r\nimport { TokenRow } from 'wallet/components/TokenRow/TokenRow'\r\n\r\nexport const componentId = 'Balance'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface BalanceProps {\r\n  amounts: Record<TokenSymbol, number>\r\n  onSelectToken: (token: Token) => void\r\n  rates: Record<string, number>\r\n  tokens: string[]\r\n  tokensRecord: Record<string, Token>\r\n}\r\n\r\nexport const Balance: React.FC<BalanceProps> = ({\r\n  amounts,\r\n  rates,\r\n  tokens,\r\n  tokensRecord,\r\n  onSelectToken,\r\n}) => {\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {tokens.map((tokenSymbol, index) => (\r\n        <TokenRow\r\n          onSelectToken={onSelectToken}\r\n          amount={amounts[tokenSymbol]}\r\n          token={tokensRecord[tokenSymbol]}\r\n          rate={rates[tokenSymbol]}\r\n          key={index}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { Button, Tooltip } from '@material-ui/core'\r\nimport { useSnackbar } from 'notistack'\r\n\r\nimport './Receive.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { Token } from 'shared/models'\r\n\r\nexport const componentId = 'Receive'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type ReceiveProps = {\r\n  address: string\r\n  privateAddress: string | null\r\n  token: Token\r\n  getPrivateAddress: (_token: Token) => void\r\n}\r\n\r\nexport const Receive: React.FC<ReceiveProps> = ({\r\n  address,\r\n  token,\r\n  getPrivateAddress,\r\n  privateAddress,\r\n}) => {\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const QRCode = require('qrcode.react')\r\n  const handleCodeClick = (): void => {\r\n    if (address) {\r\n      navigator.clipboard.writeText(address).then(\r\n        () => {\r\n          enqueueSnackbar('Address copied to the clipboard', {\r\n            variant: 'success',\r\n          })\r\n        },\r\n        (err) => {\r\n          enqueueSnackbar(`Can't access clipboard`, { variant: 'error' })\r\n        },\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <div className={css('Title')}>Receive {token.symbol}</div>\r\n\r\n      <Tooltip title={address} placement=\"bottom\">\r\n        <div className={css('Code')} onClick={handleCodeClick}>\r\n          {address || privateAddress ? (\r\n            <QRCode value={address || privateAddress} data-testid={test('Code')} />\r\n          ) : (\r\n            <Button\r\n              className={css('Button')}\r\n              data-testid={test('Button')}\r\n              onClick={() => getPrivateAddress(token)}\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n            >\r\n              Generate\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </Tooltip>\r\n    </div>\r\n  )\r\n}\r\n","import { isEthereumAddress } from 'shared/helpers/validators/eth.validator'\r\nimport { TokenSymbol } from 'shared/models'\r\n\r\nexport const validateAddress = (address: string, symbol: TokenSymbol): boolean | undefined => {\r\n  let result\r\n  const supportedSymbols = ['ETH', 'WAWES', 'NEAR']\r\n\r\n  if (!supportedSymbols.includes(symbol)) {\r\n    return undefined\r\n  }\r\n\r\n  switch (symbol) {\r\n    case 'ETH':\r\n      result = isEthereumAddress(address)\r\n      break\r\n\r\n    case 'WAVES':\r\n      result = true\r\n      break\r\n\r\n    case 'NEAR':\r\n      result = true\r\n      break\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport const beautifyAdress = (address: string, limit = 6): string => {\r\n  let result = ''\r\n\r\n  if (address.length > limit) {\r\n    result = address.substring(0, limit) + '...' + address.substring(address.length - 4)\r\n  } else result = address\r\n\r\n  return result\r\n}\r\n\r\nexport const beautifyAmount = (amount: string): string => {\r\n  if (Number(amount) < 0.0001) {\r\n    const pattern = /[0-9]e/\r\n    const arr = amount.toString().match(pattern)\r\n    const lastDigit = arr ? arr[0].slice(0,1) : 1\r\n\r\n    return `0.0...${lastDigit}`\r\n  }\r\n\r\n  return amount\r\n}\r\n","// import jsSHA from 'jssha'\r\n\r\n/**\r\n * Checks if the given string is an address\r\n *\r\n * @method isAddress\r\n * @param {String} address the given HEX adress\r\n * @return {Boolean}\r\n */\r\nexport const isEthereumAddress = (address: string) => {\r\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\r\n    // check if it has the basic requirements of an address\r\n    return false\r\n  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\r\n    // If it's all small caps or all all caps, return true\r\n    return true\r\n  } else {\r\n    // hardcoded for test tetworks\r\n    return /^(0x)?[0-9a-fA-F]{40}$/.test(address)\r\n    // Otherwise check each case\r\n    // return isChecksumAddress(address);\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if the given string is a checksummed address\r\n *\r\n * @method isChecksumAddress\r\n * @param {String} address the given HEX adress\r\n * @return {Boolean}\r\n */\r\n// const isChecksumAddress = (address: string) => {\r\n//   let addressHash: string\r\n//   const shaObj = new jsSHA('SHA-512', 'TEXT', { encoding: 'UTF8' })\r\n\r\n//   address = address.replace('0x', '')\r\n//   shaObj.update(address.toLowerCase())\r\n//   addressHash = shaObj.getHash('HEX')\r\n\r\n//   for (let i = 0; i < 40; i++) {\r\n//     // the nth letter should be uppercase if the nth digit of casemap is 1\r\n//     if (\r\n//       (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) ||\r\n//       (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])\r\n//     ) {\r\n//       return false\r\n//     }\r\n//   }\r\n//   return true\r\n// }\r\n","import { Button, TextField } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { useSnackbar } from 'notistack'\r\nimport NumberFormat from 'react-number-format'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './Send.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { validateAddress } from 'shared/helpers/addres.helper'\r\n\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\n\r\nexport const componentId = 'Send'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type SendProps = {\r\n  rate: number\r\n  wallet: Wallet\r\n  onNextClick: (address: string, amount: number) => void\r\n}\r\n\r\nexport const Send: React.FC<SendProps> = ({ rate, wallet, onNextClick }) => {\r\n  const [address, setAddress] = useState('')\r\n  const [amount, setAmount] = useState('')\r\n  const [amountValid, setAmountValid] = useState(true)\r\n  const { enqueueSnackbar } = useSnackbar()\r\n\r\n  const handleAddressChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setAddress(event.target.value)\r\n  }\r\n\r\n  const handleAddressPaste = async (event: React.MouseEvent) => {\r\n    const text = await navigator.clipboard.readText()\r\n\r\n    if (validateAddress(text, wallet.token.symbol)) {\r\n      setAddress(text)\r\n      enqueueSnackbar('Address added from the clipboard', {\r\n        variant: 'success',\r\n      })\r\n    } else {\r\n      enqueueSnackbar('Clipboard contains bad address', { variant: 'error' })\r\n    }\r\n  }\r\n\r\n  const handleAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (/^\\d+(\\.\\d{1,9})?$/.test(event.target.value)) {\r\n      setAmount(event.target.value)\r\n      setAmountValid(Number(event.target.value) > 0)\r\n    } else {\r\n      setAmount(event.target.value)\r\n      setAmountValid(false)\r\n    }\r\n  }\r\n\r\n  const handleAmountMaximise = (event: React.MouseEvent) => {\r\n    setAmount(wallet.amount.toString())\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <div className={css('Title')}>Send {wallet.token.symbol}</div>\r\n\r\n      <form className={css('Inputs')} noValidate={true} autoComplete=\"off\">\r\n        <TextField\r\n          className={css('AddressInput')}\r\n          id=\"address\"\r\n          label=\"Address\"\r\n          value={address}\r\n          onChange={handleAddressChange}\r\n        />\r\n\r\n        <span className={css('AddressInputPaste')} onClick={handleAddressPaste}>\r\n          Paste\r\n        </span>\r\n\r\n        <TextField\r\n          className={css('AmountInput', { Invalid: !amountValid })}\r\n          id=\"amount\"\r\n          label=\"Token amount\"\r\n          value={amount}\r\n          onChange={handleAmountChange}\r\n        />\r\n\r\n        <span className={css('AmountInputMax')} onClick={handleAmountMaximise}>\r\n          Max\r\n        </span>\r\n\r\n        <NumberFormat\r\n          className={css('FiatAmount')}\r\n          data-testid={test('FiatAmount')}\r\n          value={+amount * rate || 0}\r\n          displayType={'text'}\r\n          thousandSeparator={true}\r\n          prefix={'(= '}\r\n          suffix={' $)'}\r\n          decimalScale={2}\r\n        />\r\n      </form>\r\n\r\n      <div className={css('Next')}>\r\n        <Button\r\n          className={css('NextButton')}\r\n          data-testid={test('Next')}\r\n          onClick={() => onNextClick(address, +amount)}\r\n          color=\"primary\"\r\n          disabled={!(address && +amount > 0 && amountValid)}\r\n          disableElevation={!(address && amount)}\r\n          variant=\"contained\"\r\n        >\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import moment from 'moment'\r\nimport { SortedTransactions } from 'wallet/state/models/sorted-transactions'\r\nimport { Transaction } from 'wallet/state/models/transaction'\r\n\r\nconst sortByDays = (transactions: Transaction[]) => {\r\n  const result: SortedTransactions[] = []\r\n  const lastElement = <T>(arr: T[]) => arr[arr.length - 1]\r\n  const m = moment\r\n  const isAfter = (\r\n    currentTimestamp: number,\r\n    lastTimestamp: number,\r\n    check: 'day' | 'week' | 'month' = 'day',\r\n  ): boolean => m(currentTimestamp).isAfter(m(lastTimestamp), check)\r\n\r\n  transactions\r\n    .slice(0)\r\n    .reverse()\r\n    .forEach((transaction, index) => {\r\n      if ((transaction.timestamp + '').length !== 13) {\r\n        throw Error('Timestamps should have 13 digits!')\r\n      }\r\n\r\n      if (!index) {\r\n        result.push({\r\n          date: m(transaction.timestamp).format('D MMM YYYY'),\r\n          transactions: [transaction],\r\n        })\r\n      } else {\r\n        if (\r\n          isAfter(lastElement(lastElement(result).transactions).timestamp, transaction.timestamp)\r\n        ) {\r\n          result.push({\r\n            date: m(transaction.timestamp).format('D MMM YYYY'),\r\n            transactions: [transaction],\r\n          })\r\n        } else {\r\n          lastElement(result).transactions.push(transaction)\r\n        }\r\n      }\r\n    })\r\n\r\n  return result\r\n}\r\n\r\nexport default {\r\n  sortByDays,\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { Tooltip } from '@material-ui/core'\r\nimport CallMadeIcon from '@material-ui/icons/CallMade'\r\nimport CallReceivedIcon from '@material-ui/icons/CallReceived'\r\n\r\nimport './Transaction.scss'\r\n\r\nimport { Transaction as Tr } from 'wallet/state/models/transaction'\r\nimport { Wallet } from 'wallet/state/models'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { beautifyAdress, beautifyAmount } from 'shared/helpers/addres.helper'\r\n\r\nexport const componentId = 'Transaction'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type TransactionProps = {\r\n  transaction: Tr\r\n  wallet: Wallet\r\n}\r\n\r\nexport const Transaction: React.FC<TransactionProps> = ({ transaction, wallet }) => {\r\n  let isIncoming: boolean\r\n\r\n  if (wallet.address.toLowerCase() === transaction.to.toLocaleLowerCase()) {\r\n    isIncoming = true\r\n  } else {\r\n    isIncoming = false\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <span>\r\n        {' '}\r\n        {isIncoming ? (\r\n          <CallMadeIcon className={css('Icon')} />\r\n        ) : (\r\n          <CallReceivedIcon className={css('Icon')} />\r\n        )}{' '}\r\n      </span>\r\n\r\n      <span className={css('Direction')}> {isIncoming ? 'From :' : 'To :'} </span>\r\n\r\n      <span className={css('Adress')}>\r\n        {' '}\r\n        <Tooltip title={isIncoming ? transaction.from : transaction.to} placement=\"bottom\">\r\n          <span>{beautifyAdress(isIncoming ? transaction.from : transaction.to, 6)}</span>\r\n        </Tooltip>\r\n      </span>\r\n\r\n      <span className={css('Amount')}>\r\n        {' '}\r\n        <Tooltip title={transaction.amount} placement=\"bottom\">\r\n          <span>\r\n            {isIncoming ? '+' : '-'} {beautifyAmount(transaction.amount)} {wallet.token.symbol}\r\n          </span>\r\n        </Tooltip>\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { useSnackbar } from 'notistack'\r\nimport { CircularProgress } from '@material-ui/core'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport './Transactions.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { Wallet } from 'wallet/state/models'\r\nimport { getTransactions } from 'wallet/state/wallet.selectors'\r\nimport transactionHelper from 'wallet/state/helpers/transaction.helper'\r\nimport { SortedTransactions } from 'wallet/state/models/sorted-transactions'\r\nimport { beautifyAdress } from 'shared/helpers/addres.helper'\r\nimport { Transaction } from 'wallet/components/Transaction/Transaction'\r\nimport { Transaction as Tr } from 'wallet/state/models/transaction'\r\n\r\nexport const componentId = 'Transactions'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type TransactionsProps = {\r\n  wallet: Wallet\r\n}\r\n\r\nexport const Transactions: React.FC<TransactionsProps> = ({ wallet }) => {\r\n  let sorted: SortedTransactions[] = []\r\n  const dispatch = useDispatch()\r\n  const transactions = useSelector(getTransactions)\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const [opened, setOpened] = useState<boolean[]>([])\r\n\r\n  const incoming = (transaction: Tr) =>\r\n    wallet.address.toLowerCase() === transaction.to.toLocaleLowerCase()\r\n\r\n  const openHandler = (index: number) => {\r\n    const arr = [...opened]\r\n\r\n    arr[index] = !opened[index]\r\n    setOpened(arr)\r\n  }\r\n\r\n  if (transactions?.length) {\r\n    try {\r\n      sorted = transactionHelper.sortByDays(transactions)\r\n\r\n      if (!opened.length) {\r\n        const arr: boolean[] = []\r\n\r\n        sorted.forEach(() => arr.push(false))\r\n        arr[0] = true\r\n        setOpened(arr)\r\n      }\r\n    } catch (e) {\r\n      enqueueSnackbar(e.message, { variant: 'error' })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {transactions ? (\r\n        sorted.map((day, i) => (\r\n          <div className={css('Day')} key={i}>\r\n            <div className={css('Date')}>\r\n              <span className={css('Arrow', { Down: opened[i] })} onClick={() => openHandler(i)}>\r\n                {'>'}\r\n              </span>\r\n\r\n              {' ' + day.date}\r\n            </div>\r\n\r\n            {day.transactions.map((transaction, j) => (\r\n              <div className={css('TransactionRow', { Open: opened[i] })} key={j}>\r\n                <Transaction transaction={transaction} key={j} wallet={wallet} />\r\n              </div>\r\n              //   <span>{incoming(transaction) ? '<--  ' : '-->  '}</span>\r\n\r\n              //   {incoming(transaction) ? (\r\n              //     <span>\r\n              //       <b>From: </b>\r\n              //       {beautifyAdress(transaction.from)}\r\n              //     </span>\r\n              //   ) : (\r\n              //     <span>\r\n              //       <b>To: </b> {beautifyAdress(transaction.to)}\r\n              //     </span>\r\n              //   )}\r\n\r\n              //   <span>\r\n              //     <b>\r\n              //       {' ' + transaction.amount} {wallet.token.symbol}\r\n              //     </b>\r\n              //   </span>\r\n              // </div>\r\n            ))}\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  SwipeableDrawer,\r\n  Badge,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  makeStyles,\r\n  Tooltip,\r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport AttachMoneyOutlinedIcon from '@material-ui/icons/AttachMoneyOutlined'\r\nimport NotificationsIcon from '@material-ui/icons/Notifications'\r\nimport BuildOutlinedIcon from '@material-ui/icons/BuildOutlined'\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline'\r\nimport { useSnackbar } from 'notistack'\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy'\r\nimport RefreshIcon from '@material-ui/icons/Refresh'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport logo from 'assets/images/logo1.svg'\r\nimport { Token } from 'shared/models/token'\r\nimport { HelpPage } from 'shared/components/HelpPage/HelpPage'\r\nimport { AboutPage } from 'shared/components/AboutPage/AboutPage'\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport {\r\n  getActiveToken,\r\n  getActiveView,\r\n  getSupportedTokens,\r\n  getSupportedTokensRecord,\r\n  getUsdRates,\r\n  getAmounts,\r\n  getWalletsForActiveToken,\r\n  getActiveWallet,\r\n  getSendData,\r\n  getSeed,\r\n  getPrivateAddress,\r\n} from 'wallet/state/wallet.selectors'\r\nimport { Wallets, WalletsHandlers } from 'wallet/components/Wallets/Wallets'\r\nimport { SendConfirmation } from 'wallet/components/SendConfirmation/SendConfirmation'\r\nimport { WalletHeaderMode } from 'wallet/components/WalletHeader/WalletHeaderMode'\r\nimport { walletActions } from 'wallet/state/wallet.actions'\r\nimport { WalletHeader } from 'wallet/components/WalletHeader/WalletHeader'\r\nimport { total } from 'wallet/state/helpers/total.helper'\r\nimport { WalletView } from 'wallet/state/models/wallet-view'\r\nimport { Balance } from 'wallet/components/Balance/Balance'\r\nimport { Receive } from 'wallet/components/Receive/Receive'\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\nimport { Send } from 'wallet/components/Send/Send'\r\nimport { Transactions } from 'wallet/containers/Transactions/Transactions'\r\n\r\nexport const componentId = 'WalletPage'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type WalletPageProps = {}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: 'white',\r\n    flexGrow: 1,\r\n    flexDirection: 'column',\r\n    display: 'flex',\r\n    height: '100vh',\r\n    minWidth: '350px',\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  toolbar: {\r\n    alignItems: 'flex-start',\r\n    flexDirection: 'column',\r\n    paddingTop: theme.spacing(1),\r\n    minHeight: 160,\r\n    paddingBottom: '0',\r\n  },\r\n  toolbarHeader: {\r\n    display: 'flex',\r\n    borderBottom: `${theme.palette.grey[600]} 1px solid`,\r\n    width: '100%',\r\n  },\r\n  toolbarHeaderItems: {\r\n    display: 'flex',\r\n    flexGrow: 1,\r\n    justifyContent: 'flex-end',\r\n    marginRight: '-15px',\r\n  },\r\n  toolbarHeaderItemsEdgeStart: {\r\n    marginLeft: '-15px',\r\n  },\r\n  toolbarBody: {\r\n    margin: 'auto',\r\n    position: 'relative',\r\n    width: '100%',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    alignSelf: 'flex-end',\r\n  },\r\n  drower: {},\r\n  drowerItem: {\r\n    paddingRight: '20px',\r\n  },\r\n  drowerItemIcon: {\r\n    color: theme.palette.grey[600],\r\n  },\r\n  drowerItemText: {},\r\n  wrapper: {\r\n    display: 'flex',\r\n    margin: '50px auto',\r\n  },\r\n  footer: {\r\n    backgroundColor: '#020941',\r\n    bottom: 0,\r\n    display: 'flex',\r\n    position: 'fixed',\r\n    height: '70px',\r\n    width: '100%',\r\n  },\r\n  AboutPage: {\r\n    height: '50vh',\r\n  },\r\n  zeroPaddingRight: {\r\n    paddingRight: '0',\r\n  },\r\n}))\r\n\r\nexport const WalletPage: React.FC<WalletPageProps> = () => {\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const [state, setState] = useState({ drower: false })\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles()\r\n  const view = useSelector(getActiveView)\r\n  const token = useSelector(getActiveToken)\r\n  const rates = useSelector(getUsdRates)\r\n  const tokens = useSelector(getSupportedTokens)\r\n  const amounts = useSelector(getAmounts) || {}\r\n  const tokensRecord = useSelector(getSupportedTokensRecord)\r\n  const wallet = useSelector(getActiveWallet)\r\n  const wallets = useSelector(getWalletsForActiveToken)\r\n  const send = useSelector(getSendData)\r\n  const seed = useSelector(getSeed)\r\n  const privateAddress = useSelector(getPrivateAddress)\r\n\r\n  const generateAddres = () => '123'\r\n\r\n  const handleExportSeed = () => {\r\n    navigator.clipboard.writeText(seed || 'No seed set').then(\r\n      () => {\r\n        enqueueSnackbar('Seed copied to the clipboard', { variant: 'success' })\r\n      },\r\n      (err) => {\r\n        enqueueSnackbar(`Can't access clipboard`, { variant: 'error' })\r\n      },\r\n    )\r\n  }\r\n\r\n  const toggleDrawer = (open?: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\r\n    if (\r\n      event &&\r\n      event.type === 'keydown' &&\r\n      ((event as React.KeyboardEvent).key === 'Tab' ||\r\n        (event as React.KeyboardEvent).key === 'Shift')\r\n    ) {\r\n      return\r\n    }\r\n\r\n    setState({ ...state, drower: open === undefined ? !state.drower : open })\r\n  }\r\n\r\n  const drowerMenu = () => (\r\n    <div\r\n      className={classes.drower}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(false)}\r\n      onKeyDown={toggleDrawer(false)}\r\n    >\r\n      <List>\r\n        {[WalletView.Balance, WalletView.Reset].map((text, index) => (\r\n          <ListItem\r\n            className={classes.drowerItem}\r\n            button={true}\r\n            key={text}\r\n            onClick={() => dispatch(walletActions.menu(text))}\r\n          >\r\n            <ListItemIcon className={classes.drowerItemIcon}>\r\n              {[<AttachMoneyOutlinedIcon key={index} />, <BuildOutlinedIcon key={index} />][index]}\r\n            </ListItemIcon>\r\n            <ListItemText className={classes.drowerItemText} primary={text} />\r\n          </ListItem>\r\n        ))}\r\n\r\n        <ListItem className={classes.drowerItem} button={true} onClick={handleExportSeed}>\r\n          <ListItemIcon className={classes.drowerItemIcon}>\r\n            <FileCopyIcon />\r\n          </ListItemIcon>\r\n          <ListItemText className={classes.drowerItemText} primary=\"Export Seed\" />\r\n        </ListItem>\r\n      </List>\r\n\r\n      <Divider />\r\n\r\n      <List>\r\n        {[WalletView.Help, WalletView.About].map((text, index) => (\r\n          <ListItem button={true} key={text} onClick={() => dispatch(walletActions.menu(text))}>\r\n            <ListItemIcon className={css('DrowerMenu-ItemIcon')}>\r\n              {[<InfoOutlinedIcon key={index} />, <HelpOutlineIcon key={index} />][index]}\r\n            </ListItemIcon>\r\n            <ListItemText className={css('DrowerMenu-ItemText')} primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  )\r\n\r\n  const walletsButtonHandlers: WalletsHandlers = {\r\n    onReceive: (_wallet: Wallet) => dispatch(walletActions.openReceiveView(_wallet)),\r\n    onSend: (_wallet: Wallet) => dispatch(walletActions.openSendInitialView(_wallet)),\r\n    onRename: (_wallet: Wallet, name: string) =>\r\n      dispatch(walletActions.edit({ wallet: _wallet, name })),\r\n    onDelete: (_wallet: Wallet) => dispatch(walletActions.hideWallet(_wallet)),\r\n    onAdd: () => dispatch(walletActions.addWallet()),\r\n    onOpen: (_wallet: Wallet) => dispatch(walletActions.openTransactionsView(_wallet)),\r\n  }\r\n\r\n  const actualView = () => {\r\n    switch (view) {\r\n      case WalletView.Wallets:\r\n        return token ? (\r\n          <Wallets\r\n            handlers={walletsButtonHandlers}\r\n            rate={rates[token.symbol]}\r\n            token={token}\r\n            wallets={wallets ? Object.values(wallets) : []}\r\n            getPrivateAddress={(_token) => dispatch(walletActions.getPrivateAddress(_token))}\r\n          />\r\n        ) : null\r\n      case WalletView.Send:\r\n        return wallet && token ? (\r\n          <Send\r\n            rate={rates[token.symbol]}\r\n            wallet={wallet}\r\n            onNextClick={(address, amount) =>\r\n              dispatch(\r\n                walletActions.prepareSendConfirmView({\r\n                  wallet,\r\n                  address,\r\n                  amount,\r\n                }),\r\n              )\r\n            }\r\n          />\r\n        ) : null\r\n      case WalletView.SendConfirmation:\r\n        return send && token && wallet ? (\r\n          <SendConfirmation\r\n            amount={send.amount}\r\n            address={send.address}\r\n            fee={send.fee}\r\n            rate={rates[token.symbol]}\r\n            wallet={wallet}\r\n            onConfirmClick={() => dispatch(walletActions.send())}\r\n          />\r\n        ) : null\r\n      case WalletView.Receive:\r\n        return wallet && token ? (\r\n          <Receive\r\n            address={wallet.address}\r\n            token={token}\r\n            getPrivateAddress={(_token) => dispatch(walletActions.getPrivateAddress(_token))}\r\n            privateAddress={privateAddress}\r\n          />\r\n        ) : null\r\n      case WalletView.Transactions:\r\n        return wallet ? <Transactions wallet={wallet} /> : null\r\n      case WalletView.About:\r\n        return <AboutPage showBackButton={false} />\r\n      case WalletView.Help:\r\n        return <HelpPage />\r\n      default:\r\n        return (\r\n          <Balance\r\n            amounts={amounts}\r\n            onSelectToken={(t: Token) => dispatch(walletActions.openWalletsView(t))}\r\n            rates={rates}\r\n            tokens={tokens.map((i) => i.symbol)}\r\n            tokensRecord={tokensRecord}\r\n          />\r\n        )\r\n    }\r\n  }\r\n\r\n  const walletHeaderMode = [WalletView.Help, WalletView.About].includes(view)\r\n    ? WalletHeaderMode.Info\r\n    : WalletHeaderMode.Balance\r\n\r\n  const walletHeaderLabels: Record<WalletView, string> = {\r\n    [WalletView.Balance]: 'Overall balance',\r\n    [WalletView.Wallets]: `${token?.name} wallets`,\r\n    [WalletView.Receive]: `${wallet?.name}`,\r\n    [WalletView.Send]: `${wallet?.name}`,\r\n    [WalletView.SendConfirmation]: `${wallet?.name}`,\r\n    [WalletView.Transactions]: `${wallet?.name}`,\r\n    [WalletView.About]: 'About',\r\n    [WalletView.Help]: 'Help',\r\n    [WalletView.Reset]: '',\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(walletActions.openBalanceView())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className={css('', [classes.root])} data-testid={test()} id={componentId}>\r\n      <AppBar position=\"static\" className={css('AppBar')}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <div className={classes.toolbarHeader}>\r\n            <IconButton\r\n              classes={{ edgeStart: classes.toolbarHeaderItemsEdgeStart }}\r\n              onClick={toggleDrawer()}\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n              edge=\"start\"\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n\r\n            <div className={classes.toolbarHeaderItems}>\r\n              <Tooltip title=\"No new messages\" placement=\"bottom\">\r\n                <IconButton color=\"inherit\" className={classes.zeroPaddingRight}>\r\n                  <Badge badgeContent={0} color=\"secondary\">\r\n                    <NotificationsIcon />\r\n                  </Badge>\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <Tooltip title=\"Update balances\" placement=\"bottom\">\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  onClick={() => dispatch(walletActions.updateBalances())}\r\n                >\r\n                  <RefreshIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classes.toolbarBody}>\r\n            <WalletHeader\r\n              mode={walletHeaderMode}\r\n              label={walletHeaderLabels[view]}\r\n              hideBackButton={view === WalletView.Balance}\r\n              priv={!!wallet && !wallet.address}\r\n              fiatValue={\r\n                walletHeaderMode === WalletHeaderMode.Info\r\n                  ? undefined\r\n                  : total(amounts, rates, token?.symbol)\r\n              }\r\n              tokenAmount={token ? amounts[token.symbol] : undefined}\r\n              tokenSymbol={token?.symbol}\r\n              tokenName={token?.name}\r\n              onBackClick={() => dispatch(walletActions.headerBack())}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <div className={css('Wrapper', [classes.wrapper])}>{actualView()}</div>\r\n\r\n      <div className={css('Footer', [classes.footer])}>\r\n        <img src={logo} alt=\"ZeroPool\" style={{ margin: 'auto' }} />\r\n      </div>\r\n\r\n      <SwipeableDrawer\r\n        open={state.drower}\r\n        onClose={toggleDrawer(false)}\r\n        onOpen={toggleDrawer(true)}\r\n      >\r\n        {drowerMenu()}\r\n      </SwipeableDrawer>\r\n    </div>\r\n  )\r\n}\r\n","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nconst COLOR_PRIMARY = '#020941'\r\nconst COLOR_BLUE_PRIMARY = '#2699fb'\r\nconst COLOR_BLUE_SECCONDARY = '#84c6ff'\r\n// const COLOR_BLUE_LIGHT = '#c4e1fa';\r\nconst WHITE = 'white'\r\nconst GREEN = '#4be3fa'\r\nconst INPUT_UNDERLINE_COLOR = COLOR_BLUE_SECCONDARY\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    action: {\r\n      disabledBackground: COLOR_BLUE_SECCONDARY,\r\n      disabled: 'set color of text here',\r\n    },\r\n    primary: {\r\n      main: COLOR_PRIMARY,\r\n    },\r\n  },\r\n\r\n  overrides: {\r\n    MuiAppBar: {\r\n      colorPrimary: {\r\n        backgroundColor: COLOR_PRIMARY,\r\n      },\r\n    },\r\n\r\n    MuiButton: {\r\n      root: {\r\n        fontSize: '1rem',\r\n        fontFamily: '\"Exo 2\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        margin: '5px',\r\n      },\r\n      outlinedPrimary: {\r\n        backgroundColor: COLOR_PRIMARY,\r\n        border: `solid 2px ${COLOR_BLUE_PRIMARY}`,\r\n        color: WHITE,\r\n        '&:hover': {\r\n          backgroundColor: COLOR_PRIMARY,\r\n          border: `solid 2px ${COLOR_BLUE_SECCONDARY}`,\r\n        },\r\n      },\r\n      containedPrimary: {\r\n        // backgroundColor: 'linear-gradient(90deg, rgba(132,198,255,1) 10%,\r\n        // rgba(38,153,251,1) 100%)',\r\n        backgroundColor: COLOR_BLUE_PRIMARY,\r\n        color: WHITE,\r\n        '&:hover': {\r\n          backgroundColor: COLOR_BLUE_SECCONDARY,\r\n        },\r\n      },\r\n    },\r\n\r\n    MuiIconButton: {\r\n      root: {\r\n        backgroundColor: COLOR_PRIMARY,\r\n        '&:hover': {\r\n          backgroundColor: COLOR_PRIMARY,\r\n        },\r\n      },\r\n    },\r\n\r\n    MuiLinearProgress: {\r\n      barColorPrimary: {\r\n        backgroundColor: GREEN,\r\n      },\r\n      colorPrimary: {\r\n        backgroundColor: COLOR_PRIMARY,\r\n      },\r\n    },\r\n\r\n    MuiDialog: {\r\n      root: {\r\n        minWidth: '350px',\r\n      },\r\n    },\r\n\r\n    MuiInputLabel: {},\r\n\r\n    MuiInput: {\r\n      colorSecondary: {\r\n        color: WHITE,\r\n      },\r\n\r\n      underline: {\r\n        borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n\r\n        '&:not($disabled):after': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:hover:not($disabled):after': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:not($disabled):before': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:hover:not($disabled):before': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n      },\r\n    },\r\n  },\r\n})\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { ThemeProvider } from '@material-ui/core'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport { SnackbarProvider } from 'notistack'\r\nimport { Router, Route, Redirect, Switch } from 'react-router-dom'\r\n\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport { SnackbarUtilsConfigurator } from 'shared/helpers/toast.helper'\r\nimport { http, setupInterceptors } from 'shared/http/http'\r\nimport { LoadingBar } from 'shared/loading-bar/containers/loading-bar/loading-bar.component'\r\nimport { AboutPage } from 'shared/components/AboutPage/AboutPage'\r\nimport { timeout } from 'shared/util/timeout'\r\n\r\nimport { store, history, persistedStore } from 'state'\r\nimport { CreateAccountPage } from 'register/containers/CreateAccount/CreateAccountPage'\r\nimport { WalletPage } from 'wallet/containers/WalletPage/WalletPage'\r\nimport { theme } from 'theme'\r\n\r\nsetupInterceptors(http(), store)\r\n\r\nasync function start() {\r\n  await timeout(1000)\r\n\r\n  ReactDOM.render(\r\n    <ThemeProvider theme={theme}>\r\n      <SnackbarProvider maxSnack={5} anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\r\n        {/* <React.StrictMode> */}\r\n        <Provider store={store}>\r\n          <PersistGate loading={null} persistor={persistedStore}>\r\n            <ConnectedRouter history={history}>\r\n              <Router history={history}>\r\n                <Switch>\r\n                  <Route path=\"/welcome\" exact={true} component={CreateAccountPage} />\r\n                  <Route path=\"/about\" exact={true} component={AboutPage} />\r\n                  <Route path=\"/wallet\" exact={true} component={WalletPage} />\r\n                  <Route>\r\n                    <Redirect to=\"/welcome\" />\r\n                  </Route>\r\n                </Switch>\r\n              </Router>\r\n            </ConnectedRouter>\r\n            <LoadingBar />\r\n          </PersistGate>\r\n        </Provider>\r\n        {/* </React.StrictMode> */}\r\n        <SnackbarUtilsConfigurator />\r\n      </SnackbarProvider>\r\n    </ThemeProvider>,\r\n    document.getElementById('root'),\r\n  )\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\nstart()\r\n","import { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios'\r\nimport { Store } from 'redux'\r\n\r\nimport { RootState } from 'state'\r\nimport { RequestConfig } from 'shared/http/http'\r\nimport { loadingBarActions } from 'shared/loading-bar/state/loading-bar.actions'\r\n\r\nexport const loadingBarRequestInterceptor = (store: Store<RootState>) => (\r\n  request: AxiosRequestConfig,\r\n): AxiosRequestConfig => {\r\n  const { context } = request as RequestConfig\r\n  const noBar = !!context?.noLoadingBar\r\n\r\n  if (!noBar) {\r\n    store.dispatch(loadingBarActions.addRequest())\r\n  }\r\n\r\n  return request\r\n}\r\n\r\nexport const loadingBarResponseInterceptor = (store: Store<RootState>) => (\r\n  response: AxiosResponse,\r\n): AxiosResponse => {\r\n  const { context } = response.config as RequestConfig\r\n  const noBar = !!context?.noLoadingBar\r\n\r\n  if (!noBar) {\r\n    store.dispatch(loadingBarActions.removeRequest())\r\n  }\r\n\r\n  return response\r\n}\r\n\r\nexport const loadingBarErrorResponseInterceptor = (store: Store<RootState>) => (\r\n  error: AxiosError,\r\n): unknown => {\r\n  const context = (error.config as RequestConfig)?.context\r\n  const noBar = !!context?.noLoadingBar\r\n\r\n  if (!noBar) {\r\n    store.dispatch(loadingBarActions.removeRequest())\r\n  }\r\n\r\n  throw error\r\n}\r\n","import { AxiosRequestConfig } from 'axios'\r\nimport { Store } from 'redux'\r\n\r\nimport { RequestConfig } from 'shared/http/http'\r\nimport { RootState } from 'state'\r\nimport { Provider } from 'shared/models/provider'\r\n\r\nimport providers from 'assets/settings/providers.json'\r\n\r\nexport const authInterceptor = (store: Store<RootState>) => (\r\n  request: AxiosRequestConfig,\r\n): AxiosRequestConfig => {\r\n  const { context } = request as RequestConfig\r\n\r\n  if (!context?.provider) {\r\n    return request\r\n  }\r\n\r\n  const authHeaders: Record<string, string>[] = []\r\n  const provider: { authHeader: string; authValue: string } = providers[Provider[context.provider]]\r\n\r\n  authHeaders[provider.authHeader] = provider.authValue\r\n\r\n  return {\r\n    ...request,\r\n    headers: {\r\n      ...request.headers,\r\n      ...authHeaders,\r\n    },\r\n  }\r\n}\r\n","export enum WalletView {\r\n  Balance = 'Balance',\r\n  Wallets = 'Wallets',\r\n  Transactions = 'Transactions',\r\n  Send = 'Send',\r\n  SendConfirmation = 'SendConfirmation',\r\n  Receive = 'Receive',\r\n  Help = 'Help',\r\n  About = 'About',\r\n  Reset = 'Reset',\r\n}\r\n","export * from './poll-settings'\r\nexport * from './wallet'\r\nexport * from './wallet-view'\r\nexport * from './send-data'\r\nexport * from './wallet-record'\r\n"],"sourceRoot":""}