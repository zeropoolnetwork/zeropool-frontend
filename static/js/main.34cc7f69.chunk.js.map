{"version":3,"sources":["assets/images/guy-fawkes-thanks.png","assets/logo.svg","serviceWorker.ts","register/state/models/register-stage.ts","register/state/register.actions.ts","state.ts","register/state/helpers/seed.helper.ts","register/state/register.reducer.ts","register/state/helpers/stage.helper.ts","common/operators/filter-actions.operator.ts","register/state/register.epics.ts","state-migrations.ts","common/helpers/test/test-id-builder.helper.ts","register/components/SeedTag/SeedTag.tsx","common/util/shuffle.ts","register/components/SeedPanel/SeedPanel.tsx","register/components/StepOne/StepOne.tsx","register/components/StepTwo/StepTwo.tsx","register/components/StepFour/StepFour.tsx","register/components/Welcome/Welcome.tsx","register/components/StepThree/StepThree.tsx","register/components/StepHeader/StepHeader.tsx","register/components/ImportAccount/ImportAccount.tsx","register/state/register.selectors.ts","register/containers/CreateAccount/CreateAccountPage.tsx","wallet/containers/WalletPage/WalletPage.tsx","about/components/AboutPage/AboutPage.tsx","theme.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","RegisterStage","registerActions","stepBack","create","startRegisterAccount","generateSeed","submitSeed","confirmSeed","finishRegister","startImportAccount","finishImportAccount","history","randomBytes","require","Mnemonic","initialRegisterState","stage","undefined","seed","seedConfirmed","showSteps","registerReducer","createReducer","handleAction","actions","state","IMPORT","STEP1","Number","includes","STEP2","getPreviousStage","generate","words","reduce","accu","value","length","push","STEP3","STEP4","password","hideSteps","filterActions","actionCreators","isOneAction","argument","pipe","filter","isActionOf","registerEpics","combineEpics","action$","state$","tap","payload","console","log","ignoreElements","stateMigrations","0","newState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","rootEpic","createBrowserHistory","persistConfig","key","version","storage","migrate","createMigrate","debug","whitelist","persistedReducer","persistReducer","combineReducers","register","router","connectRouter","store","createStore","applyMiddleware","routerMiddleware","persistedStore","persistStore","run","testIdBuilder","baseName","names","prev","curr","css","cn","test","SeedTag","text","number","hidden","hideNumber","onClick","className","Placeholder","data-testid","split","sort","Math","random","join","SeedPanel","check","onCheck","useState","confirmedSeed","setConfirmedSeed","success","setSuccess","shuffledSeed","setShuffledSeed","useEffect","same","JSON","stringify","bodyTagClickHandler","index","splice","footerTagClickHandler","Paper","map","tag","findIndex","str","StepOne","onGenerate","Button","color","disableElevation","variant","StepTwo","onSubmit","PasswordInputParams","required","pattern","message","minLength","StepFour","onRegister","useForm","criteriaMode","handleSubmit","reset","control","errors","showPassword","setShowPassword","setPassword","passwordConfirm","setPasswordConfirm","FormControl","error","InputLabel","htmlFor","Input","id","inputProps","inputRef","name","onChange","getValues","type","endAdornment","InputAdornment","position","IconButton","aria-label","confirm","onMouseDown","event","preventDefault","Close","Visibility","VisibilityOff","FormHelperText","validate","Welcome","onCreate","onImport","onAbout","src","guy","alt","StepThree","onConfirm","buttonDisabled","setButtonDisabled","Disabled","disabled","StepHeader","step","total","onBack","Tooltip","title","placement","disableRipple","ArrowBack","MobileStepper","steps","activeStep","backButton","nextButton","ImportAccount","getRegisterState","getRegisterStage","createSelector","getRegisterSeed","getShowSteps","theme","createMuiTheme","palette","action","disabledBackground","typography","button","overrides","MuiButton","root","fontSize","fontFamily","MuiLinearProgress","colorPrimary","backgroundColor","ReactDOM","render","ThemeProvider","StrictMode","persistor","path","exact","component","useSelector","dispatch","useDispatch","data","components","logo","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,kC,usBCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,IClBMC,E,uFCGCC,EAAkB,CAC7BC,SAAUC,uBAAO,qBAAPA,GAEVC,qBAAsBD,uBAAO,iCAAPA,GACtBE,aAAcF,uBAAO,yBAAPA,GACdG,WAAYH,uBAAO,uBAAPA,GACZI,YAAaJ,uBAAO,wBAAPA,GACbK,eAAgBL,uBAAO,qBAAPA,GAEhBM,mBAAoBN,uBAAO,+BAAPA,GACpBO,oBAAqBP,uBAAO,0BAAPA,K,SDbXH,O,iBAAAA,I,iBAAAA,I,iBAAAA,I,iBAAAA,I,oBAAAA,M,SE2CsBW,EC3C1BC,EAAgBC,EAAQ,IAAxBD,YACAE,EAAaD,EAAQ,KAArBC,SCaKC,EAAsC,CACjDC,WAAOC,EACPC,KAAM,GACNC,eAAe,EACfC,WAAW,GAGAC,EAAkBC,wBAG7BP,GACCQ,aAAaC,EAAQtB,UAAU,SAAAuB,GAAK,kCAChCA,GCjByB,SAACA,GAC/B,OAAIA,EAAMT,QAAUhB,EAAc0B,OACzB,CACLV,WAAOC,EACPG,WAAW,EACXF,KAAM,IAIH,CACLF,MAAOS,EAAMT,QAAUhB,EAAc2B,WAAQV,EAAYW,OAAOH,EAAMT,OAAS,EAC/EI,WAAW,CAAC,OAAGH,GAAWY,SAASJ,EAAMT,OACzCE,KAAMO,EAAMT,QAAUhB,EAAc8B,MAAQ,GAAKL,EAAMP,MDMpDa,CAAiBN,OAErBF,aAAaC,EAAQpB,sBAAsB,SAAAqB,GAAK,kCAC5CA,GAD4C,IAE/CL,WAAW,EACXJ,MAAOhB,EAAc2B,WAEtBJ,aAAaC,EAAQnB,cAAc,SAAAoB,GAAK,kCACpCA,GADoC,IAEvCP,KDhCMJ,EAASkB,SAASpB,EAAY,KAAKqB,MACxCC,QAAO,SAACC,EAAgBC,GAKvB,OAJID,EAAKE,OAAS,KAAOF,EAAKN,SAASO,IACrCD,EAAKG,KAAKF,GAGLD,IACN,IC0BHhB,eAAe,EACfH,MAAOhB,EAAc8B,WAEtBP,aAAaC,EAAQlB,YAAY,SAAAmB,GAAK,kCAClCA,GADkC,IAErCN,eAAe,EACfH,MAAOhB,EAAcuC,WAEtBhB,aAAaC,EAAQjB,aAAa,SAAAkB,GAAK,kCACnCA,GADmC,IAEtCN,eAAe,EACfH,MAAOhB,EAAcwC,WAEtBjB,aAAaC,EAAQhB,gBAAgB,SAACiB,EAAOgB,GAAR,mBAAC,eAClChB,GADiC,IAEpCL,WAAW,EACXJ,WAAOC,OAERM,aAAaC,EAAQf,oBAAoB,SAAAgB,GAAK,kCAC1CA,GAD0C,IAE7CiB,WAAW,EACX1B,MAAOhB,EAAc0B,Y,oCElDZiB,EAAgB,WAEvB,IAAD,uBADAC,EACA,yBADAA,EACA,gBACH,IAAMC,EAAwC,IAA1BD,EAAeP,OAC7BS,EAAWD,EAAcD,EAAe,GAAKA,EACnD,OAAOG,YAAKC,YAAOC,qBAAWH,MCwBnBI,EAAsBC,aAxBA,SACjCC,EACAC,GAFiC,OAIjCD,EAAQL,KACNJ,EAAc1C,EAAgBS,qBAC9B4C,aAAI,SAAAC,GACFC,QAAQC,IAAIF,MAEdG,kBAG0B,SAC5BN,EACAC,GAF4B,OAI5BD,EAAQL,KACNJ,EAAc1C,EAAgBO,gBAC9B8C,aAAI,SAAAC,GACFC,QAAQC,IAAIF,MAEdG,kBC/BSC,EAAkB,CAC7BC,EAAG,SAACnC,GACF,IAAMoC,EAAmB,eACpBpC,GAGL,OAAO,eACFoC,KNYHC,EAFkBlE,OAAOmE,sCAEaC,IAItCC,EAAiBC,cAEjBC,EAAWhB,YACfD,GAYWvC,EAAUyD,cAgBjBC,EAA0C,CAC9CC,IAAK,OACLC,QAAS,EACTC,YACAC,QAASC,YAAcf,EAAiB,CAAEgB,OAAO,IACjDC,UAAW,CAAC,iBAGRC,EAAmBC,YACvBT,GAvBgC1D,EAwBdA,EAvBlBoE,YAAgB,CACdC,SAAU3D,EAEV4D,OAAQC,YAAcvE,OAuBbwE,EAAQC,YACnBP,EACAf,EAAiBuB,YAAgBpB,EAAgBqB,YAAiB3E,MAGvD4E,EAAiBC,YAAaL,GAG3ClB,EAAewB,IAAItB,G,oBO9ENuB,G,OAAgB,SAACC,GAAD,OAAsB,sCAAIC,EAAJ,yBAAIA,EAAJ,uBACjDA,EAAM1D,QAAO,SAAC2D,EAAMC,GAAP,gBAAmBD,EAAnB,YAA2BC,KAAQH,M,2CCS5CI,G,cAAMC,aAFe,YAGrBC,EAAOP,EAHc,WAadQ,EAAkC,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QAIlF,OACE,yBAAKC,UAAWT,EAAI,CAAEU,YAAaJ,IAAWK,cAAaT,IAAQM,QAHhD,kBAAMA,IAAYF,EAASE,EAAQH,GAAU,OAI5DC,GAAUC,EAAa,KACvB,yBAAKE,UAAWT,EAAI,WACjBK,EAAS,GAId,yBAAKI,UAAWT,EAAI,SACjBM,EAAuBF,ECjC1BQ,MAAM,IAAIC,MAAK,iBAAM,GAAMC,KAAKC,YAAUC,KAAK,IDiCbZ,KErBlCJ,GAAMC,aAFe,aAGrBC,GAAOP,EAHc,aAWdsB,GAAsC,SAAC,GAA8B,IAA5B9F,EAA2B,EAA3BA,KAAM+F,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAAc,EACrCC,mBAAS,IAD4B,mBACxEC,EADwE,KACzDC,EADyD,OAEjDF,oBAAS,GAFwC,mBAExEG,EAFwE,KAE/DC,EAF+D,OAGvCJ,mBAAS,IAH8B,mBAGxEK,EAHwE,KAG1DC,EAH0D,KAK/EC,qBAAU,YACHF,EAAanF,QAAU4E,GAC1BQ,EAA6B,YAAIvG,GDzBjC0F,MAAK,iBAAM,GAAMC,KAAKC,eC2BvB,CAACU,EAAanF,OAAQ4E,EAAO/F,IAEhCwG,qBAAU,WACR,IAAMC,EAAOC,KAAKC,UAAU3G,KAAU0G,KAAKC,UAAUT,GACrDG,EAAWI,GACPT,GACFA,EAAQS,KAET,CAACL,EAASF,EAAelG,EAAMgG,IAElC,IAAMY,EAAsB,SAACC,GAC3BX,EAAcY,OAAOD,EAAO,GAC5BV,EAAiB,YAAID,IACrBG,GAAW,IAEPU,EAAwB,SAACF,GAC7BV,EAAiB,GAAD,mBAAKD,GAAL,CAAoBlG,EAAK6G,OAG3C,OACE,kBAACG,EAAA,EAAD,CAAO1B,UAAWT,KAAOW,cAAaT,MACpC,yBAAKO,UAAWT,GAAI,QAASW,cAAaT,GAAK,SAC5CgB,EACCG,EAAce,KAAI,SAACC,EAAaL,GAAd,OAChB,kBAAC,EAAD,CAAS5B,KAAMiC,EAAKhC,OAAQ2B,EAAOzD,IAAKyD,EAAOxB,QAASuB,OAG1D5G,EAAKiH,KAAI,SAACC,EAAaL,GAAd,OACP,kBAAC,EAAD,CAAS5B,KAAMiC,EAAKhC,OAAQ2B,EAAOzD,IAAKyD,QAK9C,yBAAKvB,UAAWT,GAAI,UAAWW,cAAaT,GAAK,WAC9CgB,EACCO,EAAaW,KAAI,SAACC,EAAaL,GAAd,OACf,kBAAC,EAAD,CACE5B,KAAMiC,EACNhC,OAAQlF,EAAKmH,WAAU,SAAAC,GAAG,OAAIA,IAAQF,KACtC/B,OAAQe,EAAcvF,SAASuG,GAC/B9B,YAAU,EACVhC,IAAKpD,EAAKmH,WAAU,SAAAC,GAAG,OAAIA,IAAQF,KACnC7B,QAAS0B,OAER,KACNb,EAAc/E,SAAWnB,EAAKmB,QAAWiF,EAItC,KAHF,yBAAKd,UAAWT,GAAI,WAAYW,cAAaT,GAAK,YAAlD,gCCjEJF,GAAMC,aAFe,WAGrBC,GAAOP,EAHc,WASd6C,GAAkC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAEhD,OACE,yBAAKhC,UAAWT,KAAOW,cAAaT,MAClC,iCACE,kBAAC,GAAD,CAAW/E,KAAM,KAEjB,sKAOF,kBAACuH,EAAA,EAAD,CACEC,MAAM,UACNlC,UAAWT,GAAI,UACfW,cAAaT,GAAK,kBAClB0C,kBAAgB,EAChBpC,QAASiC,EACTI,QAAQ,aANV,8BCrBA7C,I,OAAMC,aAFe,YAGrBC,GAAOP,EAHc,WAUdmD,GAAkC,SAAC,GAAwB,IAAtB3H,EAAqB,EAArBA,KAAM4H,EAAe,EAAfA,SAEtD,OACE,yBAAKtC,UAAWT,KAAOW,cAAY,WACjC,iCACE,kBAAC,GAAD,CAAWxF,KAAMA,IAEjB,uIAMF,kBAACuH,EAAA,EAAD,CACEC,MAAM,UACNlC,UAAWT,GAAI,UACfW,cAAaT,GAAK,gBAClB0C,kBAAgB,EAChBpC,QAASuC,EACTF,QAAQ,aANV,Y,6GCrBA7C,GAAMC,aAFe,YAGrBC,GAAOP,EAHc,YAKrBqD,GAAsB,CAC1BC,SAAU,WACVC,QAAS,CACP7G,MAAO,wCACP8G,QAAS,2BAEXC,UAAW,CACT/G,MAAO,EACP8G,QAAS,8BAaAE,GAAoC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACRC,aAAkB,CAAEC,aAAc,QAArFC,EAD2D,EAC3DA,aAAcxE,EAD6C,EAC7CA,SAAUyE,EADmC,EACnCA,MAAOC,EAD4B,EAC5BA,QAASC,EADmB,EACnBA,OADmB,EAG3BxC,oBAAS,GAHkB,mBAG5DyC,EAH4D,KAG9CC,EAH8C,OAInC1C,mBAAS,IAJ0B,mBAI5D1E,EAJ4D,KAIlDqH,EAJkD,OAKrB3C,mBAAS,IALY,mBAK5D4C,EAL4D,KAK3CC,EAL2C,KAYnE,OACE,yBAAKxD,UAAWT,KAAOW,cAAaT,MAClC,iCACE,0BAAM6C,SARK,WAEfU,EAAaH,IAMiB7C,UAAWT,GAAI,SACvC,kBAACkE,GAAA,EAAD,CAAazD,UAAWT,GAAI,eAAgBmE,QAASP,EAAM,UACzD,kBAACQ,GAAA,EAAD,CAAYC,QAAQ,YAApB,YAEA,kBAACC,GAAA,EAAD,CAAOC,GAAG,WACR9D,UAAWT,GAAI,YACfwE,WAAY,CAAE,cAAetE,GAAK,aAClCuE,SAAUxF,EAAS+D,IACnB0B,KAAK,WACLrI,MAAOK,EACPiI,SAAU,kBAAMZ,EAAYJ,EAAQiB,YAAR,WAC5BC,KAAMhB,EAAe,OAAS,WAC9BiB,aACE,kBAACC,GAAA,EAAD,CAAgBC,SAAS,OACtBtI,EACC,kBAACuI,GAAA,EAAD,CACEC,aAAW,iBACX1E,QAAS,WAAQkD,EAAM,CAAEhH,cAAUxB,EAAWiK,QAASxB,EAAQiB,YAAR,UAAmCb,EAAY,KACtGqB,YAAa,SAACC,GAAD,OAAWA,EAAMC,mBAE9B,kBAACC,GAAA,EAAD,OACc,KAGlB,kBAACN,GAAA,EAAD,CACEC,aAAW,oBACX1E,QAAS,kBAAMsD,GAAiBD,IAChCuB,YAAa,SAACC,GAAD,OAAWA,EAAMC,mBAE7BzB,EAAe,kBAAC2B,GAAA,EAAD,MAAiB,kBAACC,GAAA,EAAD,UAMxC7B,EAAM,SACL,kBAAC8B,GAAA,EAAD,CAAgB/E,cAAaT,GAAK,kBAAmB0D,EAAM,SAAaT,SACtE,MAIN,kBAACe,GAAA,EAAD,CAAazD,UAAWT,GAAI,eAAgBmE,QAASP,EAAM,SACzD,kBAACQ,GAAA,EAAD,CAAYC,QAAQ,WAApB,oBAEA,kBAACC,GAAA,EAAD,CAAOC,GAAG,UACR9D,UAAWT,GAAI,YACfwE,WAAY,CAAE,cAAetE,GAAK,YAClCuE,SAAUxF,EAAS,CACjB0G,SAAU,SAAAtJ,GAAK,OAAIA,IAAUsH,EAAQiB,YAAR,YAE/BF,KAAK,UACLrI,MAAO2H,EACPW,SAAU,kBAAMV,EAAmBN,EAAQiB,YAAR,UACnCC,KAAMhB,EAAe,OAAS,WAC9BiB,aACE,kBAACC,GAAA,EAAD,CAAgBC,SAAS,OACtBhB,EACC,kBAACiB,GAAA,EAAD,CACEC,aAAW,qBACX1E,QAAS,WAAQkD,EAAM,CAAEhH,SAAUiH,EAAQiB,YAAR,SAAiCO,aAASjK,IAAc+I,EAAmB,KAC9GmB,YAAa,SAACC,GAAD,OAAWA,EAAMC,mBAE9B,kBAACC,GAAA,EAAD,OACc,KAGlB,kBAACN,GAAA,EAAD,CACEC,aAAW,oBACX1E,QAAS,kBAAMsD,GAAiBD,IAChCuB,YAAa,SAACC,GAAD,OAAWA,EAAMC,mBAE7BzB,EAAe,kBAAC2B,GAAA,EAAD,MAAiB,kBAACC,GAAA,EAAD,UAMxC7B,EAAM,QACL,kBAAC8B,GAAA,EAAD,CAAgB/E,cAAaT,GAAK,yBAAlC,0BAEoB,MAIxB,wHAKA,2BACE,kBAACwC,EAAA,EAAD,CACEC,MAAM,UACNlC,UAAWT,GAAI,UACfW,cAAaT,GAAK,UAClB0C,kBAAgB,EAChBC,QAAQ,YACRgC,KAAK,UANP,iB,8BC7HN7E,GAAMC,aAPe,WAQrBC,GAAOP,EARc,WAUdiG,GAAkC,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAEpE,OACE,uBAAKtF,UAAWT,KAAOW,cAAaT,MAClC,+BACE,uBAAK8F,IAAKC,KAAKxF,UAAWT,GAAI,QAASW,cAAaT,GAAK,QAASgG,IAAI,SAEtE,sBAAIzF,UAAWT,GAAI,YAAaW,cAAaT,GAAK,aAAlD,uBAIA,qBAAGO,UAAWT,GAAI,eAAgBW,cAAaT,GAAK,gBAApD,6EAKF,gBAACwC,EAAA,EAAD,CACEC,MAAM,UACNlC,UAAWT,GAAI,UACfW,cAAaT,GAAK,gBAClB0C,kBAAgB,EAChBpC,QAASqF,EACThD,QAAQ,aANV,sBAWA,gBAACH,EAAA,EAAD,CACEG,QAAQ,WACRF,MAAM,UACNlC,UAAWT,GAAI,UACfW,cAAaT,GAAK,gBAClBM,QAASsF,GALX,kBAUA,gBAACpD,EAAA,EAAD,CACEG,QAAQ,WACRF,MAAM,UACNlC,UAAWT,GAAI,UACfW,cAAaT,GAAK,eAClBM,QAASuF,GALX,oBC5CA/F,I,OAAMC,aAFe,cAGrBC,GAAOP,EAHc,aASdwG,GAAsC,SAAC,GAAyB,IAAvBhL,EAAsB,EAAtBA,KAAMiL,EAAgB,EAAhBA,UAAgB,EAC9BhF,oBAAS,GADqB,mBACnEiF,EADmE,KACnDC,EADmD,KAG1E,OACE,yBAAK7F,UAAWT,KAAOW,cAAY,aACjC,iCACE,kBAAC,GAAD,CAAWxF,KAAMA,EAAM+F,OAAK,EAACC,QAAS,SAACI,GAAD,OAAsB+E,GAAmB/E,MAE/E,kHAMF,kBAACmB,EAAA,EAAD,CACEC,MAAM,UACNlC,UAAWT,GAAI,SAAU,CAAEuG,SAAUF,IACrC1F,cAAaT,GAAK,iBAClBsG,SAAUH,EACVzD,kBAAgB,EAChBpC,QAAS4F,EACTvD,QAAQ,aAPV,a,8BCtBA7C,I,OAAMC,aAFe,eAGrBC,GAAOP,EAHc,cAWd8G,GAAwC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAEnE,OACE,yBAAKnG,UAAWT,KAAOW,cAAaT,MAClC,kBAAC2G,GAAA,EAAD,CAASC,MAAM,YAAYC,UAAU,WACnC,kBAACrE,EAAA,EAAD,CACEjC,UAAWT,GAAI,UACfW,cAAaT,GAAK,cAClBM,QAASoG,EACTI,eAAa,GAEb,kBAACC,GAAA,EAAD,CAAWxG,UAAWT,GAAI,YAI9B,uBAAGS,UAAWT,GAAI,QAASW,cAAaT,GAAK,SAA7C,QACQwG,EADR,OACkBC,GAGlB,kBAACO,GAAA,EAAD,CACEzG,UAAWT,GAAI,YACf6C,QAAQ,WACRsE,MAAOR,EAAQ,EACf3B,SAAS,SACToC,WAAYV,EAAO,EACnBW,WAAY,0BAAM5G,UAAU,UAAhB,QACZ6G,WAAY,0BAAM7G,UAAU,UAAhB,YCpCdT,I,OAAMC,aAFe,kBAGrBC,GAAOP,EAHc,iBAUd4H,GAA8C,SAAC,GAA0B,IAAxBX,EAAuB,EAAvBA,OAAQd,EAAe,EAAfA,SAChE3K,EAAiB,GAGrB,OACE,yBAAKsF,UAAWT,KAAOW,cAAaT,MAClC,iCACE,gDAEF,kBAACwC,EAAA,EAAD,CACEC,MAAM,UACNhC,cAAaT,GAAK,gBAClB0C,kBAAgB,EAChBpC,QAAS,kBAAMsF,EAAS,CAAE3K,OAAMuB,SAXvB,MAYTmG,QAAQ,aALV,UAUA,kBAACH,EAAA,EAAD,CACEC,MAAM,UACNhC,cAAaT,GAAK,cAClB0C,kBAAgB,EAChBpC,QAASoG,EACT/D,QAAQ,YALV,U,SCjCO2E,GAAmB,SAAC9L,GAAD,OAAsBA,EAAMuD,UAE/CwI,GAAmBC,aAC9BF,IACA,SAAA9L,GAAK,OAAIA,EAAMT,SAGJ0M,GAAkBD,aAC7BF,IACA,SAAA9L,GAAK,OAAIA,EAAMP,QAQJyM,IAL2BF,aACtCF,IACA,SAAA9L,GAAK,OAAIA,EAAMN,iBAGWsM,aAC1BF,IACA,SAAA9L,GAAK,OAAIA,EAAML,cCDX2E,GAAMC,aAFe,qBAGrBC,GAAOP,EAHc,qBCfrBK,I,OAAMC,aAAG,e,8BCQTD,GAAMC,aAFe,aAGrBC,GAAOP,EAHc,a,UCTdkI,GAAQC,aAAe,CAClCC,QAAS,CACPC,OAAQ,CACNC,mBAAoB,+BACpBzB,SAAU,2BAGd0B,WAAY,CACVC,OAAQ,IAIVC,UAAW,CACTC,UAAW,CACTC,KAAM,CACJC,SAAU,OACVC,WAAY,wDAIhBC,kBAAmB,CACjBC,aAAc,CACZC,gBAAiB,YCNzBC,IAASC,OACP,kBAACC,EAAA,EAAD,CAAejB,MAAOA,IACpB,kBAAC,IAAMkB,WAAP,KACE,kBAAC,IAAD,CAAU3J,MAAOA,GACf,kBAAC,IAAD,CAAa4J,UAAWxJ,GACtB,kBAAC,IAAD,CAAiB5E,QAASA,GACxB,kBAAC,IAAD,CAAQA,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqO,KAAK,YAAYC,OAAK,EAACC,UJCiB,WAC7D,IAAMlO,EAAQmO,YAAY3B,IACpBtM,EAAOiO,YAAYzB,IACnBtM,EAAY+N,YAAYxB,IACxByB,EAAWC,cAyBjB,OACE,yBAAK7I,UAAWT,KAAOW,cAAaT,MAChCjF,GAASI,EAAa,kBAAC,GAAD,CAAYqL,KAAMzL,EAAO0L,MAAO,EAAGC,OAAQ,kBAAMyC,EAAS5N,EAAQtB,eAAkB,KAzB7F,WACjB,OAAQc,GACN,KAAKhB,EAAc2B,MACjB,OAAO,kBAAC,GAAD,CAAS6G,WAAY,kBAAM4G,EAAS5N,EAAQnB,mBACrD,KAAKL,EAAc8B,MACjB,OAAO,kBAAC,GAAD,CAASZ,KAAMA,EAAM4H,SAAU,kBAAMsG,EAAS5N,EAAQlB,iBAC/D,KAAKN,EAAcuC,MACjB,OAAO,kBAAC,GAAD,CAAWrB,KAAMA,EAAMiL,UAAW,kBAAMiD,EAAS5N,EAAQjB,kBAClE,KAAKP,EAAcwC,MACjB,OAAO,kBAAC,GAAD,CAAU6G,WAAY,SAACiG,GAAD,OAAgCF,EAAS5N,EAAQhB,eAAe8O,OAC/F,KAAKtP,EAAc0B,OACjB,OAAO,kBAAC,GAAD,CACLmK,SAAU,SAACyD,GAAD,OAAgDF,EAAS5N,EAAQd,oBAAoB4O,KAC/F3C,OAAQ,kBAAMyC,EAAS5N,EAAQtB,eACnC,QACE,OAAO,kBAAC,GAAD,CACL0L,SAAU,kBAAMwD,EAAS5N,EAAQpB,yBACjCyL,SAAU,kBAAMuD,EAAS5N,EAAQf,uBACjCqL,QAAS,kBAAMsD,EAAS9M,YAAK,eAQhCiN,OIhCS,kBAAC,IAAD,CAAOP,KAAK,SAASC,OAAK,EAACC,UFTQ,WACjD,IAAME,EAAWC,cAEjB,OACE,yBAAK7I,UAAWT,KAAOW,cAAY,aACjC,yBAAKqF,IAAKyD,KAAMhJ,UAAWT,GAAI,QAASW,cAAaT,GAAK,QAASgG,IAAI,SAEvE,wBAAIzF,UAAWT,GAAI,WAAnB,sBAEA,uBAAGS,UAAWT,GAAI,SAAlB,mSAQA,uBAAGS,UAAWT,GAAI,SAAlB,0HAKA,uBAAGS,UAAWT,GAAI,WAChB,kBAAC0C,EAAA,EAAD,CACEC,MAAM,UACNhC,cAAaT,GAAK,cAClB0C,kBAAgB,EAChBpC,QAAS,kBAAM6I,EAAS9M,YAAK,OAC7BsG,QAAQ,YALV,aEbQ,kBAAC,IAAD,CAAOoG,KAAK,UAAUC,OAAK,EAACC,UHnBS,WAEnD,OACE,yBAAK1I,UAAWT,KAAOW,cAAY,cACjC,gDGgBU,kBAAC,IAAD,KAAO,kBAAC,IAAD,CAAU+I,GAAG,sBAQlCC,SAASC,eAAe,S1BsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhG,GACL1G,QAAQ0G,MAAMA,EAAMhB,c","file":"static/js/main.34cc7f69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/guy-fawkes-thanks.0609f8d3.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.38e575e9.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum RegisterStage {\r\n  'STEP1' = 1,\r\n  'STEP2' = 2,\r\n  'STEP3' = 3,\r\n  'STEP4' = 4,\r\n  'IMPORT',\r\n} ","\r\nimport { createAction as create } from 'typesafe-actions';\r\n\r\nexport const registerActions = {\r\n  stepBack: create('@register/stepBack')<void>(),\r\n\r\n  startRegisterAccount: create('@register/startRegisterAccount')<void>(),\r\n  generateSeed: create('@register/generateSeed')<void>(),\r\n  submitSeed: create('@register/submitSeed')<void>(),\r\n  confirmSeed: create('@register/confirmSeed')<void>(),\r\n  finishRegister: create('@register/register')<{ password: string }>(),\r\n\r\n  startImportAccount: create('@register/startImportAccount')<void>(),\r\n  finishImportAccount: create('@register/importAccount')<{ seed: string[], password: string }>(),\r\n};\r\n","import storage from 'redux-persist/lib/storage';\r\nimport { PersistConfig } from 'redux-persist/es/types';\r\nimport { createBrowserHistory, History } from 'history';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\r\nimport { persistStore, persistReducer, createMigrate } from 'redux-persist';\r\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\n\r\nimport { registerReducer } from 'register/state/register.reducer';\r\nimport { registerEpics } from 'register/state/register.epics';\r\n\r\nimport { stateMigrations } from 'state-migrations';\r\n\r\n//#region Setup Devtools \r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: <R>(a: R) => R;\r\n  }\r\n}\r\n\r\nconst devToolsCompose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\n\r\nconst composeEnhancers = devToolsCompose || compose;\r\n//#endregion\r\n\r\n//#region Setup Epics\r\nconst epicMiddleware = createEpicMiddleware();\r\n\r\nconst rootEpic = combineEpics(\r\n  registerEpics,\r\n  // walletPageEpics,\r\n  // alertsEpics,\r\n  // notificationsEpics,\r\n);\r\n//#endregion \r\n\r\n//#region Setup Reducers\r\nexport type RootState = NonNullable<\r\n  Parameters<ReturnType<typeof createRootReducer>>[0]\r\n>;\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nexport const createRootReducer = (history: History) =>\r\n  combineReducers({\r\n    register: registerReducer,\r\n    // walletPage: walletPageReducer,\r\n    router: connectRouter(history),\r\n    // shared: combineReducers({\r\n    //   // alerts: alertsReducer,\r\n    //   // notifications: notificationsReducer,\r\n    //   // menuBar: menuBarReducer,\r\n    // })\r\n  });\r\n//#endregion\r\n\r\n//#region Setup Persisted Store\r\nconst persistConfig: PersistConfig<RootState> = {\r\n  key: 'root',\r\n  version: 0,\r\n  storage,\r\n  migrate: createMigrate(stateMigrations, { debug: false }),\r\n  whitelist: ['registerPage'],\r\n};\r\n\r\nconst persistedReducer = persistReducer(\r\n  persistConfig,\r\n  createRootReducer(history),\r\n);\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  composeEnhancers(applyMiddleware(epicMiddleware, routerMiddleware(history))),\r\n);\r\n\r\nexport const persistedStore = persistStore(store);\r\n//#endregion\r\n\r\nepicMiddleware.run(rootEpic);","const { randomBytes } = require(\"crypto\");\r\nconst { Mnemonic } = require(\"wallet.ts\");\r\n\r\nexport const generateSeed = () => {\r\n  return (Mnemonic.generate(randomBytes(32)).words as string[])\r\n    .reduce((accu: string[], value: string): string[] => {\r\n      if (accu.length < 12 && !accu.includes(value)) {\r\n        accu.push(value);\r\n      }\r\n\r\n      return accu;\r\n    }, []);\r\n}","import { ActionType, createReducer } from 'typesafe-actions';\r\n\r\nimport { registerActions as actions } from 'register/state/register.actions';\r\nimport { RegisterStage } from './models/register-stage';\r\nimport { generateSeed } from './helpers/seed.helper';\r\nimport { getPreviousStage } from './helpers/stage.helper';\r\n\r\nexport interface RegisterState {\r\n  stage: RegisterStage | undefined;\r\n  seed: string[];\r\n  seedConfirmed: boolean;\r\n  showSteps: boolean;\r\n}\r\n\r\nexport const initialRegisterState: RegisterState = {\r\n  stage: undefined,\r\n  seed: [],\r\n  seedConfirmed: false,\r\n  showSteps: false,\r\n};\r\n\r\nexport const registerReducer = createReducer<\r\n  RegisterState,\r\n  ActionType<typeof actions>\r\n>(initialRegisterState)\r\n  .handleAction(actions.stepBack, state => ({\r\n    ...state,\r\n    ...getPreviousStage(state),\r\n  }))\r\n  .handleAction(actions.startRegisterAccount, state => ({\r\n    ...state,\r\n    showSteps: true,\r\n    stage: RegisterStage.STEP1,\r\n  }))\r\n  .handleAction(actions.generateSeed, state => ({\r\n    ...state,\r\n    seed: generateSeed(),\r\n    seedConfirmed: false,\r\n    stage: RegisterStage.STEP2,\r\n  }))\r\n  .handleAction(actions.submitSeed, state => ({\r\n    ...state,\r\n    seedConfirmed: false,\r\n    stage: RegisterStage.STEP3,\r\n  }))\r\n  .handleAction(actions.confirmSeed, state => ({\r\n    ...state,\r\n    seedConfirmed: true,\r\n    stage: RegisterStage.STEP4,\r\n  }))\r\n  .handleAction(actions.finishRegister, (state, password) => ({\r\n    ...state,\r\n    showSteps: false,\r\n    stage: undefined,\r\n  }))\r\n  .handleAction(actions.startImportAccount, state => ({\r\n    ...state,\r\n    hideSteps: true,\r\n    stage: RegisterStage.IMPORT,\r\n  }));\r\n\r\n","import { RegisterStage } from \"register/state/models/register-stage\";\r\nimport { RegisterState } from \"../register.reducer\";\r\n\r\ninterface registerStageStateSlice {\r\n  stage: RegisterStage | undefined;\r\n  showSteps: boolean;\r\n  seed: string[];\r\n}\r\n\r\nexport const getPreviousStage = (state: RegisterState): registerStageStateSlice => {\r\n  if (state.stage === RegisterStage.IMPORT) {\r\n    return {\r\n      stage: undefined,\r\n      showSteps: false,\r\n      seed: [],\r\n    }\r\n  }\r\n\r\n  return {\r\n    stage: state.stage === RegisterStage.STEP1 ? undefined : Number(state.stage) - 1,\r\n    showSteps: [1, undefined].includes(state.stage) ? false : true,\r\n    seed: state.stage === RegisterStage.STEP2 ? [] : state.seed,\r\n  }\r\n} ","import { pipe } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { ActionCreator, isActionOf } from 'typesafe-actions';\r\n\r\n/**\r\n * @todo check this operator, because it swallow\r\n * action payload type when used for single action\r\n */\r\nexport const filterActions = <T extends string>(\r\n  ...actionCreators: ActionCreator<T>[]\r\n) => {\r\n  const isOneAction = actionCreators.length === 1;\r\n  const argument = isOneAction ? actionCreators[0] : actionCreators;\r\n  return pipe(filter(isActionOf(argument)));\r\n};\r\n","import { Observable } from \"rxjs\";\r\nimport { ActionType } from 'typesafe-actions';\r\nimport { Epic, combineEpics } from \"redux-observable\";\r\nimport { tap, ignoreElements } from 'rxjs/operators';\r\n\r\nimport { registerActions } from \"register/state/register.actions\";\r\n\r\nimport { filterActions } from 'common/operators/filter-actions.operator';\r\n\r\nimport { RootState } from \"state\";\r\n\r\ntype Actions = ActionType<typeof registerActions>;\r\n\r\nconst finishImportAccount$: Epic = (\r\n  action$: Observable<Actions>,\r\n  state$: Observable<RootState>,\r\n) =>\r\n  action$.pipe(\r\n    filterActions(registerActions.finishImportAccount),\r\n    tap(payload => {\r\n      console.log(payload);\r\n    }),\r\n    ignoreElements(),\r\n  );\r\n\r\nconst finishRegister$: Epic = (\r\n  action$: Observable<Actions>,\r\n  state$: Observable<RootState>,\r\n) =>\r\n  action$.pipe(\r\n    filterActions(registerActions.finishRegister),\r\n    tap(payload => {\r\n      console.log(payload);\r\n    }),\r\n    ignoreElements(),\r\n  );\r\n\r\nexport const registerEpics: Epic = combineEpics(\r\n  finishImportAccount$,\r\n  finishRegister$,\r\n)","import { RootState } from \"state\";\r\n\r\n// @todo check maybe it is possible to get rid of any.\r\nexport const stateMigrations = {\r\n  0: (state: any): any => {\r\n    const newState: RootState = {\r\n      ...state,\r\n    };\r\n\r\n    return {\r\n      ...newState,\r\n    };\r\n  },\r\n};\r\n","export const testIdBuilder = (baseName: string) => (...names: string[]) =>\r\n  names.reduce((prev, curr) => `${prev}-${curr}`, baseName);\r\n","import React from 'react';\r\nimport { cn } from '@bem-react/classname';\r\n\r\nimport './SeedTag.scss';\r\n\r\nimport { testIdBuilder } from 'common/helpers/test/test-id-builder.helper';\r\nimport { shuffleString } from 'common/util/shuffle';\r\n\r\nexport const componentId = 'SeedTag';\r\n\r\nconst css = cn(componentId);\r\nconst test = testIdBuilder(componentId);\r\n\r\nexport interface SeedTagProps {\r\n  text: string;\r\n  number: number;\r\n  hidden?: boolean;\r\n  hideNumber?: boolean;\r\n  onClick?: (number: number) => void;\r\n}\r\n\r\nexport const SeedTag: React.FC<SeedTagProps> = ({ text, number, hidden, hideNumber, onClick }) => {\r\n\r\n  const clickHandler = () => onClick && !hidden ? onClick(number) : null;\r\n\r\n  return (\r\n    <div className={css({ Placeholder: hidden })} data-testid={test()} onClick={clickHandler}>\r\n      { hidden || hideNumber ? null :\r\n        <div className={css('Number')}>\r\n          {number + 1}\r\n        </div>\r\n      }\r\n\r\n      <div className={css('Text')}>\r\n        {hidden ? shuffleString(text) : text}\r\n      </div>\r\n    </div>\r\n  )\r\n};","export const shuffleString = (str: string): string =>\r\n  str.split('').sort(() => 0.5 - Math.random()).join('');\r\n\r\nexport const shuffleArray = (arr: string[]): string[] =>\r\n  arr.sort(() => 0.5 - Math.random());","import { cn } from '@bem-react/classname';\r\nimport { Paper } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport './SeedPanel.scss';\r\n\r\nimport { testIdBuilder } from 'common/helpers/test/test-id-builder.helper';\r\nimport { shuffleArray } from 'common/util/shuffle';\r\n\r\nimport { SeedTag } from 'register/components/SeedTag/SeedTag';\r\n\r\nexport const componentId = 'SeedPanel';\r\n\r\nconst css = cn(componentId);\r\nconst test = testIdBuilder(componentId);\r\n\r\nexport interface SeedPanelProps {\r\n  seed: string[];\r\n  check?: boolean;\r\n  onCheck?: (checked: boolean) => void;\r\n}\r\n\r\nexport const SeedPanel: React.FC<SeedPanelProps> = ({ seed, check, onCheck }) => {\r\n  const [confirmedSeed, setConfirmedSeed] = useState([] as string[]);\r\n  const [success, setSuccess] = useState(false);\r\n  const [shuffledSeed, setShuffledSeed] = useState([] as string[]);\r\n\r\n  useEffect(() => {\r\n    if (!shuffledSeed.length && check) {\r\n      setShuffledSeed(shuffleArray([...seed]))\r\n    }\r\n  }, [shuffledSeed.length, check, seed]);\r\n\r\n  useEffect(() => {\r\n    const same = JSON.stringify(seed) === JSON.stringify(confirmedSeed)\r\n    setSuccess(same);\r\n    if (onCheck) {\r\n      onCheck(same);\r\n    }\r\n  }, [success, confirmedSeed, seed, onCheck])\r\n\r\n  const bodyTagClickHandler = (index: number) => {\r\n    confirmedSeed.splice(index, 1);\r\n    setConfirmedSeed([...confirmedSeed]);\r\n    setSuccess(false);\r\n  };\r\n  const footerTagClickHandler = (index: number) => {\r\n    setConfirmedSeed([...confirmedSeed, seed[index]]);\r\n  };\r\n\r\n  return (\r\n    <Paper className={css()} data-testid={test()}>\r\n      <div className={css('Body')} data-testid={test('Body')}>\r\n        {check ?\r\n          confirmedSeed.map((tag: string, index: number) => (\r\n            <SeedTag text={tag} number={index} key={index} onClick={bodyTagClickHandler} />\r\n          ))\r\n          :\r\n          seed.map((tag: string, index: number) => (\r\n            <SeedTag text={tag} number={index} key={index} />\r\n          ))\r\n        }\r\n      </div>\r\n\r\n      <div className={css('Footer')} data-testid={test('Footer')}>\r\n        {check ?\r\n          shuffledSeed.map((tag: string, index: number) => (\r\n            <SeedTag\r\n              text={tag}\r\n              number={seed.findIndex(str => str === tag)}\r\n              hidden={confirmedSeed.includes(tag)}\r\n              hideNumber\r\n              key={seed.findIndex(str => str === tag)}\r\n              onClick={footerTagClickHandler}\r\n            />\r\n          )) : null}\r\n        {confirmedSeed.length === seed.length && !success ?\r\n          <div className={css('Warning')} data-testid={test('Warning')}>\r\n            The phrases do not match!\r\n          </div>\r\n          : null}\r\n      </div>\r\n    </Paper >\r\n  )\r\n};\r\n","import React from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport './StepOne.scss';\r\n\r\nimport { testIdBuilder } from 'common/helpers/test/test-id-builder.helper';\r\n\r\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel';\r\n\r\nexport const componentId = 'StepOne';\r\n\r\nconst css = cn(componentId);\r\nconst test = testIdBuilder(componentId);\r\n\r\nexport interface StepOneProps {\r\n  onGenerate: () => void;\r\n}\r\n\r\nexport const StepOne: React.FC<StepOneProps> = ({ onGenerate }) => {\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <section>\r\n        <SeedPanel seed={[]} />\r\n\r\n        <p>\r\n          Your secret phrase consists of 12 words. Store it carefully.\r\n          If you loose it, you will loose access to all of your\r\n          associated wallets!\r\n       </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button')}\r\n        data-testid={test('GenerateButton')}\r\n        disableElevation\r\n        onClick={onGenerate}\r\n        variant=\"contained\"\r\n      >\r\n        Generate a secret phrase\r\n      </Button>\r\n    </div>\r\n  )\r\n};","import React from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport './StepTwo.scss';\r\n\r\nimport { testIdBuilder } from 'common/helpers/test/test-id-builder.helper';\r\n\r\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel';\r\n\r\nexport const componentId = 'StepTwo';\r\n\r\nconst css = cn(componentId);\r\nconst test = testIdBuilder(componentId);\r\n\r\ninterface StepTwoProps {\r\n  seed: string[];\r\n  onSubmit: () => void;\r\n}\r\n\r\nexport const StepTwo: React.FC<StepTwoProps> = ({ seed, onSubmit }) => {\r\n\r\n  return (\r\n    <div className={css()} data-testid=\"StepTwo\">\r\n      <section>\r\n        <SeedPanel seed={seed} />\r\n\r\n        <p>\r\n          By submiting, you confirm that you have stored the secret phrase\r\n          on paper or using another safe method.\r\n        </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button')}\r\n        data-testid={test('SubmitButton')}\r\n        disableElevation\r\n        onClick={onSubmit}\r\n        variant=\"contained\"\r\n      >\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  )\r\n};","import React, { useState } from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport './StepFour.scss';\r\n\r\nimport { testIdBuilder } from 'common/helpers/test/test-id-builder.helper';\r\nimport { Button, FormControl, FormHelperText, IconButton, Input, InputAdornment, InputLabel } from '@material-ui/core';\r\nimport { Close, Visibility, VisibilityOff } from '@material-ui/icons';\r\n\r\nexport const componentId = 'StepFour';\r\n\r\nconst css = cn(componentId);\r\nconst test = testIdBuilder(componentId);\r\n\r\nconst PasswordInputParams = {\r\n  required: \"Required\",\r\n  pattern: {\r\n    value: /^(?=.*?\\d)(?=.*?[a-zA-Z])[a-zA-Z\\d]+$/,\r\n    message: \"Use letters and numbers\"\r\n  },\r\n  minLength: {\r\n    value: 8,\r\n    message: \"Use at least 8 characters\"\r\n  }\r\n}\r\n\r\ninterface FormData {\r\n  password: string;\r\n  confirm: string;\r\n}\r\n\r\nexport interface StepFourProps {\r\n  onRegister: (data: { password: string }) => void;\r\n}\r\n\r\nexport const StepFour: React.FC<StepFourProps> = ({ onRegister }) => {\r\n  const { handleSubmit, register, reset, control, errors } = useForm<FormData>({ criteriaMode: \"all\" });\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [password, setPassword] = useState('');\r\n  const [passwordConfirm, setPasswordConfirm] = useState('');\r\n\r\n  const onSubmit = () => {\r\n    debugger;\r\n    handleSubmit(onRegister);\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <section>\r\n        <form onSubmit={onSubmit} className={css('Form')}>\r\n          <FormControl className={css('FormControl')} error={!!errors['password']}>\r\n            <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n\r\n            <Input id=\"password\"\r\n              className={css('Password')}\r\n              inputProps={{ 'data-testid': test('Password') }}\r\n              inputRef={register(PasswordInputParams)}\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={() => setPassword(control.getValues()['password'])}\r\n              type={showPassword ? 'text' : 'password'}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  {password ?\r\n                    <IconButton\r\n                      aria-label=\"empty password\"\r\n                      onClick={() => { reset({ password: undefined, confirm: control.getValues()['confirm'] }); setPassword(''); }}\r\n                      onMouseDown={(event) => event.preventDefault()}\r\n                    >\r\n                      <Close />\r\n                    </IconButton> : null\r\n                  }\r\n\r\n                  <IconButton\r\n                    aria-label=\"toggle visibility\"\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                    onMouseDown={(event) => event.preventDefault()}\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            />\r\n\r\n            {errors['password'] ?\r\n              <FormHelperText data-testid={test('PasswordError')}>{errors['password'].message}</FormHelperText>\r\n              : null\r\n            }\r\n          </FormControl>\r\n\r\n          <FormControl className={css('FormControl')} error={!!errors['confirm']}>\r\n            <InputLabel htmlFor=\"confirm\">Confirm password</InputLabel>\r\n\r\n            <Input id=\"confirm\"\r\n              className={css('Password')}\r\n              inputProps={{ 'data-testid': test('Confirm') }}\r\n              inputRef={register({\r\n                validate: value => value === control.getValues()['password']\r\n              })}\r\n              name=\"confirm\"\r\n              value={passwordConfirm}\r\n              onChange={() => setPasswordConfirm(control.getValues()['confirm'])}\r\n              type={showPassword ? 'text' : 'password'}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  {passwordConfirm ?\r\n                    <IconButton\r\n                      aria-label=\"empty confirmation\"\r\n                      onClick={() => { reset({ password: control.getValues()['password'], confirm: undefined }); setPasswordConfirm(''); }}\r\n                      onMouseDown={(event) => event.preventDefault()}\r\n                    >\r\n                      <Close />\r\n                    </IconButton> : null\r\n                  }\r\n\r\n                  <IconButton\r\n                    aria-label=\"toggle visibility\"\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                    onMouseDown={(event) => event.preventDefault()}\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            />\r\n\r\n            {errors['confirm'] ?\r\n              <FormHelperText data-testid={test('PasswordConfirmError')}>\r\n                Passwords do not match\r\n              </FormHelperText> : null\r\n            }\r\n          </FormControl>\r\n\r\n          <p>\r\n            Finally, please choose a password to be used\r\n            to export your account secret in the future.\r\n          </p>\r\n\r\n          <p>\r\n            <Button\r\n              color=\"primary\"\r\n              className={css('Button')}\r\n              data-testid={test('Submit')}\r\n              disableElevation\r\n              variant=\"contained\"\r\n              type=\"submit\"\r\n            >\r\n              Register\r\n            </Button>\r\n          </p>\r\n        </form>\r\n      </section>\r\n    </div>\r\n  )\r\n};\r\n","import * as React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { cn } from '@bem-react/classname';\r\n\r\nimport './Welcome.scss';\r\nimport guy from 'assets/images/guy-fawkes-thanks.png';\r\n\r\nimport { testIdBuilder } from 'common/helpers/test/test-id-builder.helper';\r\n\r\nexport const componentId = 'Welcome';\r\nexport interface WelcomeProps {\r\n  onCreate: () => void;\r\n  onImport: () => void;\r\n  onAbout: () => void;\r\n}\r\n\r\nconst css = cn(componentId);\r\nconst test = testIdBuilder(componentId);\r\n\r\nexport const Welcome: React.FC<WelcomeProps> = ({ onCreate, onImport, onAbout }) => {\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <section>\r\n        <img src={guy} className={css('Logo')} data-testid={test('Logo')} alt=\"logo\" />\r\n\r\n        <h1 className={css('Greeting')} data-testid={test('Greeting')} >\r\n          Welcome to ZeroPool\r\n        </h1>\r\n\r\n        <p className={css('Description')} data-testid={test('Description')}>\r\n          Please create an account or import an existing one using a secret phrase\r\n        </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button')}\r\n        data-testid={test('CreateButton')}\r\n        disableElevation\r\n        onClick={onCreate}\r\n        variant=\"contained\"\r\n      >\r\n        Create new account\r\n      </Button>\r\n\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        className={css('Button')}\r\n        data-testid={test('ImportButton')}\r\n        onClick={onImport}\r\n      >\r\n        Import existed\r\n      </Button>\r\n\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        className={css('Button')}\r\n        data-testid={test('AboutButton')}\r\n        onClick={onAbout}\r\n      >\r\n        About zeropool\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport './StepThree.scss';\r\n\r\nimport { testIdBuilder } from 'common/helpers/test/test-id-builder.helper';\r\n\r\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel';\r\n\r\nexport const componentId = 'StepThree';\r\n\r\nconst css = cn(componentId);\r\nconst test = testIdBuilder(componentId);\r\n\r\nexport interface StepThreeProps {\r\n  seed: string[];\r\n  onConfirm: () => void;\r\n}\r\nexport const StepThree: React.FC<StepThreeProps> = ({ seed, onConfirm }) => {\r\n  const [buttonDisabled, setButtonDisabled] = useState(true);\r\n\r\n  return (\r\n    <div className={css()} data-testid=\"StepThree\">\r\n      <section>\r\n        <SeedPanel seed={seed} check onCheck={(success: boolean) => setButtonDisabled(!success)} />\r\n\r\n        <p>\r\n          Please confirm your secret phrase.\r\n          We want to be sure that you saved it correctly.\r\n        </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button', { Disabled: buttonDisabled })}\r\n        data-testid={test('ConfirmButton')}\r\n        disabled={buttonDisabled}\r\n        disableElevation\r\n        onClick={onConfirm}\r\n        variant=\"contained\"\r\n      >\r\n        Confirm\r\n      </Button>\r\n    </div>\r\n  )\r\n};","import React from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport { ArrowBack } from '@material-ui/icons';\r\nimport { Button, MobileStepper, Tooltip } from '@material-ui/core';\r\n\r\nimport './StepHeader.scss';\r\n\r\nimport { testIdBuilder } from 'common/helpers/test/test-id-builder.helper';\r\n\r\nexport const componentId = 'StepHeader';\r\n\r\nconst css = cn(componentId);\r\nconst test = testIdBuilder(componentId);\r\n\r\nexport interface StepHeaderProps {\r\n  step: number;\r\n  total: number;\r\n  onBack: () => void;\r\n}\r\n\r\nexport const StepHeader: React.FC<StepHeaderProps> = ({ step, total, onBack }) => {\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <Tooltip title=\"Step back\" placement=\"top-end\">\r\n        <Button\r\n          className={css('Button')}\r\n          data-testid={test('BackButton')}\r\n          onClick={onBack}\r\n          disableRipple\r\n        >\r\n          <ArrowBack className={css('Icon')} />\r\n        </Button>\r\n      </Tooltip>\r\n\r\n      <p className={css('Text')} data-testid={test('Text')}>\r\n        Step {step} of {total}\r\n      </p>\r\n\r\n      <MobileStepper\r\n        className={css('Progress')}\r\n        variant=\"progress\"\r\n        steps={total + 1}\r\n        position=\"static\"\r\n        activeStep={step - 1}\r\n        backButton={<span className=\"hidden\">back</span>}\r\n        nextButton={<span className=\"hidden\">next</span>}\r\n      />\r\n    </div>\r\n  )\r\n};","import React from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport './ImportAccount.scss';\r\n\r\nimport { testIdBuilder } from 'common/helpers/test/test-id-builder.helper';\r\n\r\nexport const componentId = 'ImportAccount';\r\n\r\nconst css = cn(componentId);\r\nconst test = testIdBuilder(componentId);\r\n\r\nexport interface ImportAccountProps {\r\n  onBack: () => void;\r\n  onImport: (data: { seed: string[], password: string }) => void;\r\n}\r\n\r\nexport const ImportAccount: React.FC<ImportAccountProps> = ({ onBack, onImport }) => {\r\n  let seed: string[] = [];\r\n  let password = '';\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <section>\r\n        <h1> ImportAccount </h1>\r\n      </section>\r\n      <Button\r\n        color=\"primary\"\r\n        data-testid={test('ImportButton')}\r\n        disableElevation\r\n        onClick={() => onImport({ seed, password })}\r\n        variant=\"contained\"\r\n      >\r\n        Import\r\n      </Button>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        data-testid={test('BackButton')}\r\n        disableElevation\r\n        onClick={onBack}\r\n        variant=\"outlined\"\r\n      >\r\n        Back\r\n      </Button>\r\n    </div >\r\n  )\r\n};","import { createSelector } from \"reselect\";\r\n\r\nimport { RootState } from \"state\";\r\n\r\nexport const getRegisterState = (state: RootState) => state.register;\r\n\r\nexport const getRegisterStage = createSelector(\r\n  getRegisterState,\r\n  state => state.stage,\r\n);\r\n\r\nexport const getRegisterSeed = createSelector(\r\n  getRegisterState,\r\n  state => state.seed,\r\n);\r\n\r\nexport const getRegisterSeedConfirmed = createSelector(\r\n  getRegisterState,\r\n  state => state.seedConfirmed,\r\n);\r\n\r\nexport const getShowSteps = createSelector(\r\n  getRegisterState,\r\n  state => state.showSteps,\r\n);","import React from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport { push } from 'connected-react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './CreateAccountPage.scss';\r\n\r\nimport { testIdBuilder } from 'common/helpers/test/test-id-builder.helper';\r\n\r\nimport { StepOne } from 'register/components/StepOne/StepOne';\r\nimport { StepTwo } from 'register/components/StepTwo/StepTwo';\r\nimport { StepFour } from 'register/components/StepFour/StepFour';\r\nimport { Welcome } from 'register/components/Welcome/Welcome';\r\nimport { StepThree } from 'register/components/StepThree/StepThree';\r\nimport { StepHeader } from 'register/components/StepHeader/StepHeader';\r\nimport { ImportAccount } from 'register/components/ImportAccount/ImportAccount';\r\nimport { RegisterStage } from 'register/state/models/register-stage';\r\nimport { registerActions as actions } from 'register/state/register.actions';\r\nimport { getRegisterSeed, getRegisterStage, getShowSteps } from 'register/state/register.selectors';\r\n\r\nexport const componentId = 'CreateAccountPage';\r\n\r\nconst css = cn(componentId);\r\nconst test = testIdBuilder(componentId);\r\n\r\ninterface CreateAccountProps { }\r\n\r\nexport const CreateAccountPage: React.FC<CreateAccountProps> = () => {\r\n  const stage = useSelector(getRegisterStage);\r\n  const seed = useSelector(getRegisterSeed);\r\n  const showSteps = useSelector(getShowSteps);\r\n  const dispatch = useDispatch();\r\n\r\n  const components = () => {\r\n    switch (stage) {\r\n      case RegisterStage.STEP1:\r\n        return <StepOne onGenerate={() => dispatch(actions.generateSeed())} />\r\n      case RegisterStage.STEP2:\r\n        return <StepTwo seed={seed} onSubmit={() => dispatch(actions.submitSeed())} />\r\n      case RegisterStage.STEP3:\r\n        return <StepThree seed={seed} onConfirm={() => dispatch(actions.confirmSeed())} />\r\n      case RegisterStage.STEP4:\r\n        return <StepFour onRegister={(data: { password: string }) => dispatch(actions.finishRegister(data))} />\r\n      case RegisterStage.IMPORT:\r\n        return <ImportAccount\r\n          onImport={(data: { seed: string[], password: string }) => dispatch(actions.finishImportAccount(data))}\r\n          onBack={() => dispatch(actions.stepBack())} />\r\n      default:\r\n        return <Welcome\r\n          onCreate={() => dispatch(actions.startRegisterAccount())}\r\n          onImport={() => dispatch(actions.startImportAccount())}\r\n          onAbout={() => dispatch(push('/about'))}\r\n        />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {(stage && showSteps) ? <StepHeader step={stage} total={4} onBack={() => dispatch(actions.stepBack())} /> : null}\r\n      {components()}\r\n    </div>\r\n  )\r\n};","import React from 'react';\r\nimport { cn } from '@bem-react/classname';\r\n\r\nimport './WalletPage.scss';\r\n\r\nconst css = cn('WalletPage');\r\n\r\ninterface WalletPageProps { }\r\n\r\nexport const WalletPage: React.FC<WalletPageProps> = () => {\r\n\r\n  return (\r\n    <div className={css()} data-testid=\"WalletPage\">\r\n      <h1> WalletPage </h1>\r\n    </div>\r\n  )\r\n};","import React from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport { push } from 'connected-react-router';\r\nimport { Button } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport './AboutPage.scss';\r\nimport logo from 'assets/logo.svg';\r\n\r\nimport { testIdBuilder } from 'common/helpers/test/test-id-builder.helper';\r\n\r\nexport const componentId = 'AboutPage';\r\n\r\nconst css = cn(componentId);\r\nconst test = testIdBuilder(componentId);\r\n\r\ninterface AboutPageProps { }\r\n\r\nexport const AboutPage: React.FC<AboutPageProps> = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className={css()} data-testid=\"AboutPage\">\r\n      <img src={logo} className={css('Logo')} data-testid={test('Logo')} alt=\"logo\" />\r\n\r\n      <h1 className={css('Header')}> WHAT IS ZEROPOOL </h1>\r\n\r\n      <p className={css('Text')}>\r\n        ZeroPool is fully private multi-blokchain solution.\r\n        Low transaction fees, atomic swaps and common anonymity set.\r\n        Balances and transaction graph are hidden and compatibility\r\n        with network identity hiding technologies, like Tor.\r\n        You can deposit, transfer and withdraw tokens in our product.\r\n      </p>\r\n\r\n      <p className={css('Text')}>\r\n        The projec was found at ethDenver by a group of reserchers\r\n        and still developed as product with strong scientific base.\r\n      </p>\r\n\r\n      <p className={css('Button')}>\r\n        <Button\r\n          color=\"primary\"\r\n          data-testid={test('BackButton')}\r\n          disableElevation\r\n          onClick={() => dispatch(push('/'))}\r\n          variant=\"outlined\"\r\n        >\r\n          Back\r\n        </Button>\r\n      </p>\r\n    </div>\r\n  )\r\n};\r\n","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    action: {\r\n      disabledBackground: 'set color of background here',\r\n      disabled: 'set color of text here'\r\n    }\r\n  },\r\n  typography: {\r\n    button: {\r\n      // fontSize: '1rem',\r\n    },\r\n  },\r\n  overrides: {\r\n    MuiButton: {\r\n      root: {\r\n        fontSize: '1rem',\r\n        fontFamily: '\"Exo 2\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n      },\r\n    },\r\n\r\n    MuiLinearProgress: {\r\n      colorPrimary: {\r\n        backgroundColor: '#eee',\r\n      }\r\n    }\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { Router, Route, Redirect, Switch } from 'react-router-dom';\r\n\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { store, history, persistedStore } from 'state';\r\n\r\nimport { CreateAccountPage } from 'register/containers/CreateAccount/CreateAccountPage';\r\nimport { WalletPage } from 'wallet/containers/WalletPage/WalletPage';\r\nimport { AboutPage } from 'about/components/AboutPage/AboutPage';\r\nimport { theme } from 'theme';\r\n\r\nReactDOM.render(\r\n  <ThemeProvider theme={theme}>\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <PersistGate persistor={persistedStore}>\r\n          <ConnectedRouter history={history}>\r\n            <Router history={history}>\r\n              <Switch>\r\n                <Route path=\"/wellcome\" exact component={CreateAccountPage} />\r\n                <Route path=\"/about\" exact component={AboutPage} />\r\n                <Route path=\"/wallet\" exact component={WalletPage} />\r\n                <Route><Redirect to=\"/wellcome\" /></Route>\r\n              </Switch>\r\n            </Router>\r\n          </ConnectedRouter>\r\n        </PersistGate>\r\n      </Provider>\r\n    </React.StrictMode>\r\n  </ThemeProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}