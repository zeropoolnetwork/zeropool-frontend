{"version":3,"sources":["serviceWorker.ts","shared/helpers/toast.helper.tsx","shared/models/provider.ts","register/state/models/register-stage.ts","shared/loading-bar/state/loading-bar.actions.ts","shared/http/http.ts","shared/loading-bar/state/loading-bar.selectors.ts","shared/loading-bar/containers/loading-bar/loading-bar.component.tsx","shared/helpers/test/test-id-builder.helper.ts","shared/components/AboutPage/AboutPage.tsx","shared/util/timeout.ts","register/state/register.actions.ts","register/state/helpers/stage.helper.ts","register/state/register.reducer.ts","register/state/helpers/seed.helper.ts","wallet/state/wallet.actions.ts","register/state/register.selectors.ts","register/state/register.epics.ts","state-migrations.ts","shared/util/from.ts","shared/util/round-number.ts","wallet/state/helpers/amounts.helper.ts","wallet/state/helpers/navigation.helper.ts","wallet/state/helpers/wallets.helper.ts","wallet/state/wallet.reducer.ts","shared/operators/handle-epic-error.operator.ts","shared/operators/filter-actions.operator.ts","wallet/state/wallet.selectors.ts","shared/util/waves-bug.ts","wallet/api/promice-error.handler.ts","shared/util/fix-timestamp.ts","wallet/api/es.api.ts","wallet/api/zeropool.api.ts","state.ts","shared/util/not-implemented.ts","wallet/api/rates.api.ts","shared/operators/get-payload.operator.ts","wallet/state/wallet.epics.ts","wallet/state/helpers/map-rates-to-tokens.ts","wallet/state/helpers/init-balances.helper.ts","wallet/state/helpers/update-balances.helper.ts","shared/loading-bar/state/loading-bar.reducer.ts","register/components/SeedTag/SeedTag.tsx","shared/util/shuffle.ts","register/components/SeedPanel/SeedPanel.tsx","register/components/StepOne/StepOne.tsx","register/components/StepTwo/StepTwo.tsx","register/components/Welcome/Welcome.tsx","register/components/StepFour/StepFour.tsx","register/components/StepThree/StepThree.tsx","register/components/Perl/Perl.tsx","register/components/StepHeader/StepHeader.tsx","register/components/ImportAccount/ImportAccount.tsx","register/containers/CreateAccount/CreateAccountPage.tsx","shared/components/HelpPage/HelpPage.tsx","shared/util/css-mod.ts","shared/util/cap-first-letter.ts","shared/components/RoundButton/RoundButton.tsx","shared/components/Icon/Icon.tsx","wallet/components/WalletHeader/WalletHeaderMode.tsx","wallet/components/ExpandButton/ExpandButton.tsx","wallet/components/WalletRow/WalletRow.tsx","wallet/components/EditWallet/EditWallet.tsx","wallet/components/DeleteWallet/DeleteWallet.tsx","wallet/components/Wallets/Wallets.tsx","wallet/components/SendConfirmation/SendConfirmation.tsx","wallet/components/WalletHeader/WalletHeader.tsx","shared/hooks/use-navigate-back.ts","wallet/state/helpers/total.helper.ts","wallet/components/TokenRow/TokenRow.tsx","wallet/components/Balance/Balance.tsx","wallet/components/Receive/Receive.tsx","shared/helpers/addres.helper.ts","shared/helpers/validators/eth.validator.ts","wallet/components/Send/Send.tsx","wallet/state/helpers/transaction.helper.ts","wallet/containers/Transactions/Transactions.tsx","wallet/containers/WalletPage/WalletPage.tsx","theme.ts","index.tsx","shared/http/interceptors/loading-bar.interceptor.ts","shared/http/interceptors/auth.interceptor.ts","assets/images/logo1.svg","wallet/state/models/wallet-view.ts","wallet/state/models/index.ts","assets/logo.svg","assets/images/guy_welcomes@2x.png"],"names":["Boolean","window","location","hostname","match","useSnackbarRef","Provider","InnerSnackbarUtilsConfigurator","props","setUseSnackbarRef","useSnackbar","useSnackbarRefProp","SnackbarUtilsConfigurator","success","msg","options","this","toast","variant","warning","info","error","enqueueSnackbar","RegisterStage","loadingBarActions","addRequest","create","removeRequest","instance","http","axios","getActiveRequestCount","createSelector","state","shared","loadingBar","requestsInProgress","showLoadingBar","activeRequests","css","cn","LoadingBar","useSelector","className","testIdBuilder","baseName","names","reduce","prev","curr","test","AboutPage","showBackButton","dispatch","useDispatch","data-testid","src","logo","alt","Button","color","onClick","push","timeout","delay","Promise","res","setTimeout","registerActions","stepBack","startRegisterAccount","generateSeed","submitSeed","confirmSeed","register","reset","startImportAccount","importAccount","initialRegisterState","stage","undefined","seed","seedConfirmed","showSteps","registerReducer","createReducer","handleAction","actions","IMPORT","STEP1","Number","includes","STEP2","getPreviousStage","generateMnemonic","split","STEP3","STEP4","password","walletActions","apiError","addWallet","addWalletSuccess","addWalletError","openBalanceView","openWalletsView","openTransactionsView","openReceiveView","openSendInitialView","prepareSendConfirmView","openSendConfirmView","initWallets","updateWallets","updateWalletsSuccess","updateWalletsError","getTransactions","getTransactionsSuccess","refreshAmounts","getRates","getRatesSuccess","getRatesError","headerBack","menu","edit","send","setSeed","setSeedSuccess","setSeedError","hideWallet","resetAccount","getRegisterState","getRegisterStage","getRegisterSeed","getShowSteps","registerEpics","combineEpics","action$","state$","pipe","filter","isActionOf","switchMap","action","payload","join","of","withLatestFrom","map","stateMigrations","0","newState","recordFromArray","array","id","obj","item","round","num","decimals","result","toFixed","parseInt","parseFloat","roundNumber","amountsHelper","getAmountsForAllTakens","tokens","wallets","amounts","symbol","token","amount","getAmountsForToken","accu","next","getAmountsForWallet","wallet","getAmounts","activeView","WalletView","Wallets","activeToken","Receive","Send","SendConfirmation","Transactions","activeWallet","supportedTokens","navigationHelper","previousView","Balance","walletsHelper","name","_wallet","lastValuableIndex","i","length","slice","findIndex","address","initialWalletState","pollSettings","account","offset","supported","supportedTokensRecord","transactions","usdRates","walletReducer","Reset","fee","handleEpicError","errorAction","catchError","caught","merge","message","filterActions","actionCreators","isOneAction","argument","getWalletState","getActiveView","getActiveToken","getWallets","getActiveWallet","getWalletsForActiveToken","getSupportedTokens","getSupportedTokensRecord","getUsdRates","getSendData","getSeed","getPollSettings","nearBug","err","promiceErrorHandler","mock","console","fixTimestamp","timestamp","getUrl","toTransaction","tr","hash","blockHash","status","value","from","to","timeStamp","getEthTransactions","mocked","resolve","mocks","ETH","fetch","then","val","clone","json","response","data","hdWallet","_history","getAllBalances","Error","getBalances","catch","getWalletBalance","walletId","coin","getCoin","balances","balance","fromBaseUnit","getNetworkFee","estimateTxFee","getWalletTransactions","getAddress","convertValues","initHDWallet","coins","HDWallet","devConfig","transfer","toBaseUnit","toString","log","transaction","notImplemented","RatesApi","proxy","cors","Marketcap","ratesMock","getPayload","nextWalletId","walletEpics","api","private","switchMapTo","rates","ratesMap","quote","USD","price","mapRatesToTokens","_seed","iif","tap","mergeMap","settings","tokenId","Object","entries","balanceDataIndex","balanceData","initBalances","promices","forEach","tokenWallets","walletPromises","getBalance","all","tokenIndex","walletIndex","updateBalances","ignoreElements","sendData","mapTo","loadingBarReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","rootEpic","history","createBrowserHistory","persistConfig","key","version","storage","migrate","createMigrate","debug","whitelist","persistedReducer","persistReducer","combineReducers","router","connectRouter","store","createStore","applyMiddleware","routerMiddleware","persistedStore","persistStore","run","SeedTag","text","hidden","hideNumber","Placeholder","sort","Math","random","SeedPanel","classes","check","onCheck","useState","confirmedSeed","setConfirmedSeed","setSuccess","shuffledSeed","setShuffledSeed","useEffect","same","JSON","stringify","bodyTagClickHandler","index","splice","footerTagClickHandler","Paper","tag","str","StepOne","onGenerate","StepTwo","onSubmit","Welcome","onCreate","onImport","onAbout","onMockedLogin","guy","disableElevation","PasswordInputParams","required","pattern","minLength","StepFour","onRegister","useForm","criteriaMode","handleSubmit","control","errors","showPassword","setShowPassword","setPassword","passwordConfirm","setPasswordConfirm","process","FormControl","InputLabel","htmlFor","Input","inputProps","inputRef","onChange","getValues","type","endAdornment","InputAdornment","position","IconButton","aria-label","confirm","onMouseDown","event","preventDefault","Close","Visibility","VisibilityOff","FormHelperText","validate","StepThree","onConfirm","buttonDisabled","setButtonDisabled","Disabled","disabled","Perl","isActive","Active","StepHeader","step","total","onBack","Tooltip","title","placement","disableRipple","ArrowBack","MobileStepper","steps","activeStep","backButton","nextButton","seedInputParamsFactory","validateMnemonic","validateSeed","ImportAccount","input","CreateAccountPage","components","style","margin","HelpPage","href","target","rel","cssMod","charAt","toUpperCase","RoundButton","label","labelPosition","NoLabel","disableFocusRipple","disableTouchRipple","children","component","memo","forwardRef","ref","icon","spaceOn","displayName","WalletHeaderMode","Icon","ExpandButton","expanded","click","Expended","WalletRow","rate","rollUp","onReceiveClick","onSendClick","onEditClick","onRollUpClick","onWalletNameClick","showButtons","setShowButtons","toBeOpened","setToBeOpened","Expanded","Hidden","EditWallet","walletName","onRename","onDelete","onCancel","newName","setNewName","TextField","DeleteWallet","confirmName","setConfirmName","handlers","rollUpSignal","setRollUpSignal","openEditDialog","setOpenEditDialog","openDeleteDialog","setOpenDeleteDialog","selectedWallet","setSelectedWallet","onReceive","onSend","onOpen","onAdd","Dialog","onClose","open","fullWidth","maxWidth","DialogContent","dividers","onConfirmClick","processing","setProcessing","noValidate","autoComplete","CircularProgress","axi","WalletHeader","mode","tokenAmount","tokenSymbol","fiatValue","hideBackButton","tokenName","onBackClick","callback","isInitialMount","useRef","current","addEventListener","pushState","document","URL","useNavigateBack","Info","displayType","thousandSeparator","suffix","decimalScale","t","hasOwnProperty","TokenRow","onSelectToken","tokensRecord","QRCode","require","navigator","clipboard","writeText","validateAddress","isEthereumAddress","beautifyAdress","limit","substring","onNextClick","setAddress","setAmount","amountValid","setAmountValid","handleAddressPaste","a","readText","Invalid","prefix","lastElement","arr","m","moment","reverse","currentTimestamp","lastTimestamp","isAfter","date","format","sorted","opened","setOpened","incoming","toLowerCase","toLocaleLowerCase","transactionHelper","e","day","Down","openHandler","j","Open","useStyles","makeStyles","theme","root","backgroundColor","flexGrow","flexDirection","display","height","minWidth","menuButton","marginRight","spacing","toolbar","alignItems","paddingTop","minHeight","paddingBottom","toolbarHeader","borderBottom","palette","grey","width","toolbarHeaderItems","justifyContent","toolbarHeaderItemsEdgeStart","marginLeft","toolbarBody","alignSelf","drower","drowerItem","paddingRight","drowerItemIcon","drowerItemText","wrapper","footer","bottom","zeroPaddingRight","WalletPage","setState","view","handleExportSeed","toggleDrawer","walletsButtonHandlers","walletHeaderMode","Help","About","walletHeaderLabels","AppBar","Toolbar","edgeStart","edge","Badge","badgeContent","values","actualView","SwipeableDrawer","role","onKeyDown","List","ListItem","button","ListItemIcon","ListItemText","primary","Divider","createMuiTheme","disabledBackground","main","overrides","MuiAppBar","colorPrimary","MuiButton","fontSize","fontFamily","outlinedPrimary","border","containedPrimary","MuiLinearProgress","barColorPrimary","MuiDialog","MuiInputLabel","MuiInput","colorSecondary","underline","borderBottomColor","ReactDOM","render","ThemeProvider","maxSnack","anchorOrigin","vertical","horizontal","loading","persistor","path","exact","getElementById","interceptors","request","use","context","noLoadingBar","loadingBarRequestInterceptor","provider","authHeaders","providers","authHeader","authValue","headers","config","loadingBarResponseInterceptor","loadingBarErrorResponseInterceptor","serviceWorker","ready","registration","unregister","start","module","exports"],"mappings":"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","file":"static/js/main.2c87badf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useSnackbar, WithSnackbarProps } from 'notistack'\r\n\r\ninterface IProps {\r\n  setUseSnackbarRef: (showSnackbar: WithSnackbarProps) => void\r\n}\r\n\r\ntype OptionsObject = {\r\n  [key: string]: string\r\n}\r\n\r\nconst InnerSnackbarUtilsConfigurator: React.FC<IProps> = (props: IProps) => {\r\n  props.setUseSnackbarRef(useSnackbar())\r\n  return null\r\n}\r\n\r\nlet useSnackbarRef: WithSnackbarProps\r\nconst setUseSnackbarRef = (useSnackbarRefProp: WithSnackbarProps) => {\r\n  useSnackbarRef = useSnackbarRefProp\r\n}\r\n\r\nexport const SnackbarUtilsConfigurator = () => {\r\n  return <InnerSnackbarUtilsConfigurator setUseSnackbarRef={setUseSnackbarRef} />\r\n}\r\n\r\nexport default {\r\n  success(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'success' })\r\n  },\r\n  warning(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'warning' })\r\n  },\r\n  info(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'info' })\r\n  },\r\n  error(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'error' })\r\n  },\r\n  toast(msg: string, options: OptionsObject = {}) {\r\n    useSnackbarRef.enqueueSnackbar(msg, options)\r\n  },\r\n}\r\n","export enum Provider {\r\n  Marketcap = 'Marketcap',\r\n}\r\n","export enum RegisterStage {\r\n  'STEP1' = 1,\r\n  'STEP2',\r\n  'STEP3',\r\n  'STEP4',\r\n  'IMPORT',\r\n}\r\n","import { createAction as create } from 'typesafe-actions'\r\n\r\nexport const loadingBarActions = {\r\n  addRequest: create('@loadingBar/addRequest')<void>(),\r\n  removeRequest: create('@loadingBar/removeRequest')<void>(),\r\n}\r\n","import { Store } from 'redux'\r\nimport axios, { Axios } from 'axios-observable'\r\nimport { AxiosRequestConfig } from 'axios'\r\n\r\nimport { authInterceptor } from 'shared/http/interceptors/auth.interceptor'\r\nimport { RootState } from 'state'\r\nimport { Provider } from 'shared/models/provider'\r\nimport {\r\n  loadingBarErrorResponseInterceptor,\r\n  loadingBarRequestInterceptor,\r\n  loadingBarResponseInterceptor,\r\n} from 'shared/http/interceptors/loading-bar.interceptor'\r\n\r\nlet instance: Axios | null = null\r\n\r\nexport interface RequestConfig extends AxiosRequestConfig {\r\n  context?: {\r\n    noBasicHeaders?: boolean\r\n    noLoadingBar?: boolean\r\n    provider?: Provider\r\n  }\r\n}\r\n\r\nexport const setupInterceptors = (axi: Axios, store: Store<RootState>): void => {\r\n  axi.interceptors.request.use(loadingBarRequestInterceptor(store))\r\n  axi.interceptors.request.use(authInterceptor(store))\r\n\r\n  axi.interceptors.response.use(\r\n    loadingBarResponseInterceptor(store),\r\n    loadingBarErrorResponseInterceptor(store)\r\n  )\r\n}\r\n\r\nexport const http = (): Axios => {\r\n  if (!instance) {\r\n    instance = axios.create({})\r\n  }\r\n\r\n  return instance\r\n}\r\n","import { createSelector } from 'reselect'\r\n\r\nimport { RootState } from 'state'\r\n\r\nconst getLoadingBarState = (state: RootState) => state.shared.loadingBar\r\n\r\nconst getActiveRequestCount = createSelector(\r\n  getLoadingBarState,\r\n  (state) => state.requestsInProgress\r\n)\r\n\r\nexport const showLoadingBar = createSelector(\r\n  getActiveRequestCount,\r\n  (activeRequests) => activeRequests > 0\r\n)\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport './loading-bar.component.scss'\r\n\r\nimport { showLoadingBar } from 'shared/loading-bar/state/loading-bar.selectors'\r\n\r\nconst css = cn('LoadingBar')\r\n\r\nexport const LoadingBar: React.FC = () => {\r\n  const show = useSelector(showLoadingBar)\r\n\r\n  return show ? (\r\n    <>\r\n      <div className={css()} />\r\n      <div className={css('SpinnerContainer')}>\r\n        <div className={css('Spinner')} />\r\n      </div>\r\n    </>\r\n  ) : null\r\n}\r\n","export const testIdBuilder = (baseName: string) => (...names: string[]) =>\r\n  names.reduce((prev, curr) => `${prev}-${curr}`, baseName)\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { push } from 'connected-react-router'\r\nimport { Button } from '@material-ui/core'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport './AboutPage.scss'\r\nimport logo from 'assets/logo.svg'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'AboutPage'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\ninterface AboutPageProps {\r\n  showBackButton: boolean\r\n}\r\n\r\nexport const AboutPage: React.FC<AboutPageProps> = ({ showBackButton = true }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <div className={css()} data-testid=\"AboutPage\">\r\n      <img src={logo} className={css('Logo')} data-testid={test('Logo')} alt=\"logo\" />\r\n\r\n      <h1 className={css('Header')}> WHAT IS ZEROPOOL </h1>\r\n\r\n      <p className={css('Text')}>\r\n        ZeroPool is fully private multi-blokchain solution. Low transaction fees, atomic swaps and\r\n        common anonymity set. Balances and transaction graph are hidden and compatibility with\r\n        network identity hiding technologies, like Tor. You can deposit, transfer and withdraw\r\n        tokens in our product.\r\n      </p>\r\n\r\n      <p className={css('Text')}>\r\n        The projec was found at ethDenver by a group of reserchers and still developed as product\r\n        with strong scientific base.\r\n      </p>\r\n\r\n      {showBackButton ? (\r\n        <p className={css('Button')}>\r\n          <Button\r\n            color=\"primary\"\r\n            data-testid={test('BackButton')}\r\n            onClick={() => dispatch(push('/'))}\r\n            variant=\"contained\"\r\n          >\r\n            Back\r\n          </Button>\r\n        </p>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","export const timeout = (delay: number) => new Promise((res) => setTimeout(res, delay))\r\n","import { createAction as create } from 'typesafe-actions'\r\n\r\nexport const registerActions = {\r\n  stepBack: create('@register/stepBack')<void>(),\r\n\r\n  startRegisterAccount: create('@register/startRegisterAccount')<void>(),\r\n  generateSeed: create('@register/generateSeed')<void>(),\r\n  submitSeed: create('@register/submitSeed')<void>(),\r\n  confirmSeed: create('@register/confirmSeed')<void>(),\r\n  register: create('@register/register')<string>(),\r\n  reset: create('@register/reset')<void>(),\r\n\r\n  startImportAccount: create('@register/startImportAccount')<void>(),\r\n  importAccount: create('@register/importAccount')<{\r\n    seed: string[]\r\n    password: string\r\n  }>(),\r\n}\r\n","import { RegisterStage } from 'register/state/models/register-stage'\r\nimport { RegisterState } from 'register/state/register.reducer'\r\n\r\ntype RegisterStageStateSlice = {\r\n  stage: RegisterStage | undefined\r\n  showSteps: boolean\r\n  seed: string[]\r\n}\r\n\r\nexport const getPreviousStage = (state: RegisterState): RegisterStageStateSlice => {\r\n  if (state.stage === RegisterStage.IMPORT) {\r\n    return {\r\n      stage: undefined,\r\n      showSteps: false,\r\n      seed: [],\r\n    }\r\n  }\r\n\r\n  return {\r\n    stage: state.stage === RegisterStage.STEP1 ? undefined : Number(state.stage) - 1,\r\n    showSteps: [1, undefined].includes(state.stage) ? false : true,\r\n    seed: state.stage === RegisterStage.STEP2 ? [] : state.seed,\r\n  }\r\n}\r\n","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport { registerActions as actions } from 'register/state/register.actions'\r\nimport { getPreviousStage } from 'register/state/helpers/stage.helper'\r\nimport { RegisterStage } from 'register/state/models/register-stage'\r\nimport { generateSeed } from 'register/state/helpers/seed.helper'\r\n\r\nexport interface RegisterState {\r\n  stage: RegisterStage | undefined\r\n  seed: string[]\r\n  seedConfirmed: boolean\r\n  showSteps: boolean\r\n}\r\n\r\nexport const initialRegisterState: RegisterState = {\r\n  stage: undefined,\r\n  seed: [],\r\n  seedConfirmed: false,\r\n  showSteps: false,\r\n}\r\n\r\nexport const registerReducer = createReducer<RegisterState, ActionType<typeof actions>>(\r\n  initialRegisterState\r\n)\r\n  .handleAction(actions.stepBack, (state) => ({\r\n    ...state,\r\n    ...getPreviousStage(state),\r\n  }))\r\n  .handleAction(actions.startRegisterAccount, (state) => ({\r\n    ...state,\r\n    showSteps: true,\r\n    stage: RegisterStage.STEP1,\r\n  }))\r\n  .handleAction(actions.generateSeed, (state) => ({\r\n    ...state,\r\n    seed: generateSeed(),\r\n    seedConfirmed: false,\r\n    stage: RegisterStage.STEP2,\r\n  }))\r\n  .handleAction(actions.submitSeed, (state) => ({\r\n    ...state,\r\n    seedConfirmed: false,\r\n    stage: RegisterStage.STEP3,\r\n  }))\r\n  .handleAction(actions.confirmSeed, (state) => ({\r\n    ...state,\r\n    seedConfirmed: true,\r\n    stage: RegisterStage.STEP4,\r\n  }))\r\n  .handleAction(actions.register, (state, password) => ({\r\n    ...state,\r\n    showSteps: false,\r\n    stage: undefined,\r\n  }))\r\n  .handleAction(actions.startImportAccount, (state) => ({\r\n    ...state,\r\n    showSteps: false,\r\n    stage: RegisterStage.IMPORT,\r\n  }))\r\n  .handleAction(actions.reset, () => ({\r\n    ...initialRegisterState,\r\n  }))\r\n  .handleAction(actions.importAccount, (state) => ({\r\n    ...state,\r\n    showSteps: false,\r\n    stage: undefined,\r\n  }))\r\n","import { generateMnemonic, validateMnemonic } from 'zeropool-api-js/lib/utils'\r\n\r\nexport const generateSeed = () => {\r\n  return generateMnemonic().split(' ')\r\n}\r\n\r\nexport const validateSeed = (seed: string[]): boolean => {\r\n  return validateMnemonic(seed.join(' '))\r\n}\r\n","import { createAction as create } from 'typesafe-actions'\r\n\r\nimport { Token, TokenName } from 'shared/models/token'\r\n\r\nimport { WalletView } from 'wallet/state/models/wallet-view'\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\nimport { WalletRecord } from './models'\r\nimport { Transaction } from 'zeropool-api-js/lib/coins/transaction'\r\n\r\nexport const walletActions = {\r\n  apiError: create('@wallet/apiError')<string>(),\r\n\r\n  addWallet: create('@wallet/addWallet')<void>(),\r\n  addWalletSuccess: create('@wallet/addWalletSuccess')<WalletRecord>(),\r\n  addWalletError: create('@wallet/addWalletError')<string>(),\r\n\r\n  openBalanceView: create('@wallet/openBalanceView')<void>(), // called on wallet first load\r\n  openWalletsView: create('@wallet/openWalletsView')<Token>(),\r\n  openTransactionsView: create('@wallet/openTransactionsView')<Wallet>(), // Transactions View\r\n  openReceiveView: create('@wallet/openReceiveView')<Wallet>(),\r\n  openSendInitialView: create('@wallet/openSendInitialView')<Wallet>(),\r\n  prepareSendConfirmView: create('@wallet/prepareSendConfirmView')<{\r\n    wallet: Wallet\r\n    address: string\r\n    amount: number\r\n  }>(),\r\n  openSendConfirmView: create('@wallet/openSendConfirmView')<{\r\n    wallet: Wallet\r\n    address: string\r\n    amount: number\r\n    fee: number\r\n  }>(),\r\n\r\n  initWallets: create('@wallet/initWallets')<void>(),\r\n  updateWallets: create('@wallet/updateWallets')<void>(),\r\n  updateWalletsSuccess: create('@wallet/updateWalletsSuccess')<WalletRecord>(),\r\n  updateWalletsError: create('@wallet/updateWalletsError')<string>(),\r\n\r\n  getTransactions: create('@wallet/getTransactions')<Wallet>(),\r\n  getTransactionsSuccess: create('@wallet/getTransactionsSussess')<Transaction[]>(),\r\n\r\n  refreshAmounts: create('@wallet/refreshAmounts')<void>(),\r\n\r\n  getRates: create('@wallet/getRates')<void>(),\r\n  getRatesSuccess: create('@wallet/getRatesSuccess')<Record<TokenName, number>>(),\r\n  getRatesError: create('@wallet/getRates')<string>(),\r\n\r\n  headerBack: create('@wallet/header/back')<void>(),\r\n\r\n  menu: create('@wallet/menu')<WalletView>(),\r\n  edit: create('@wallet/edit')<{ wallet: Wallet; name: string }>(),\r\n  send: create('@wallet/send')<void>(),\r\n\r\n  setSeed: create('@wallet/setSeed')<string>(),\r\n  setSeedSuccess: create('@wallet/setSeedSuccess')<void>(),\r\n  setSeedError: create('@wallet/setSeedError')<string>(),\r\n\r\n  hideWallet: create('@wallet/hideWallet')<Wallet>(),\r\n\r\n  resetAccount: create('@wallet/resetAccount')<void>(),\r\n}\r\n","import { createSelector } from 'reselect'\r\n\r\nimport { RootState } from 'state'\r\n\r\nexport const getRegisterState = (state: RootState) => state.register\r\n\r\nexport const getRegisterStage = createSelector(getRegisterState, (state) => state.stage)\r\n\r\nexport const getRegisterSeed = createSelector(getRegisterState, (state) => state.seed)\r\n\r\nexport const getRegisterSeedConfirmed = createSelector(\r\n  getRegisterState,\r\n  (state) => state.seedConfirmed\r\n)\r\n\r\nexport const getShowSteps = createSelector(getRegisterState, (state) => state.showSteps)\r\n","import { Observable, of } from 'rxjs'\r\nimport { Epic, combineEpics } from 'redux-observable'\r\nimport { ActionType, isActionOf } from 'typesafe-actions'\r\nimport { withLatestFrom, filter, map, switchMap } from 'rxjs/operators'\r\n\r\nimport { walletActions } from 'wallet/state/wallet.actions'\r\nimport { registerActions } from 'register/state/register.actions'\r\nimport { getRegisterSeed } from 'register/state/register.selectors'\r\n\r\nimport { RootState } from 'state'\r\n\r\ntype Actions = ActionType<typeof registerActions>\r\n\r\nconst importAccount$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(registerActions.importAccount)),\r\n    switchMap((action) => {\r\n      const seed = action.payload.seed.join(' ')\r\n      return of(registerActions.reset(), walletActions.setSeed(seed))\r\n    })\r\n  )\r\n\r\nconst register$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(registerActions.register)),\r\n    withLatestFrom(state$.pipe(map(getRegisterSeed))),\r\n    switchMap(([_action, seed]) => {\r\n      return of(registerActions.reset(), walletActions.setSeed(seed.join(' ')))\r\n    })\r\n  )\r\n\r\nexport const registerEpics: Epic = combineEpics(importAccount$, register$)\r\n","import { RootState } from 'state'\r\n\r\n// @todo check maybe it is possible to get rid of any.\r\nexport const stateMigrations = {\r\n  0: (state: any): any => {\r\n    const newState: RootState = {\r\n      ...state,\r\n    }\r\n\r\n    return {\r\n      ...newState,\r\n    }\r\n  },\r\n}\r\n","export const recordFromArray = <T>(array: T[], id: string = 'id'): Record<string, T> =>\r\n  array.reduce((obj, item) => {\r\n    obj[item[id]] = item\r\n    return obj\r\n  }, {})\r\n","export const roundNumber = (num: number, decimals: number) => {\r\n  const result = Number(num + '').toFixed(parseInt(decimals + '', undefined))\r\n\r\n  return parseFloat(result)\r\n}\r\n\r\nexport const round = (num: number) => roundNumber(num, 12)\r\n","import { Token, TokenSymbol } from 'shared/models/token'\r\nimport { round } from 'shared/util/round-number'\r\n\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\nimport { WalletView } from 'wallet/state/models'\r\nimport { WalletState } from 'wallet/state/wallet.reducer'\r\n\r\nexport const amountsHelper = {\r\n  getAmountsForAllTakens: (\r\n    tokens: Token[],\r\n    wallets: Record<TokenSymbol, Wallet[]> | null\r\n  ): Record<TokenSymbol, number> | null => {\r\n    if (!wallets) return null\r\n\r\n    const amounts: Record<TokenSymbol, number> = {}\r\n\r\n    for (const token of tokens) {\r\n      amounts[token.symbol] = 0\r\n    }\r\n\r\n    for (const token of tokens) {\r\n      let amount = 0\r\n\r\n      for (const wallet of wallets[token.symbol]) {\r\n        amount += wallet.amount\r\n      }\r\n\r\n      amounts[token.symbol] = round(amount)\r\n    }\r\n\r\n    return amounts\r\n  },\r\n\r\n  getAmountsForToken: (token: Token, wallets: Wallet[]): Record<TokenSymbol, number> => ({\r\n    [token.symbol]: round(wallets.reduce((accu, next) => (accu += next.amount), 0)),\r\n  }),\r\n\r\n  getAmountsForWallet: (wallet: Wallet | null): Record<TokenSymbol, number> => {\r\n    return wallet ? { [wallet.token.symbol]: wallet.amount } : {}\r\n  },\r\n\r\n  getAmounts: (state: WalletState) => {\r\n    switch (state.activeView) {\r\n      case WalletView.Wallets:\r\n        return state.activeToken && state.wallets\r\n          ? amountsHelper.getAmountsForToken(\r\n              state.activeToken,\r\n              state.wallets[state.activeToken.symbol]\r\n            )\r\n          : state.amounts\r\n      case WalletView.Receive:\r\n      case WalletView.Send:\r\n      case WalletView.SendConfirmation:\r\n      case WalletView.Transactions:\r\n        return state.activeWallet\r\n          ? amountsHelper.getAmountsForWallet(state.activeWallet)\r\n          : state.amounts\r\n      default:\r\n        return amountsHelper.getAmountsForAllTakens(state.supportedTokens, state.wallets)\r\n    }\r\n  },\r\n}\r\n","import { WalletState } from 'wallet/state/wallet.reducer'\r\nimport { amountsHelper } from 'wallet/state/helpers/amounts.helper'\r\nimport { WalletView, Wallet } from 'wallet/state/models'\r\n\r\nexport const navigationHelper = {\r\n  handleBackClick: (state: WalletState): WalletState => {\r\n    switch (state.activeView) {\r\n      case WalletView.Send:\r\n        return state.activeToken && state.wallets\r\n          ? {\r\n              ...state,\r\n              activeView: WalletView.Wallets,\r\n              activeWallet: null,\r\n              amounts: amountsHelper.getAmountsForToken(\r\n                state.activeToken,\r\n                state.wallets[state.activeToken.symbol]\r\n              ),\r\n            }\r\n          : state\r\n\r\n      case WalletView.SendConfirmation:\r\n        return state.activeToken && state.activeWallet\r\n          ? {\r\n              ...state,\r\n              activeView: WalletView.Send,\r\n              amounts: amountsHelper.getAmountsForWallet(state.activeWallet),\r\n            }\r\n          : state\r\n\r\n      case WalletView.Receive:\r\n        return state.activeToken && state.wallets\r\n          ? {\r\n              ...state,\r\n              activeView: WalletView.Wallets,\r\n              activeWallet: null,\r\n              amounts: amountsHelper.getAmountsForToken(\r\n                state.activeToken,\r\n                state.wallets[state.activeToken.symbol]\r\n              ),\r\n            }\r\n          : state\r\n\r\n      case WalletView.Transactions:\r\n        return state.activeToken && state.wallets\r\n          ? {\r\n              ...state,\r\n              activeView: state.previousView || WalletView.Balance,\r\n              activeToken: state.previousView ? state.activeToken : null,\r\n              activeWallet: state.previousView ? state.activeWallet : null,\r\n              amounts: state.previousView\r\n                ? amountsHelper.getAmountsForToken(\r\n                    state.activeToken,\r\n                    state.wallets[state.activeToken.symbol]\r\n                  )\r\n                : amountsHelper.getAmountsForAllTakens(state.supportedTokens, state.wallets),\r\n            }\r\n          : state\r\n\r\n      default:\r\n        return {\r\n          ...state,\r\n          activeView: WalletView.Balance,\r\n          activeToken: null,\r\n          activeWallet: null,\r\n          amounts: amountsHelper.getAmountsForAllTakens(state.supportedTokens, state.wallets),\r\n        }\r\n    }\r\n  },\r\n\r\n  getReceiveView: (state: WalletState, wallet: Wallet) =>\r\n    state.activeToken && state.wallets\r\n      ? {\r\n          ...state,\r\n          activeView: WalletView.Receive,\r\n          activeWallet: wallet,\r\n          amounts: amountsHelper.getAmountsForWallet(wallet),\r\n        }\r\n      : state,\r\n\r\n  getSendInitialView: (state: WalletState, wallet: Wallet) =>\r\n    state.activeToken && state.wallets\r\n      ? {\r\n          ...state,\r\n          activeView: WalletView.Send,\r\n          activeWallet: wallet,\r\n          amounts: amountsHelper.getAmountsForWallet(wallet),\r\n        }\r\n      : state,\r\n\r\n  getBalanceView: (state: WalletState) => ({\r\n    ...state,\r\n    activeToken: null,\r\n    activeView: WalletView.Balance,\r\n    activeWallet: null,\r\n    amounts: amountsHelper.getAmountsForAllTakens(state.supportedTokens, state.wallets),\r\n  }),\r\n}\r\n","import { Wallet } from 'wallet/state/models/wallet'\r\n\r\nexport const walletsHelper = {\r\n  renameWallet: (wallets: Wallet[], wallet: Wallet, name: string): Wallet[] => {\r\n    const result: Wallet[] = []\r\n\r\n    for (const _wallet of wallets) {\r\n      if (_wallet === wallet) {\r\n        result.push({\r\n          ..._wallet,\r\n          name,\r\n        })\r\n      } else {\r\n        result.push(_wallet)\r\n      }\r\n    }\r\n\r\n    return result\r\n  },\r\n\r\n  hideWallet: (wallets: Wallet[], wallet: Wallet) => {\r\n    const result: Wallet[] = []\r\n\r\n    for (const _wallet of wallets) {\r\n      if (_wallet !== wallet) {\r\n        result.push(_wallet)\r\n      }\r\n    }\r\n\r\n    return result\r\n  },\r\n\r\n  addWallet: (wallets: Wallet[]): Wallet[] => {\r\n    const first: Wallet = wallets[0]\r\n\r\n    return [\r\n      ...wallets,\r\n      {\r\n        ...first,\r\n        name: `Wallet${first.token.symbol}${wallets.length}`,\r\n        amount: 0,\r\n        address: first.address + wallets.length,\r\n      },\r\n    ]\r\n  },\r\n\r\n  reduceWallets: (wallets: Wallet[]): Wallet[] => {\r\n    let lastValuableIndex = 0\r\n\r\n    for (let i = wallets.length - 1; i > 0; i--) {\r\n      if (wallets[i].amount > 0) {\r\n        lastValuableIndex = i\r\n        break\r\n      }\r\n    }\r\n\r\n    return wallets.slice(0, lastValuableIndex ? lastValuableIndex + 1 : 1)\r\n  },\r\n\r\n  getActiveIndex: (wallets: Wallet[], activeWallet: Wallet): number =>\r\n    wallets.findIndex((wallet) => wallet.address === activeWallet.address),\r\n}\r\n","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport supportedTokens from 'assets/settings/supported-tokens.json'\r\n\r\nimport { recordFromArray } from 'shared/util/from'\r\nimport { Token, TokenSymbol } from 'shared/models/token'\r\n\r\nimport { PollSettings, SendData, Wallet } from 'wallet/state/models'\r\nimport { walletActions as actions } from 'wallet/state/wallet.actions'\r\nimport { navigationHelper } from 'wallet/state/helpers/navigation.helper'\r\nimport { amountsHelper } from 'wallet/state/helpers/amounts.helper'\r\nimport { walletsHelper } from 'wallet/state/helpers/wallets.helper'\r\nimport { Transaction } from 'wallet/state/models/transaction'\r\nimport { WalletView } from 'wallet/state/models/wallet-view'\r\n\r\nexport const initialWalletName = 'Main wallet'\r\n\r\nconst pollSettingsDefault: PollSettings = { account: 0, amount: 5, offset: 0 }\r\n\r\nexport type WalletState = {\r\n  activeView: WalletView\r\n  activeToken: Token | null\r\n  activeWallet: Wallet | null\r\n  amounts: Record<TokenSymbol, number> | null\r\n  pollSettings: PollSettings\r\n  seed: string | null\r\n  send: SendData | null\r\n  supportedTokens: Token[]\r\n  supportedTokensRecord: Record<TokenSymbol, Token>\r\n  transactions: Transaction[] | null\r\n  usdRates: Record<TokenSymbol, number>\r\n  wallets: Record<TokenSymbol, Wallet[]> | null\r\n  previousView: WalletView | null\r\n}\r\n\r\nexport const initialWalletState: WalletState = {\r\n  activeView: WalletView.Balance,\r\n  activeToken: null,\r\n  activeWallet: null,\r\n  amounts: null,\r\n  pollSettings: pollSettingsDefault,\r\n  seed: null,\r\n  send: null,\r\n  supportedTokens: supportedTokens.supported,\r\n  supportedTokensRecord: recordFromArray(supportedTokens.supported, 'symbol'),\r\n  transactions: null,\r\n  usdRates: {},\r\n  wallets: null,\r\n  previousView: null,\r\n}\r\n\r\nexport const walletReducer = createReducer<WalletState, ActionType<typeof actions>>(\r\n  initialWalletState\r\n)\r\n  .handleAction(actions.menu, (state, { payload }) => ({\r\n    ...state,\r\n    activeView: payload !== WalletView.Reset ? payload : state.activeView,\r\n  }))\r\n  .handleAction(actions.headerBack, (state) => ({\r\n    ...navigationHelper.handleBackClick(state),\r\n  }))\r\n  .handleAction(actions.openBalanceView, (state) => ({\r\n    ...navigationHelper.getBalanceView(state),\r\n  }))\r\n  .handleAction(actions.openWalletsView, (state, { payload }) => ({\r\n    ...state,\r\n    activeView: WalletView.Wallets,\r\n    activeToken: payload,\r\n    previousView: state.activeView,\r\n  }))\r\n  .handleAction(actions.openTransactionsView, (state, { payload }) => ({\r\n    ...state,\r\n    activeView: WalletView.Transactions,\r\n    activeWallet: payload,\r\n    previousView: state.activeView,\r\n    transactions: null,\r\n    amounts: amountsHelper.getAmountsForWallet(payload),\r\n  }))\r\n  .handleAction(actions.openReceiveView, (state, { payload }) => ({\r\n    ...navigationHelper.getReceiveView(state, payload),\r\n  }))\r\n  .handleAction(actions.openSendInitialView, (state, { payload }) => ({\r\n    ...navigationHelper.getSendInitialView(state, payload),\r\n  }))\r\n  .handleAction(actions.openSendConfirmView, (state, { payload }) => ({\r\n    ...state,\r\n    activeView: WalletView.SendConfirmation,\r\n    send: {\r\n      wallet: payload.wallet,\r\n      address: payload.address,\r\n      amount: payload.amount,\r\n      fee: payload.fee,\r\n    },\r\n  }))\r\n  .handleAction(actions.getTransactionsSuccess, (state, { payload }) => ({\r\n    ...state,\r\n    transactions: payload,\r\n  }))\r\n  .handleAction(actions.setSeed, (state, { payload }) => ({\r\n    ...state,\r\n    seed: payload,\r\n  }))\r\n  .handleAction(actions.updateWalletsSuccess, (state, { payload }) => ({\r\n    ...state,\r\n    wallets: payload,\r\n    activeWallet:\r\n      state.activeWallet && state.activeToken\r\n        ? payload[state.activeToken.symbol][\r\n            walletsHelper.getActiveIndex(payload[state.activeToken.symbol], state.activeWallet)\r\n          ]\r\n        : null,\r\n  }))\r\n  .handleAction(actions.refreshAmounts, (state) => ({\r\n    ...state,\r\n    amounts: amountsHelper.getAmounts(state),\r\n  }))\r\n  .handleAction(actions.resetAccount, () => initialWalletState)\r\n  .handleAction(actions.edit, (state, { payload }) => ({\r\n    ...state,\r\n    wallets: !(state.activeToken && state.wallets)\r\n      ? state.wallets\r\n      : {\r\n          ...state.wallets,\r\n          [state.activeToken.symbol]: walletsHelper.renameWallet(\r\n            state.wallets[state.activeToken.symbol],\r\n            payload.wallet,\r\n            payload.name\r\n          ),\r\n        },\r\n  }))\r\n  .handleAction(actions.addWalletSuccess, (state, { payload }) => ({\r\n    ...state,\r\n    wallets: payload,\r\n  }))\r\n  .handleAction(actions.hideWallet, (state, { payload }) => ({\r\n    ...state,\r\n    wallets: !(state.activeToken && state.wallets)\r\n      ? state.wallets\r\n      : {\r\n          ...state.wallets,\r\n          [state.activeToken.symbol]: walletsHelper.hideWallet(\r\n            state.wallets[state.activeToken.symbol],\r\n            payload\r\n          ),\r\n        },\r\n  }))\r\n  .handleAction(actions.getRatesSuccess, (state, { payload }) => ({\r\n    ...state,\r\n    usdRates: payload,\r\n  }))\r\n","import { ActionCreatorBuilder } from 'typesafe-actions'\r\nimport { catchError } from 'rxjs/operators'\r\nimport { merge, of } from 'rxjs'\r\n\r\nexport const handleEpicError = (errorAction: ActionCreatorBuilder<string, string>) =>\r\n  catchError((error, caught) => merge(of(errorAction(error.message)), caught))\r\n","import { pipe } from 'rxjs'\r\nimport { filter } from 'rxjs/operators'\r\nimport { ActionCreator, isActionOf } from 'typesafe-actions'\r\n\r\n/**\r\n * @todo check this operator, because it swallow\r\n * action payload type when used for single action\r\n */\r\nexport const filterActions = <T extends string>(...actionCreators: ActionCreator<T>[]) => {\r\n  const isOneAction = actionCreators.length === 1\r\n  const argument = isOneAction ? actionCreators[0] : actionCreators\r\n  return pipe(filter(isActionOf(argument)))\r\n}\r\n","import { createSelector } from 'reselect'\r\n\r\nimport { RootState } from 'state'\r\n\r\nimport { WalletState } from 'wallet/state/wallet.reducer'\r\nimport { walletsHelper } from 'wallet/state/helpers/wallets.helper'\r\n\r\nexport const getWalletState = (state: RootState): WalletState => state.account\r\n\r\nexport const getActiveView = createSelector(getWalletState, (state) => state.activeView)\r\n\r\nexport const getActiveToken = createSelector(getWalletState, (state) => state.activeToken)\r\n\r\nexport const getWallets = createSelector(getWalletState, (state) => state.wallets)\r\n\r\nexport const getActiveWallet = createSelector(getWalletState, (state) => state.activeWallet)\r\n\r\nexport const getActiveWalletIndex = createSelector(\r\n  getWallets,\r\n  getActiveWallet,\r\n  getActiveToken,\r\n  (wallets, wallet, token) =>\r\n    wallets && token && wallet ? walletsHelper.getActiveIndex(wallets[token?.symbol], wallet) : null\r\n)\r\n\r\nexport const getAmounts = createSelector(getWalletState, (state) => state.amounts)\r\n\r\nexport const getWalletsForActiveToken = createSelector(getWalletState, (state) =>\r\n  state.activeToken && state.wallets ? state.wallets[state.activeToken.symbol] : null\r\n)\r\n\r\nexport const getSupportedTokens = createSelector(getWalletState, (state) => state.supportedTokens)\r\n\r\nexport const getSupportedTokensRecord = createSelector(\r\n  getWalletState,\r\n  (state) => state.supportedTokensRecord\r\n)\r\n\r\nexport const getUsdRates = createSelector(getWalletState, (state) => state.usdRates)\r\n\r\nexport const getSendData = createSelector(getWalletState, (state) => state.send)\r\n\r\nexport const getSeed = createSelector(getWalletState, (state) => state.seed)\r\n\r\nexport const getPollSettings = createSelector(getWalletState, (state) => state.pollSettings)\r\n\r\nexport const getTransactions = createSelector(getWalletState, (state) => state.transactions)\r\n","export const nearBug = (err: Error) =>\r\n  typeof err?.message === 'string' && err.message.includes('[-32000]')\r\n","export const promiceErrorHandler = <T>(mock: T) => (err: Error) => {\r\n  console.error('Api error:')\r\n  console.error(err)\r\n\r\n  return mock\r\n}\r\n","export const fixTimestamp = (timestamp: string | number) =>\r\n  (timestamp + '').length < 13\r\n    ? +timestamp * 1000 // add milliseconds\r\n    : +timestamp\r\n","import mocks from './mocks.json'\r\n\r\nimport { Transaction } from 'wallet/state/models/transaction'\r\nimport { fixTimestamp } from 'shared/util/fix-timestamp'\r\n\r\nconst k = 'MCTF6EHW28WGXZN21USVHDIAVFN9WC2IH7'\r\nconst getUrl = (address: string) =>\r\n  'https://api-kovan.etherscan.io/api?module=account&action=txlist&address=' +\r\n  address +\r\n  '&startblock=0&endblock=99999999&sort=asc&apikey=' +\r\n  k\r\n\r\nconst toTransaction = (tr: any) =>\r\n  ({\r\n    hash: tr.hash,\r\n    blockHash: tr.blockHash,\r\n    status: 0,\r\n    amount: tr.value,\r\n    from: tr.from,\r\n    to: tr.to,\r\n    timestamp: fixTimestamp(tr.timeStamp),\r\n  } as Transaction)\r\n\r\nexport const getEthTransactions = (address: string, mocked = false): Promise<Transaction[]> =>\r\n  mocked\r\n    ? Promise.resolve(mocks.transactions.ETH)\r\n    : fetch(getUrl(address)).then((val) =>\r\n        val\r\n          .clone()\r\n          .json()\r\n          .then((response) => response.result)\r\n          .then((data) => data.map(toTransaction))\r\n      )\r\n","import { HDWallet, CoinType, devConfig, Balance, Coin } from 'zeropool-api-js'\r\nimport { from, Observable, of } from 'rxjs'\r\nimport { Transaction } from 'zeropool-api-js/lib/coins/transaction'\r\nimport { catchError, map } from 'rxjs/operators'\r\n\r\nimport { Token } from 'shared/models'\r\nimport { nearBug } from 'shared/util/waves-bug'\r\n\r\nimport mocks from './mocks.json'\r\nimport { promiceErrorHandler } from 'wallet/api/promice-error.handler'\r\nimport { getEthTransactions } from './es.api'\r\nimport { fixTimestamp } from 'shared/util/fix-timestamp'\r\n\r\nexport let hdWallet: HDWallet | null = null\r\nexport let transaction$: Observable<Transaction> | null = null\r\n\r\nfunction initHDWallet(seed: string, coins: CoinType[]): HDWallet {\r\n  hdWallet = new HDWallet(seed, devConfig, coins)\r\n\r\n  return hdWallet\r\n}\r\n\r\nconst getWalletBalance = (token: Token, walletId: number) => {\r\n  if (!hdWallet) {\r\n    throw Error('API not available!')\r\n  }\r\n\r\n  const coin = hdWallet.getCoin(token.name as CoinType)\r\n\r\n  if (!coin) {\r\n    throw Error(`Can not access ${token.name} data!`)\r\n  }\r\n\r\n  return from(coin.getBalances(1, walletId).catch(promiceErrorHandler<Balance[]>([]))).pipe(\r\n    map((balances) => balances[0]),\r\n    map((balance) => ({\r\n      ...balance,\r\n      balance: coin.fromBaseUnit(balance.balance),\r\n    }))\r\n  )\r\n}\r\n\r\nconst getAllBalances = (amount: number, offset = 0) => {\r\n  if (!hdWallet) {\r\n    throw Error('API not available!')\r\n  }\r\n\r\n  return from(hdWallet.getBalances(amount, offset).catch(promiceErrorHandler({})))\r\n}\r\n\r\nconst getNetworkFee = (token: Token) => {\r\n  if (!hdWallet) {\r\n    throw Error('API not available!')\r\n  }\r\n\r\n  const coin = hdWallet.getCoin(token.name as CoinType)\r\n\r\n  if (!coin) {\r\n    throw Error(`Can't estimate fee for ${token.symbol}`)\r\n  }\r\n\r\n  return from(coin.estimateTxFee()).pipe(\r\n    catchError((err) => {\r\n      if (nearBug(err)) {\r\n        return of({ fee: 0 })\r\n      }\r\n\r\n      throw Error(err.message)\r\n    })\r\n  )\r\n}\r\n\r\n// tslint:disable-next-line: prettier\r\nconst getWalletTransactions = (token: Token, walletId: number, mocked = false): Observable<Transaction[]> => {\r\n  if (!hdWallet) {\r\n    throw Error('API not available!')\r\n  }\r\n\r\n  const coin = hdWallet.getCoin(token.name as CoinType)\r\n\r\n  if (!coin) {\r\n    throw Error(`Can't connect to ${token.symbol}`)\r\n  }\r\n\r\n  const tr =\r\n    token.symbol === 'ETH'\r\n      ? from(\r\n          getEthTransactions(coin.getAddress(walletId), mocked).catch(\r\n            promiceErrorHandler<Transaction[]>([])\r\n          )\r\n        )\r\n      : mocked\r\n      ? of(mocks.transactions[token.symbol])\r\n      : from(coin.getTransactions(walletId, 10, 0).catch(promiceErrorHandler<Transaction[]>([])))\r\n\r\n  return tr.pipe(map(convertValues(coin)))\r\n}\r\n\r\nconst transfer = (account: number, to: string, amount: number, token: Token) => {\r\n  if (!hdWallet) {\r\n    throw Error('API not available!')\r\n  }\r\n\r\n  const coin = hdWallet.getCoin(token.name as CoinType)\r\n\r\n  if (!coin) {\r\n    throw Error(`Can't estimate fee for ${token.symbol}`)\r\n  }\r\n\r\n  return from(coin.transfer(account, to, coin.toBaseUnit(amount.toString()))).pipe(\r\n    catchError((err) => {\r\n      console.log('Transfer error:')\r\n      console.log(err)\r\n\r\n      throw Error(err.message)\r\n    })\r\n  )\r\n}\r\n\r\nexport default {\r\n  getAllBalances,\r\n  getWalletBalance,\r\n  getNetworkFee,\r\n  getWalletTransactions,\r\n  initHDWallet,\r\n  transfer,\r\n}\r\n\r\nconst convertValues = (coin: Coin) => (transactions: Transaction[]) =>\r\n  transactions.map((transaction) => ({\r\n    ...transaction,\r\n    amount: coin.fromBaseUnit(transaction.amount),\r\n    timestamp: fixTimestamp(transaction.timestamp),\r\n  }))\r\n","import storage from 'redux-persist/lib/storage'\r\nimport { PersistConfig } from 'redux-persist/es/types'\r\nimport { createBrowserHistory, History } from 'history'\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable'\r\nimport { persistStore, persistReducer, createMigrate } from 'redux-persist'\r\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\n\r\nimport { registerReducer } from 'register/state/register.reducer'\r\nimport { registerEpics } from 'register/state/register.epics'\r\n\r\nimport { stateMigrations } from 'state-migrations'\r\nimport { walletReducer } from 'wallet/state/wallet.reducer'\r\nimport { walletEpics } from 'wallet/state/wallet.epics'\r\nimport { loadingBarReducer } from 'shared/loading-bar/state/loading-bar.reducer'\r\n\r\n//#region Setup Devtools\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: <R>(a: R) => R\r\n  }\r\n}\r\n\r\nconst devToolsCompose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n\r\nconst composeEnhancers = devToolsCompose || compose\r\n//#endregion\r\n\r\n//#region Setup Epics\r\nconst epicMiddleware = createEpicMiddleware()\r\n\r\nconst rootEpic = combineEpics(\r\n  registerEpics,\r\n  walletEpics\r\n  // alertsEpics,\r\n  // notificationsEpics,\r\n)\r\n//#endregion\r\n\r\n//#region Setup Reducers\r\nexport type RootState = NonNullable<Parameters<ReturnType<typeof createRootReducer>>[0]>\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nexport const createRootReducer = (_history: History) =>\r\n  combineReducers({\r\n    register: registerReducer,\r\n    account: walletReducer,\r\n    router: connectRouter(_history),\r\n    shared: combineReducers({\r\n      loadingBar: loadingBarReducer,\r\n      //   // alerts: alertsReducer,\r\n      //   // notifications: notificationsReducer,\r\n      //   // menuBar: menuBarReducer,\r\n    }),\r\n  })\r\n//#endregion\r\n\r\n//#region Setup Persisted Store\r\nconst persistConfig: PersistConfig<RootState> = {\r\n  key: 'root',\r\n  version: 0,\r\n  storage,\r\n  migrate: createMigrate(stateMigrations, { debug: false }),\r\n  whitelist: ['register', 'account'],\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, createRootReducer(history))\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  composeEnhancers(applyMiddleware(epicMiddleware, routerMiddleware(history)))\r\n)\r\n\r\nexport const persistedStore = persistStore(store)\r\n//#endregion\r\n\r\nepicMiddleware.run(rootEpic)\r\n","export const notImplemented = (err: Error) =>\r\n  typeof err?.message === 'string' && err.message.includes('not implemented')\r\n","import { of } from 'rxjs'\r\nimport { map } from 'rxjs/operators'\r\n\r\nimport { http, RequestConfig } from 'shared/http/http'\r\nimport { getHTTPData } from 'shared/operators/get-http-data.operator'\r\nimport { Provider } from 'shared/models/provider'\r\nimport { Token } from 'shared/models/token'\r\nimport { Rate } from 'shared/models/rate'\r\n\r\nimport ratesMock from 'assets/mocks/rates.mock.json'\r\nimport proxy from 'assets/settings/proxy.json'\r\n\r\nconst useMock = true\r\n\r\nexport const RatesApi = {\r\n  getRates() {\r\n    const url = proxy.cors + `https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest`\r\n    const config: RequestConfig = {\r\n      params: {},\r\n      context: {\r\n        noLoadingBar: true,\r\n        provider: Provider.Marketcap,\r\n      },\r\n    }\r\n\r\n    if (useMock) {\r\n      return of(ratesMock.data)\r\n    }\r\n\r\n    return http()\r\n      .get<{ status: any; data: Rate<Token>[] }>(url, config)\r\n      .pipe(\r\n        getHTTPData(),\r\n        map(({ status, data }) => data)\r\n      )\r\n  },\r\n}\r\n","import { map } from 'rxjs/operators'\r\nimport { PayloadAction } from 'typesafe-actions'\r\n\r\nexport const getPayload = <T>() => map((action: PayloadAction<string, T>) => action.payload)\r\n","import { push } from 'connected-react-router'\r\nimport { CoinType } from 'zeropool-api-js'\r\nimport { Epic, combineEpics } from 'redux-observable'\r\nimport { iif, Observable, of } from 'rxjs'\r\nimport { ActionType, isActionOf } from 'typesafe-actions'\r\nimport {\r\n  switchMapTo,\r\n  map,\r\n  withLatestFrom,\r\n  filter,\r\n  switchMap,\r\n  mergeMap,\r\n  ignoreElements,\r\n  tap,\r\n  mapTo,\r\n} from 'rxjs/operators'\r\n\r\nimport toast from 'shared/helpers/toast.helper'\r\nimport { Token, Rate } from 'shared/models'\r\nimport { handleEpicError } from 'shared/operators/handle-epic-error.operator'\r\nimport { filterActions } from 'shared/operators/filter-actions.operator'\r\n\r\nimport {\r\n  getActiveToken,\r\n  getActiveView,\r\n  getActiveWallet,\r\n  getPollSettings,\r\n  getSeed,\r\n  getSendData,\r\n  getSupportedTokens,\r\n  getWallets,\r\n} from 'wallet/state/wallet.selectors'\r\nimport api, { hdWallet } from 'wallet/api/zeropool.api'\r\nimport { SendData, Wallet, WalletRecord, WalletView } from 'wallet/state/models'\r\nimport { mapRatesToTokens } from 'wallet/state/helpers/map-rates-to-tokens'\r\nimport { updateBalances } from 'wallet/state/helpers/update-balances.helper'\r\nimport { walletActions } from 'wallet/state/wallet.actions'\r\nimport { RatesApi } from 'wallet/api/rates.api'\r\n\r\nimport { RootState } from 'state'\r\nimport { getPayload } from 'shared/operators/get-payload.operator'\r\nimport { initBalances } from './helpers/init-balances.helper'\r\n\r\ntype Actions = ActionType<typeof walletActions>\r\n\r\nconst defaultAccount = 0\r\nconst nextWalletId = (wallets: WalletRecord, token: Token) =>\r\n  wallets[token.symbol][wallets[token.symbol].length - 1].id + 1\r\n\r\nconst getRates$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.getRates)),\r\n    switchMapTo(\r\n      (RatesApi.getRates() as Observable<Rate<Token>[]>).pipe(\r\n        withLatestFrom(state$.pipe(map(getSupportedTokens))),\r\n        map(([ratesData, tokens]) => mapRatesToTokens(ratesData, tokens)),\r\n        map((rates) => walletActions.getRatesSuccess(rates))\r\n      )\r\n    ),\r\n    handleEpicError(walletActions.getRatesError)\r\n  )\r\n\r\nconst redirectToTheWalletOnSetSeed$: Epic = (\r\n  action$: Observable<Actions>,\r\n  state$: Observable<RootState>\r\n) => action$.pipe(filter(isActionOf(walletActions.setSeed)), switchMapTo(of(push('/wallet'))))\r\n\r\nconst resetAccount$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.menu)),\r\n    filter((action) => action.payload === WalletView.Reset),\r\n    tap(() => toast.success('Wallet reseted and data cleared')),\r\n    mergeMap(() => of(push('/welcome'), walletActions.resetAccount()))\r\n  )\r\n\r\nconst initApi$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.openBalanceView),\r\n    withLatestFrom(state$.pipe(map(getSeed)), state$.pipe(map(getWallets)), state$.pipe(map(getSupportedTokens))),\r\n    switchMap(([, _seed, wallets, tokens]) =>\r\n      iif(\r\n        () => !!_seed,\r\n        of(_seed).pipe(\r\n          filter((seed): seed is string => typeof seed === 'string'),\r\n          tap((seed) => api.initHDWallet(seed, tokens.map(item => item.name as CoinType))),\r\n          map(() => (!wallets ? walletActions.initWallets() : walletActions.updateWallets()))\r\n        ),\r\n        of(false).pipe(\r\n          mergeMap(() => of(push('/welcome'), walletActions.setSeedError('Seed phrase not set')))\r\n        )\r\n      )\r\n    ),\r\n    handleEpicError(walletActions.setSeedError)\r\n  )\r\n\r\nconst initWallets$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.initWallets),\r\n    withLatestFrom(state$.pipe(map(getPollSettings)), state$.pipe(map(getSupportedTokens))),\r\n    switchMap(([, settings, tokens]) =>\r\n      api.getAllBalances(settings.amount).pipe(\r\n        map((balances) => initBalances(hdWallet as any, balances, tokens)),\r\n        mergeMap((wallets) =>\r\n          of(walletActions.getRates(), walletActions.updateWalletsSuccess(wallets))\r\n        )\r\n      )\r\n    ),\r\n    handleEpicError(walletActions.updateWalletsError)\r\n  )\r\n\r\nconst updateWallets$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.updateWallets),\r\n    withLatestFrom(state$.pipe(map(getWallets)), state$.pipe(map(getSupportedTokens))),\r\n    map(([, wallets, tokens]) => ({ wallets, tokens })),\r\n    filter((value): value is { wallets: WalletRecord; tokens: Token[] } => !!value.wallets),\r\n    switchMap(({ wallets, tokens }) => updateBalances(hdWallet as any, wallets, tokens)),\r\n    tap(() => toast.success('Balances updated')),\r\n    mergeMap((wallets) =>\r\n      of(walletActions.getRates(), walletActions.updateWalletsSuccess(wallets))\r\n    ),\r\n    handleEpicError(walletActions.updateWalletsError)\r\n  )\r\n\r\nconst addWallet$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.addWallet),\r\n    withLatestFrom(state$.pipe(map(getWallets)), state$.pipe(map(getActiveToken))),\r\n    map(([, wallets, token]) => ({ wallets, token })),\r\n    filter(\r\n      (value): value is { wallets: WalletRecord; token: Token } => !!value.wallets && !!value.token\r\n    ),\r\n    switchMap(({ wallets, token }) =>\r\n      api.getWalletBalance(token, nextWalletId(wallets, token)).pipe(\r\n        map((balance) =>\r\n          walletActions.addWalletSuccess({\r\n            ...wallets,\r\n            [token.symbol]: [\r\n              ...wallets[token.symbol],\r\n              {\r\n                account: defaultAccount,\r\n                address: balance.address,\r\n                token: { ...token },\r\n                id: nextWalletId(wallets, token),\r\n                amount: +balance.balance,\r\n                name: `Wallet${token.symbol}${nextWalletId(wallets, token)}`,\r\n                private: false,\r\n              },\r\n            ],\r\n          })\r\n        )\r\n      )\r\n    ),\r\n    handleEpicError(walletActions.addWalletError)\r\n  )\r\n\r\nconst refreshAmounts$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.updateWalletsSuccess),\r\n    map(() => walletActions.refreshAmounts())\r\n  )\r\n\r\nconst openSendConfirmView$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.prepareSendConfirmView)),\r\n    getPayload(),\r\n    switchMap((payload) =>\r\n      api.getNetworkFee(payload.wallet.token).pipe(\r\n        map((fee) =>\r\n          walletActions.openSendConfirmView({\r\n            ...payload,\r\n            fee: +fee.fee,\r\n          })\r\n        )\r\n      )\r\n    ),\r\n    handleEpicError(walletActions.apiError)\r\n  )\r\n\r\nconst sendTransaction$: Epic = (action$: Observable<Actions>, state$: Observable<RootState>) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.send),\r\n    withLatestFrom(state$.pipe(map(getSendData)), state$.pipe(map(getActiveWallet))),\r\n    map(([, sendData, wallet]) => ({ sendData, wallet })),\r\n    filter(\r\n      (value): value is { sendData: SendData; wallet: Wallet } => !!value.sendData && !!value.wallet\r\n    ),\r\n    switchMap(({ sendData, wallet }) =>\r\n      api.transfer(wallet.id, sendData.address, sendData.amount, wallet.token).pipe(\r\n        tap(() => toast.success('Transaction completed successfully')),\r\n        mapTo(walletActions.openTransactionsView(wallet))\r\n      )\r\n    ),\r\n    handleEpicError(walletActions.apiError)\r\n  )\r\n\r\nconst callGetTransactionsOnOpenTransactionsView$: Epic = (\r\n  action$: Observable<Actions>,\r\n  state$: Observable<RootState>\r\n) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.openTransactionsView)),\r\n    getPayload(),\r\n    map((wallet) => walletActions.getTransactions(wallet))\r\n  )\r\n\r\nconst callGetTransactionsOnUpdateWallets$: Epic = (\r\n  action$: Observable<Actions>,\r\n  state$: Observable<RootState>\r\n) =>\r\n  action$.pipe(\r\n    filterActions(walletActions.updateWallets),\r\n    withLatestFrom(state$.pipe(map(getActiveView)), state$.pipe(map(getActiveWallet))),\r\n    filter(([, view]) => view === WalletView.Transactions),\r\n    map(([, , wallet]) => wallet),\r\n    filter((wallet): wallet is Wallet => !!wallet),\r\n    map((wallet) => walletActions.getTransactions(wallet))\r\n  )\r\n\r\nconst getTransactions$: Epic = (action$: Observable<Actions>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.getTransactions)),\r\n    getPayload(),\r\n    switchMap((wallet) =>\r\n      api.getWalletTransactions(wallet.token, wallet.id, false).pipe(\r\n        // debug(),\r\n        map((transactions) => walletActions.getTransactionsSuccess(transactions))\r\n      )\r\n    ),\r\n    handleEpicError(walletActions.apiError)\r\n  )\r\n\r\nconst handleErrorActions$: Epic = (action$: Observable<Actions>) =>\r\n  action$.pipe(\r\n    filter(\r\n      isActionOf([\r\n        walletActions.addWalletError,\r\n        walletActions.setSeedError,\r\n        walletActions.updateWalletsError,\r\n        walletActions.apiError,\r\n      ])\r\n    ),\r\n    tap(({ payload }) => toast.error(payload)),\r\n    ignoreElements()\r\n  )\r\n\r\nexport const walletEpics: Epic = combineEpics(\r\n  addWallet$,\r\n  getRates$,\r\n  getTransactions$,\r\n  callGetTransactionsOnOpenTransactionsView$,\r\n  callGetTransactionsOnUpdateWallets$,\r\n  initApi$,\r\n  resetAccount$,\r\n  redirectToTheWalletOnSetSeed$,\r\n  initWallets$,\r\n  updateWallets$,\r\n  handleErrorActions$,\r\n  refreshAmounts$,\r\n  openSendConfirmView$,\r\n  sendTransaction$\r\n)\r\n","import { Rate } from 'shared/models/rate'\r\nimport { Token, TokenSymbol } from 'shared/models/token'\r\nimport { recordFromArray } from 'shared/util/from'\r\n\r\nexport const mapRatesToTokens = (\r\n  rates: Rate<Token>[],\r\n  tokens: Token[]\r\n): Record<TokenSymbol, number> => {\r\n  const result: Record<TokenSymbol, number> = {}\r\n  const ratesMap = recordFromArray(rates, 'symbol')\r\n\r\n  for (const token of tokens) {\r\n    if (ratesMap[token.symbol]) {\r\n      result[token.symbol] = ratesMap[token.symbol].quote.USD.price\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n","import { Balance, CoinType, HDWallet } from 'zeropool-api-js'\r\n\r\nimport { Token, TokenSymbol } from 'shared/models'\r\nimport { notImplemented } from 'shared/util/not-implemented'\r\n\r\nimport { Wallet } from 'wallet/state/models'\r\nimport { walletsHelper } from 'wallet/state/helpers/wallets.helper'\r\n\r\nexport const initBalances = (\r\n  hdWallet: HDWallet,\r\n  balances: Record<TokenSymbol, Balance[]>,\r\n  tokens: Token[],\r\n  account = 0\r\n): Record<TokenSymbol, Wallet[]> => {\r\n  const wallets: Record<TokenSymbol, Wallet[]> = {}\r\n\r\n  for (const token of tokens) {\r\n    const tokenId = token.symbol\r\n    const coin = hdWallet?.getCoin(token.name as CoinType)\r\n    wallets[tokenId] = []\r\n\r\n    for (const [balanceDataIndex, balanceData] of Object.entries(balances[token.name])) {\r\n      let amount\r\n      try {\r\n        amount = coin\r\n          ? +coin.fromBaseUnit((balanceData as Balance).balance)\r\n          : +(balanceData as Balance).balance\r\n      } catch (err) {\r\n        if (notImplemented(err)) {\r\n          amount = 0\r\n        } else {\r\n          throw Error(err.message)\r\n        }\r\n      }\r\n\r\n      wallets[tokenId].push({\r\n        account,\r\n        address: (balanceData as Balance).address,\r\n        id: +balanceDataIndex,\r\n        amount,\r\n        name: `Wallet${tokenId}${balanceDataIndex}`,\r\n        private: false,\r\n        token,\r\n      })\r\n    }\r\n\r\n    wallets[tokenId] = walletsHelper.reduceWallets(wallets[tokenId])\r\n  }\r\n\r\n  return wallets\r\n}\r\n","import { CoinType, HDWallet } from 'zeropool-api-js'\r\nimport { from, Observable } from 'rxjs'\r\nimport { map } from 'rxjs/operators'\r\n\r\nimport { nearBug } from 'shared/util/waves-bug'\r\nimport { notImplemented } from 'shared/util/not-implemented'\r\nimport { Token, TokenSymbol } from 'shared/models/token'\r\n\r\nimport { Wallet } from 'wallet/state/models'\r\n\r\nexport const updateBalances = (\r\n  hdWallet: HDWallet,\r\n  wallets: Record<TokenSymbol, Wallet[]>,\r\n  tokens: Token[]\r\n): Observable<Record<string, Wallet[]>> => {\r\n  const promices: Promise<string[]>[] = []\r\n  const result: Record<string, Wallet[]> = {}\r\n\r\n  tokens.forEach((token) => {\r\n    const tokenWallets = wallets[token.symbol]\r\n    const walletPromises: Promise<string>[] = []\r\n    const coin = hdWallet?.getCoin(token.name as CoinType)\r\n\r\n    if (!coin) {\r\n      throw Error(`Can not access ${token.name} data!`)\r\n    }\r\n\r\n    tokenWallets.forEach((wallet) => {\r\n      walletPromises.push(\r\n        coin\r\n          .getBalance(wallet.id)\r\n          .catch((err) => {\r\n            // Near Fix\r\n            if (nearBug(err)) {\r\n              return '0'\r\n            }\r\n\r\n            throw Error(err)\r\n          })\r\n          .then((balance) => {\r\n            try {\r\n              return coin.fromBaseUnit(balance)\r\n            } catch (err) {\r\n              // Waves Fix\r\n              if (notImplemented(err)) {\r\n                return '0'\r\n              }\r\n              throw Error(err?.message)\r\n            }\r\n          })\r\n      )\r\n    })\r\n\r\n    promices.push(Promise.all(walletPromises))\r\n  })\r\n\r\n  return from(Promise.all(promices)).pipe(\r\n    map((balances) => {\r\n      tokens.forEach((token, tokenIndex) => {\r\n        result[token.symbol] = wallets[token.symbol].map((wallet, walletIndex) => ({\r\n          ...wallet,\r\n          // amount: wallets[token.symbol][walletIndex].amount + 1, // for test purpose\r\n          amount: +balances[tokenIndex][walletIndex],\r\n        }))\r\n      })\r\n\r\n      return result\r\n    })\r\n  )\r\n}\r\n","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport { loadingBarActions } from 'shared/loading-bar/state/loading-bar.actions'\r\n\r\nexport interface LoadingBarState {\r\n  requestsInProgress: number\r\n}\r\n\r\nexport const initialState: LoadingBarState = {\r\n  requestsInProgress: 0,\r\n}\r\n\r\nexport const loadingBarReducer = createReducer<\r\n  LoadingBarState,\r\n  ActionType<typeof loadingBarActions>\r\n>(initialState)\r\n  .handleAction(\r\n    loadingBarActions.addRequest,\r\n    (state): LoadingBarState => ({\r\n      requestsInProgress: state.requestsInProgress + 1,\r\n    })\r\n  )\r\n  .handleAction(\r\n    loadingBarActions.removeRequest,\r\n    (state): LoadingBarState => ({\r\n      requestsInProgress: state.requestsInProgress - 1,\r\n    })\r\n  )\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './SeedTag.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { shuffleString } from 'shared/util/shuffle'\r\n\r\nexport const componentId = 'SeedTag'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface SeedTagProps {\r\n  text: string\r\n  num: number\r\n  hidden?: boolean\r\n  hideNumber?: boolean\r\n  onClick?: (num: number) => void\r\n}\r\n\r\nexport const SeedTag: React.FC<SeedTagProps> = ({ text, num, hidden, hideNumber, onClick }) => {\r\n  const clickHandler = () => (onClick && !hidden ? onClick(num) : null)\r\n\r\n  return (\r\n    <div className={css({ Placeholder: hidden })} data-testid={test()} onClick={clickHandler}>\r\n      {hidden || hideNumber ? null : <div className={css('Number')}>{num + 1}</div>}\r\n\r\n      <div className={css('Text')}>{hidden ? shuffleString(text) : text}</div>\r\n    </div>\r\n  )\r\n}\r\n","export const shuffleString = (str: string): string =>\r\n  str\r\n    .split('')\r\n    .sort(() => 0.5 - Math.random())\r\n    .join('')\r\n\r\nexport const shuffleArray = (arr: string[]): string[] => arr.sort(() => 0.5 - Math.random())\r\n","import { cn } from '@bem-react/classname'\r\nimport { Paper } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport './SeedPanel.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { shuffleArray } from 'shared/util/shuffle'\r\n\r\nimport { SeedTag } from 'register/components/SeedTag/SeedTag'\r\n\r\nexport const componentId = 'SeedPanel'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface SeedPanelProps {\r\n  classes?: string[]\r\n  seed: string[]\r\n  check?: boolean\r\n  onCheck?: (checked: boolean) => void\r\n}\r\n\r\nexport const SeedPanel: React.FC<SeedPanelProps> = ({ classes = [], seed, check, onCheck }) => {\r\n  const [confirmedSeed, setConfirmedSeed] = useState([] as string[])\r\n  const [success, setSuccess] = useState(false)\r\n  const [shuffledSeed, setShuffledSeed] = useState([] as string[])\r\n\r\n  useEffect(() => {\r\n    if (!shuffledSeed.length && check) {\r\n      setShuffledSeed(shuffleArray([...seed]))\r\n    }\r\n  }, [shuffledSeed.length, check, seed])\r\n\r\n  useEffect(() => {\r\n    const same = JSON.stringify(seed) === JSON.stringify(confirmedSeed)\r\n    setSuccess(same)\r\n    if (onCheck) {\r\n      onCheck(same)\r\n    }\r\n  }, [success, confirmedSeed, seed, onCheck])\r\n\r\n  const bodyTagClickHandler = (index: number) => {\r\n    confirmedSeed.splice(index, 1)\r\n    setConfirmedSeed([...confirmedSeed])\r\n    setSuccess(false)\r\n  }\r\n  const footerTagClickHandler = (index: number) => {\r\n    setConfirmedSeed([...confirmedSeed, seed[index]])\r\n  }\r\n\r\n  return (\r\n    <Paper className={css('', classes)} data-testid={test()}>\r\n      <div className={css('Body')} data-testid={test('Body')}>\r\n        {check\r\n          ? confirmedSeed.map((tag: string, index: number) => (\r\n              <SeedTag text={tag} num={index} key={index} onClick={bodyTagClickHandler} />\r\n            ))\r\n          : seed.map((tag: string, index: number) => (\r\n              <SeedTag text={tag} num={index} key={index} />\r\n            ))}\r\n      </div>\r\n\r\n      <div className={css('Footer')} data-testid={test('Footer')}>\r\n        {check\r\n          ? shuffledSeed.map((tag: string, index: number) => (\r\n              <SeedTag\r\n                text={tag}\r\n                num={seed.findIndex((str) => str === tag)}\r\n                hidden={confirmedSeed.includes(tag)}\r\n                hideNumber={true}\r\n                key={seed.findIndex((str) => str === tag)}\r\n                onClick={footerTagClickHandler}\r\n              />\r\n            ))\r\n          : null}\r\n        {confirmedSeed.length === seed.length && !success ? (\r\n          <div className={css('Warning')} data-testid={test('Warning')}>\r\n            The phrases do not match!\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </Paper>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { Button } from '@material-ui/core'\r\n\r\nimport './StepOne.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\r\n\r\nexport const componentId = 'StepOne'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface StepOneProps {\r\n  onGenerate: () => void\r\n}\r\n\r\nexport const StepOne: React.FC<StepOneProps> = ({ onGenerate }) => {\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <section>\r\n        <SeedPanel classes={[css('SeedPanel')]} seed={[]} />\r\n\r\n        <p className={css('Description')}>\r\n          Your secret phrase consists of 12 words. Store it carefully. If you loose it, you will\r\n          loose access to all of your associated wallets!\r\n        </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button')}\r\n        data-testid={test('GenerateButton')}\r\n        onClick={onGenerate}\r\n        variant=\"contained\"\r\n      >\r\n        Generate a secret phrase\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { Button } from '@material-ui/core'\r\n\r\nimport './StepTwo.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\r\n\r\nexport const componentId = 'StepTwo'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\ninterface StepTwoProps {\r\n  seed: string[]\r\n  onSubmit: () => void\r\n}\r\n\r\nexport const StepTwo: React.FC<StepTwoProps> = ({ seed, onSubmit }) => {\r\n  return (\r\n    <div className={css()} data-testid=\"StepTwo\">\r\n      <section>\r\n        <SeedPanel classes={[css('SeedPanel')]} seed={seed} />\r\n\r\n        <p className={css('Description')}>\r\n          By submiting, you confirm that you have stored the secret phrase on paper or using another\r\n          safe method.\r\n        </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button')}\r\n        data-testid={test('SubmitButton')}\r\n        onClick={onSubmit}\r\n        variant=\"contained\"\r\n      >\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import * as React from 'react'\r\nimport { Button } from '@material-ui/core'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './Welcome.scss'\r\nimport guy from 'assets/images/guy_welcomes@2x.png'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'Welcome'\r\nexport interface WelcomeProps {\r\n  // TODO: remove onMockedLogin after API is connected\r\n  onMockedLogin: () => void\r\n  onCreate: () => void\r\n  onImport: () => void\r\n  onAbout: () => void\r\n}\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport const Welcome: React.FC<WelcomeProps> = ({ onCreate, onImport, onAbout, onMockedLogin }) => {\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <section className=\"noselect\">\r\n        <img\r\n          src={guy}\r\n          className={css('Logo')}\r\n          data-testid={test('Logo')}\r\n          alt=\"logo\"\r\n          onClick={onMockedLogin}\r\n        />\r\n\r\n        <h1 className={css('Greeting')} data-testid={test('Greeting')}>\r\n          Welcome to ZeroPool\r\n        </h1>\r\n\r\n        <p className={css('Description')} data-testid={test('Description')}>\r\n          Please create a new wallet or import an existing one using a secret phrase\r\n        </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        className={css('Button')}\r\n        data-testid={test('CreateButton')}\r\n        disableElevation={true}\r\n        onClick={onCreate}\r\n      >\r\n        Create new wallet\r\n      </Button>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        className={css('Button')}\r\n        data-testid={test('ImportButton')}\r\n        onClick={onImport}\r\n      >\r\n        Import existing\r\n      </Button>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"outlined\"\r\n        className={css('Button')}\r\n        data-testid={test('AboutButton')}\r\n        onClick={onAbout}\r\n      >\r\n        About zeropool\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { useForm } from 'react-hook-form'\r\nimport { DevTool } from '@hookform/devtools'\r\n\r\nimport './StepFour.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  FormHelperText,\r\n  IconButton,\r\n  Input,\r\n  InputAdornment,\r\n  InputLabel,\r\n} from '@material-ui/core'\r\nimport { Close, Visibility, VisibilityOff } from '@material-ui/icons'\r\nexport const componentId = 'StepFour'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nconst PasswordInputParams = {\r\n  required: 'Required',\r\n  pattern: {\r\n    value: /^(?=.*?\\d)(?=.*?[a-zA-Z])[a-zA-Z\\d]+$/,\r\n    message: 'Use letters and numbers',\r\n  },\r\n  minLength: {\r\n    value: 8,\r\n    message: 'Use at least 8 characters',\r\n  },\r\n}\r\n\r\ninterface FormData {\r\n  password: string\r\n  confirm: string\r\n}\r\n\r\nexport interface StepFourProps {\r\n  onRegister: (data: { password: string }) => void\r\n}\r\n\r\nexport const StepFour: React.FC<StepFourProps> = ({ onRegister }) => {\r\n  const { handleSubmit, register, reset, control, errors } = useForm<FormData>({\r\n    criteriaMode: 'all',\r\n  })\r\n\r\n  const [showPassword, setShowPassword] = useState(false)\r\n  const [password, setPassword] = useState('')\r\n  const [passwordConfirm, setPasswordConfirm] = useState('')\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {process.env.NODE_ENV !== 'production' && <DevTool control={control} />}\r\n\r\n      <form onSubmit={handleSubmit(onRegister)} className={css('Form')}>\r\n        <FormControl className={css('FormControl')} error={!!errors.password}>\r\n          <InputLabel className={css('FormControlLabel')} htmlFor=\"password\">\r\n            Password\r\n          </InputLabel>\r\n\r\n          <Input\r\n            id=\"password\"\r\n            color=\"secondary\"\r\n            className={css('Password')}\r\n            inputProps={{ 'data-testid': test('Password') }}\r\n            inputRef={register(PasswordInputParams)}\r\n            name=\"password\"\r\n            onChange={() => setPassword(control.getValues().password)}\r\n            type={showPassword ? 'text' : 'password'}\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                {password ? (\r\n                  <IconButton\r\n                    className={css('FormControlButton')}\r\n                    aria-label=\"empty password\"\r\n                    onClick={() => {\r\n                      reset({\r\n                        password: undefined,\r\n                        confirm: control.getValues().confirm,\r\n                      })\r\n                      setPassword('')\r\n                    }}\r\n                    onMouseDown={(event) => event.preventDefault()}\r\n                  >\r\n                    <Close />\r\n                  </IconButton>\r\n                ) : null}\r\n\r\n                <IconButton\r\n                  className={css('FormControlButton')}\r\n                  aria-label=\"toggle visibility\"\r\n                  onClick={() => setShowPassword(!showPassword)}\r\n                  onMouseDown={(event) => event.preventDefault()}\r\n                >\r\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n\r\n          {errors.password ? (\r\n            <FormHelperText data-testid={test('PasswordError')}>\r\n              {errors.password.message}\r\n            </FormHelperText>\r\n          ) : null}\r\n        </FormControl>\r\n\r\n        <FormControl className={css('FormControl')} error={!!errors.confirm}>\r\n          <InputLabel className={css('FormControlLabel')} htmlFor=\"confirm\">\r\n            Confirm password\r\n          </InputLabel>\r\n\r\n          <Input\r\n            id=\"confirm\"\r\n            color=\"secondary\"\r\n            className={css('Password')}\r\n            inputProps={{ 'data-testid': test('Confirm') }}\r\n            inputRef={register({\r\n              validate: (value) => value === control.getValues().password,\r\n            })}\r\n            name=\"confirm\"\r\n            onChange={() => setPasswordConfirm(control.getValues().confirm)}\r\n            type={showPassword ? 'text' : 'password'}\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                {passwordConfirm ? (\r\n                  <IconButton\r\n                    className={css('FormControlButton')}\r\n                    aria-label=\"empty confirmation\"\r\n                    onClick={() => {\r\n                      reset({\r\n                        password: control.getValues().password,\r\n                        confirm: undefined,\r\n                      })\r\n                      setPasswordConfirm('')\r\n                    }}\r\n                    onMouseDown={(event) => event.preventDefault()}\r\n                  >\r\n                    <Close />\r\n                  </IconButton>\r\n                ) : null}\r\n\r\n                <IconButton\r\n                  className={css('FormControlButton')}\r\n                  aria-label=\"toggle visibility\"\r\n                  onClick={() => setShowPassword(!showPassword)}\r\n                  onMouseDown={(event) => event.preventDefault()}\r\n                >\r\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n\r\n          {errors.confirm ? (\r\n            <FormHelperText data-testid={test('PasswordConfirmError')}>\r\n              Passwords do not match\r\n            </FormHelperText>\r\n          ) : null}\r\n        </FormControl>\r\n\r\n        <p className={css('Description')}>\r\n          Finally, please choose a password to be used to export your secret phrase in the future.\r\n        </p>\r\n\r\n        <Button\r\n          color=\"primary\"\r\n          className={css('Button')}\r\n          data-testid={test('Submit')}\r\n          disableElevation={true}\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n        >\r\n          Register\r\n        </Button>\r\n\r\n        {/* TODO: remove after testing */}\r\n        <Button\r\n          color=\"primary\"\r\n          className={css('Button')}\r\n          disableElevation={true}\r\n          onClick={() => {\r\n            reset({ password: 'test1234', confirm: 'test1234' })\r\n            handleSubmit(onRegister)\r\n          }}\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n        >\r\n          Testing: use 'test1234'\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { Button } from '@material-ui/core'\r\n\r\nimport './StepThree.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\r\n\r\nexport const componentId = 'StepThree'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface StepThreeProps {\r\n  seed: string[]\r\n  onConfirm: () => void\r\n}\r\nexport const StepThree: React.FC<StepThreeProps> = ({ seed, onConfirm }) => {\r\n  const [buttonDisabled, setButtonDisabled] = useState(true)\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <section>\r\n        <SeedPanel\r\n          classes={[css('SeedPanel')]}\r\n          seed={seed}\r\n          check={true}\r\n          onCheck={(success: boolean) => setButtonDisabled(!success)}\r\n        />\r\n\r\n        <p className={css('Description')}>\r\n          Please confirm your secret phrase. We want to be sure that you saved it correctly.\r\n        </p>\r\n      </section>\r\n\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button', { Disabled: buttonDisabled })}\r\n        data-testid={test('ConfirmButton')}\r\n        disabled={buttonDisabled}\r\n        onClick={onConfirm}\r\n        variant=\"contained\"\r\n      >\r\n        Confirm\r\n      </Button>\r\n\r\n      {/* TODO: remove after testing */}\r\n      <Button\r\n        color=\"primary\"\r\n        className={css('Button')}\r\n        disableElevation={true}\r\n        onClick={onConfirm}\r\n        variant=\"contained\"\r\n      >\r\n        Testing: force confirm\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './Perl.scss'\r\n\r\nexport const componentId = 'Perl'\r\n\r\nconst css = cn(componentId)\r\n\r\nexport type PerlProps = {\r\n  classes?: string[]\r\n  num: number\r\n  isActive: boolean\r\n}\r\n\r\nexport const Perl: React.FC<PerlProps> = ({ classes = [], num, isActive }) => {\r\n  return (\r\n    <div className={css({ Active: isActive }, classes)}>\r\n      <div className={css('Number')}>{num}</div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { ArrowBack } from '@material-ui/icons'\r\nimport { Button, MobileStepper, Tooltip } from '@material-ui/core'\r\n\r\nimport './StepHeader.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { Perl } from 'register/components/Perl/Perl'\r\n\r\nexport const componentId = 'StepHeader'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type StepHeaderProps = {\r\n  step: number\r\n  total: number\r\n  onBack: () => void\r\n}\r\n\r\nexport const StepHeader: React.FC<StepHeaderProps> = ({ step, total, onBack }) => {\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <Tooltip title=\"Step back\" placement=\"top-end\">\r\n        <Button\r\n          className={css('Button')}\r\n          data-testid={test('BackButton')}\r\n          onClick={onBack}\r\n          disableRipple={true}\r\n        >\r\n          <ArrowBack className={css('Icon')} />\r\n        </Button>\r\n      </Tooltip>\r\n\r\n      <div className={css('Perls')} data-testid={test('Perls')}>\r\n        {[1, 2, 3, 4].map((value) => (\r\n          <Perl\r\n            classes={[css('Perl', { Active: value === step })]}\r\n            isActive={value === step}\r\n            key={value}\r\n            num={value}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <MobileStepper\r\n        className={css('Progress')}\r\n        variant=\"progress\"\r\n        steps={total + 1}\r\n        position=\"static\"\r\n        activeStep={step - 1}\r\n        backButton={<span className=\"hidden\">back</span>}\r\n        nextButton={<span className=\"hidden\">next</span>}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { cn } from '@bem-react/classname'\r\nimport { DevTool } from '@hookform/devtools'\r\nimport { useForm } from 'react-hook-form'\r\nimport React, { useState } from 'react'\r\nimport { Close, Visibility, VisibilityOff } from '@material-ui/icons'\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  FormHelperText,\r\n  IconButton,\r\n  Input,\r\n  InputAdornment,\r\n  InputLabel,\r\n} from '@material-ui/core'\r\n\r\nimport './ImportAccount.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { SeedPanel } from 'register/components/SeedPanel/SeedPanel'\r\nimport { validateSeed } from 'register/state/helpers/seed.helper'\r\n\r\nexport const componentId = 'ImportAccount'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nconst PasswordInputParams = {\r\n  required: 'Required',\r\n  pattern: {\r\n    value: /^(?=.*?\\d)(?=.*?[a-zA-Z])[a-zA-Z\\d]+$/,\r\n    message: 'Use letters and numbers',\r\n  },\r\n  minLength: {\r\n    value: 8,\r\n    message: 'Use at least 8 characters',\r\n  },\r\n}\r\n\r\nconst seedInputParamsFactory = (seed: string[]): any => ({\r\n  required: 'Required',\r\n  validate: (value: string[]) => validateSeed(seed),\r\n})\r\n\r\ninterface FormData {\r\n  seed: string\r\n  password: string\r\n  confirm: string\r\n}\r\n\r\nexport interface ImportAccountProps {\r\n  onBack: () => void\r\n  onImport: (data: { seed: string[]; password: string }) => void\r\n}\r\n\r\nexport const ImportAccount: React.FC<ImportAccountProps> = ({ onBack, onImport }) => {\r\n  const { handleSubmit, register, reset, control, errors } = useForm<FormData>({\r\n    criteriaMode: 'all',\r\n  })\r\n\r\n  const [seed, setSeed] = useState([] as string[])\r\n  const [showPassword, setShowPassword] = useState(false)\r\n  const [password, setPassword] = useState('')\r\n  const [passwordConfirm, setPasswordConfirm] = useState('')\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {process.env.NODE_ENV !== 'production' && <DevTool control={control} />}\r\n      <section>\r\n        <SeedPanel classes={[css('SeedPanel')]} seed={seed} />\r\n\r\n        <form\r\n          onSubmit={handleSubmit((data: FormData) => onImport({ password: data.password, seed }))}\r\n          className={css('Form')}\r\n        >\r\n          <FormControl className={css('FormControl')} error={!!errors.seed}>\r\n            <InputLabel color=\"secondary\" className={css('FormControlLabel')} htmlFor=\"seed\">\r\n              Secret phrase\r\n            </InputLabel>\r\n\r\n            <Input\r\n              id=\"seed\"\r\n              className={css('Seed')}\r\n              color=\"secondary\"\r\n              inputProps={{ 'data-testid': test('Seed') }}\r\n              inputRef={register(seedInputParamsFactory(seed)) as any}\r\n              name=\"seed\"\r\n              onChange={() =>\r\n                setSeed(\r\n                  control\r\n                    .getValues()\r\n                    .seed.split(/[ ,.]+/)\r\n                    .filter((str) => !!str)\r\n                )\r\n              }\r\n              type={'text'}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  {seed.length ? (\r\n                    <IconButton\r\n                      className={css('FormControlButton')}\r\n                      aria-label=\"empty seed\"\r\n                      onClick={() => {\r\n                        reset({\r\n                          seed: undefined,\r\n                          password: control.getValues().password,\r\n                          confirm: control.getValues().confirm,\r\n                        })\r\n                        setSeed([])\r\n                      }}\r\n                      onMouseDown={(event) => event.preventDefault()}\r\n                    >\r\n                      <Close />\r\n                    </IconButton>\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n                </InputAdornment>\r\n              }\r\n            />\r\n\r\n            {errors.seed ? (\r\n              <FormHelperText data-testid={test('SeedError')}>\r\n                {errors.seed.message || 'Input 12 uniq words divided with comas or spaces'}\r\n              </FormHelperText>\r\n            ) : null}\r\n          </FormControl>\r\n\r\n          <FormControl className={css('FormControl')} error={!!errors.password}>\r\n            <InputLabel className={css('FormControlLabel')} htmlFor=\"password\">\r\n              Password\r\n            </InputLabel>\r\n\r\n            <Input\r\n              id=\"password\"\r\n              className={css('Password')}\r\n              color=\"secondary\"\r\n              classes={{ input: css('PasswordInput') }}\r\n              inputProps={{ 'data-testid': test('Password') }}\r\n              inputRef={register(PasswordInputParams)}\r\n              name=\"password\"\r\n              onChange={() => setPassword(control.getValues().password)}\r\n              type={showPassword ? 'text' : 'password'}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  {password ? (\r\n                    <IconButton\r\n                      className={css('FormControlButton')}\r\n                      aria-label=\"empty password\"\r\n                      onClick={() => {\r\n                        reset({\r\n                          seed: control.getValues().seed,\r\n                          password: undefined,\r\n                          confirm: control.getValues().confirm,\r\n                        })\r\n                        setPassword('')\r\n                      }}\r\n                      onMouseDown={(event) => event.preventDefault()}\r\n                    >\r\n                      <Close />\r\n                    </IconButton>\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n\r\n                  <IconButton\r\n                    className={css('FormControlButton')}\r\n                    aria-label=\"toggle visibility\"\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                    onMouseDown={(event) => event.preventDefault()}\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            />\r\n\r\n            {errors.password ? (\r\n              <FormHelperText data-testid={test('PasswordError')}>\r\n                {errors.password.message}\r\n              </FormHelperText>\r\n            ) : null}\r\n          </FormControl>\r\n\r\n          <FormControl className={css('FormControl')} error={!!errors.confirm}>\r\n            <InputLabel className={css('FormControlLabel')} htmlFor=\"confirm\">\r\n              Confirm password\r\n            </InputLabel>\r\n\r\n            <Input\r\n              id=\"confirm\"\r\n              className={css('Password')}\r\n              color=\"secondary\"\r\n              classes={{ input: css('PasswordInput') }}\r\n              inputProps={{ 'data-testid': test('Confirm') }}\r\n              inputRef={register({\r\n                validate: (value) => value === control.getValues().password,\r\n              })}\r\n              name=\"confirm\"\r\n              onChange={() => setPasswordConfirm(control.getValues().confirm)}\r\n              type={showPassword ? 'text' : 'password'}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  {passwordConfirm ? (\r\n                    <IconButton\r\n                      className={css('FormControlButton')}\r\n                      aria-label=\"empty confirmation\"\r\n                      onClick={() => {\r\n                        reset({\r\n                          seed: control.getValues().seed,\r\n                          password: control.getValues().password,\r\n                          confirm: undefined,\r\n                        })\r\n                        setPasswordConfirm('')\r\n                      }}\r\n                      onMouseDown={(event) => event.preventDefault()}\r\n                    >\r\n                      <Close />\r\n                    </IconButton>\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n\r\n                  <IconButton\r\n                    className={css('FormControlButton')}\r\n                    aria-label=\"toggle visibility\"\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                    onMouseDown={(event) => event.preventDefault()}\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            />\r\n\r\n            {errors.confirm ? (\r\n              <FormHelperText data-testid={test('PasswordConfirmError')}>\r\n                Passwords do not match\r\n              </FormHelperText>\r\n            ) : null}\r\n          </FormControl>\r\n\r\n          <Button\r\n            color=\"primary\"\r\n            className={css('Button')}\r\n            data-testid={test('Import')}\r\n            disableElevation={true}\r\n            variant=\"contained\"\r\n            type=\"submit\"\r\n          >\r\n            Import\r\n          </Button>\r\n\r\n          <Button\r\n            color=\"primary\"\r\n            className={css('Button')}\r\n            data-testid={test('Back')}\r\n            disableElevation={true}\r\n            onClick={onBack}\r\n            variant=\"outlined\"\r\n          >\r\n            Back\r\n          </Button>\r\n        </form>\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { push } from 'connected-react-router'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport logo from 'assets/images/logo1.svg'\r\n\r\nimport './CreateAccountPage.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { StepOne } from 'register/components/StepOne/StepOne'\r\nimport { StepTwo } from 'register/components/StepTwo/StepTwo'\r\nimport { Welcome } from 'register/components/Welcome/Welcome'\r\nimport { StepFour } from 'register/components/StepFour/StepFour'\r\nimport { StepThree } from 'register/components/StepThree/StepThree'\r\nimport { StepHeader } from 'register/components/StepHeader/StepHeader'\r\nimport { ImportAccount } from 'register/components/ImportAccount/ImportAccount'\r\nimport { RegisterStage } from 'register/state/models/register-stage'\r\nimport { registerActions as actions } from 'register/state/register.actions'\r\nimport { getRegisterSeed, getRegisterStage, getShowSteps } from 'register/state/register.selectors'\r\n\r\nexport const componentId = 'CreateAccountPage'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\ntype CreateAccountProps = {}\r\n\r\nexport const CreateAccountPage: React.FC<CreateAccountProps> = () => {\r\n  const seed = useSelector(getRegisterSeed)\r\n  const stage = useSelector(getRegisterStage)\r\n  const showSteps = useSelector(getShowSteps)\r\n  const dispatch = useDispatch()\r\n\r\n  const components = () => {\r\n    switch (stage) {\r\n      case RegisterStage.STEP1:\r\n        return <StepOne onGenerate={() => dispatch(actions.generateSeed())} />\r\n      case RegisterStage.STEP2:\r\n        return <StepTwo seed={seed} onSubmit={() => dispatch(actions.submitSeed())} />\r\n      case RegisterStage.STEP3:\r\n        return <StepThree seed={seed} onConfirm={() => dispatch(actions.confirmSeed())} />\r\n      case RegisterStage.STEP4:\r\n        return <StepFour onRegister={(data) => dispatch(actions.register(data.password))} />\r\n      case RegisterStage.IMPORT:\r\n        return (\r\n          <ImportAccount\r\n            onImport={(data) => dispatch(actions.importAccount(data))}\r\n            onBack={() => dispatch(actions.stepBack())}\r\n          />\r\n        )\r\n      default:\r\n        return (\r\n          <Welcome\r\n            // TODO: remove next line after API is connected\r\n            onMockedLogin={() => dispatch(push('/wallet'))}\r\n            onCreate={() => dispatch(actions.startRegisterAccount())}\r\n            onImport={() => dispatch(actions.startImportAccount())}\r\n            onAbout={() => dispatch(push('/about'))}\r\n          />\r\n        )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {stage && showSteps ? (\r\n        <StepHeader step={stage} total={4} onBack={() => dispatch(actions.stepBack())} />\r\n      ) : null}\r\n\r\n      {components()}\r\n\r\n      {stage && showSteps ? (\r\n        <div className={css('Footer')}>\r\n          <img src={logo} alt=\"ZeroPool\" style={{ margin: 'auto' }} />\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './HelpPage.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'HelpPage'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type HelpPageProps = {}\r\n\r\nexport const HelpPage: React.FC<HelpPageProps> = () => {\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <h2> Wallet is in test mode. How to start:</h2>\r\n\r\n      <p>\r\n        We use Kovan test network to emulate operations with Ethereum and standard Near's test\r\n        network for the Near. Operations with Waves are not yet implemented.\r\n      </p>\r\n\r\n      <h3>Ethereum</h3>\r\n\r\n      <p>\r\n        To try it out you can install Metamask, select Kovan network, get some free Eth from the\r\n        <a href=\"https://gitter.im/kovan-testnet/faucet#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {' '}\r\n          kovan faucet{' '}\r\n        </a>\r\n        and send it to one of your Zero Pool <b>Eth</b> Wallet's address.\r\n      </p>\r\n\r\n      <h3>Near</h3>\r\n\r\n      <p>\r\n        You can register\r\n        <a href=\"https://wallet.testnet.near.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {' '}\r\n          Near test wallet{' '}\r\n        </a>\r\n        and send tokens recieved upon registration to one of your Zero Pool <b>Near</b> Wallet's\r\n        address and back.\r\n      </p>\r\n\r\n      <h3>Waves</h3>\r\n\r\n      <p>Operations with Waves are on final stage of implementation.</p>\r\n    </div>\r\n  )\r\n}\r\n","import { capFirstLetter } from './cap-first-letter'\r\n\r\nexport const cssMod = (value: string) => ({ [capFirstLetter(value)]: true })\r\n","export const capFirstLetter = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1)\r\n","import React, { HTMLAttributes } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './RoundButton.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { IconButton } from '@material-ui/core'\r\nimport { cssMod } from 'shared/util/css-mod'\r\n\r\nexport const componentId = 'RoundButton'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface RoundButtonProps extends HTMLAttributes<HTMLElement> {\r\n  label?: string\r\n  labelPosition?: 'top' | 'bottom' | 'left' | 'right'\r\n}\r\n\r\nexport const RoundButton: React.FC<RoundButtonProps> = ({\r\n  label,\r\n  labelPosition = 'bottom',\r\n  ...props\r\n}) => (\r\n  <div className={css({ NoLabel: !label })} data-testid={test()}>\r\n    <IconButton\r\n      className={css('Button', {}, [props.className])}\r\n      data-testid={test('Button')}\r\n      disableRipple={true}\r\n      disableFocusRipple={true}\r\n      disableTouchRipple={true}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.children}\r\n    </IconButton>\r\n\r\n    <span\r\n      className={css('Label', { ...cssMod(labelPosition) }, ['noselect'])}\r\n      data-testid={test('Label')}\r\n    >\r\n      {label}\r\n    </span>\r\n  </div>\r\n)\r\n","import React, { forwardRef, HTMLAttributes, memo } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './Icon.scss'\r\n\r\nimport { IconOption } from 'shared/components/Icon/IconOption'\r\n\r\nexport const componentId = 'Icon'\r\n\r\nconst css = cn(componentId)\r\n\r\nexport interface IconProps extends HTMLAttributes<HTMLElement> {\r\n  icon: IconOption\r\n  spaceOn?: 'right' | 'left'\r\n}\r\n\r\nconst component = memo(\r\n  forwardRef<HTMLElement, IconProps>(({ icon, spaceOn, ...props }, ref) => (\r\n    <i\r\n      {...props}\r\n      className={css(\r\n        {\r\n          [icon]: true,\r\n          RightMargin: spaceOn === 'right',\r\n          LeftMargin: spaceOn === 'left',\r\n          Clickable: !!props.onClick,\r\n        },\r\n        [props.className]\r\n      )}\r\n      ref={ref}\r\n    />\r\n  ))\r\n)\r\n\r\ncomponent.displayName = componentId\r\n\r\nexport const Icon = component\r\n","export enum WalletHeaderMode {\r\n  Info = 'Info', // only text information about opened view\r\n  Balance = 'Balance', // label strind and balance string with tokens amount if it passed\r\n}\r\n","import React, { HTMLAttributes } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { IconButton } from '@material-ui/core'\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos'\r\n\r\nimport './ExpandButton.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'ExpandButton'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface ExpendButtonProps extends HTMLAttributes<HTMLElement> {\r\n  expanded: boolean\r\n  click: () => void\r\n}\r\n\r\nexport const ExpandButton: React.FC<ExpendButtonProps> = ({ expanded, click, ...props }) => {\r\n  return (\r\n    <div\r\n      className={css({ Expended: expanded }, [props.className])}\r\n      data-testid={test()}\r\n      onClick={click}\r\n    >\r\n      <IconButton disableRipple={true} disableFocusRipple={true} disableTouchRipple={true}>\r\n        <ArrowForwardIosIcon />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n","import { cn } from '@bem-react/classname'\r\nimport { Tooltip } from '@material-ui/core'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport VerticalAlignTopIcon from '@material-ui/icons/VerticalAlignTop'\r\nimport VerticalAlignBottomIcon from '@material-ui/icons/VerticalAlignBottom'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport './WalletRow.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { RoundButton } from 'shared/components/RoundButton/RoundButton'\r\nimport { IconOption } from 'shared/components/Icon/IconOption'\r\nimport { Token } from 'shared/models/token'\r\nimport { Icon } from 'shared/components/Icon/Icon'\r\n\r\nimport { ExpandButton } from 'wallet/components/ExpandButton/ExpandButton'\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\n\r\nexport const componentId = 'WalletRow'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type WalletRowProps = {\r\n  rollUp: number\r\n  rate: number\r\n  token: Token\r\n  wallet: Wallet\r\n\r\n  onEditClick: (wallet: Wallet) => void\r\n  onReceiveClick: (wallet: Wallet) => void\r\n  onSendClick: (wallet: Wallet) => void\r\n  onRollUpClick: () => void\r\n  onWalletNameClick: (wallet: Wallet) => void\r\n}\r\n\r\nexport const WalletRow: React.FC<WalletRowProps> = ({\r\n  token,\r\n  wallet,\r\n  rate,\r\n  rollUp,\r\n  onReceiveClick,\r\n  onSendClick,\r\n  onEditClick,\r\n  onRollUpClick,\r\n  onWalletNameClick,\r\n}) => {\r\n  const [showButtons, setShowButtons] = useState(false)\r\n  const [toBeOpened, setToBeOpened] = useState(false)\r\n\r\n  const showButtonsHandler = () => {\r\n    if (showButtons) {\r\n      setShowButtons(false)\r\n    } else {\r\n      onRollUpClick()\r\n      setToBeOpened(true)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (toBeOpened) {\r\n      setToBeOpened(false)\r\n      setShowButtons(true)\r\n    } else {\r\n      setShowButtons(false)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [wallet.name, rollUp])\r\n\r\n  return (\r\n    <div className={css({ Expanded: showButtons }, ['noselect'])} data-testid={test()}>\r\n      <div className={css('Main')}>\r\n        <Icon className={css('Icon')} icon={wallet.token.symbol as IconOption} />\r\n\r\n        <div className={css('Values')}>\r\n          <Tooltip title={'View transactions'} placement=\"bottom\">\r\n            <div\r\n              className={css('WalletName', ['noselect'])}\r\n              onClick={() => onWalletNameClick(wallet)}\r\n            >\r\n              {wallet.name}\r\n            </div>\r\n          </Tooltip>\r\n\r\n          <div className={css('WalletAmount')}>\r\n            {wallet.amount} {token.symbol} ({(rate * wallet.amount).toFixed(2)} $)\r\n          </div>\r\n        </div>\r\n\r\n        <ExpandButton\r\n          className={css('Expander')}\r\n          expanded={showButtons}\r\n          click={showButtonsHandler}\r\n        />\r\n      </div>\r\n\r\n      <div className={css('Buttons', { Hidden: !showButtons })}>\r\n        <RoundButton className={css('Button1')} label={'Send'} onClick={() => onSendClick(wallet)}>\r\n          <VerticalAlignTopIcon />\r\n        </RoundButton>\r\n\r\n        <RoundButton\r\n          className={css('Button2')}\r\n          label={'Receive'}\r\n          onClick={() => onReceiveClick(wallet)}\r\n        >\r\n          <VerticalAlignBottomIcon />\r\n        </RoundButton>\r\n\r\n        <RoundButton className={css('Button2')} label={'Edit'} onClick={() => onEditClick(wallet)}>\r\n          <SettingsIcon />\r\n        </RoundButton>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { Button, TextField } from '@material-ui/core'\r\n\r\nimport './EditWallet.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'EditWallet'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type EditWalletProps = {\r\n  onRename: (name: string) => void\r\n  onDelete: () => void\r\n  onCancel: () => void\r\n  walletName: string\r\n}\r\n\r\nexport const EditWallet: React.FC<EditWalletProps> = ({\r\n  walletName,\r\n  onRename,\r\n  onDelete,\r\n  onCancel,\r\n}) => {\r\n  const [newName, setNewName] = useState('')\r\n  const minNameLength = 3\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <p className={css('Name')}> {walletName} </p>\r\n\r\n      <TextField\r\n        className={css('NewName')}\r\n        label={`New name (min. ${minNameLength} symbols)`}\r\n        value={newName}\r\n        onChange={(event) => {\r\n          setNewName(event.target.value)\r\n        }}\r\n      />\r\n\r\n      <Button\r\n        disabled={newName.length < minNameLength}\r\n        className={css('Rename')}\r\n        data-testid={test('Rename')}\r\n        onClick={() => onRename(newName)}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n      >\r\n        Rename\r\n      </Button>\r\n\r\n      <Button\r\n        className={css('Delete')}\r\n        data-testid={test('Delete')}\r\n        onClick={onDelete}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n      >\r\n        Delete\r\n      </Button>\r\n\r\n      <Button\r\n        className={css('Cancel')}\r\n        data-testid={test('Cancel')}\r\n        onClick={onCancel}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Button, TextField } from '@material-ui/core'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './DeleteWallet.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nexport const componentId = 'DeleteWallet'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type DeleteWalletProps = {\r\n  onDelete: () => void\r\n  onCancel: () => void\r\n  walletName: string\r\n}\r\n\r\nexport const DeleteWallet: React.FC<DeleteWalletProps> = ({ walletName, onCancel, onDelete }) => {\r\n  const [confirmName, setConfirmName] = useState('')\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <p className={css('Name')}> {walletName} </p>\r\n\r\n      <TextField\r\n        className={css('Confirm')}\r\n        label=\"Enter wallet name to confirm\"\r\n        value={confirmName}\r\n        onChange={(event) => {\r\n          setConfirmName(event.target.value)\r\n        }}\r\n      />\r\n\r\n      <Button\r\n        className={css('Delete')}\r\n        data-testid={test('Delete')}\r\n        disabled={confirmName !== walletName}\r\n        onClick={() => onDelete()}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n      >\r\n        Delete anyway\r\n      </Button>\r\n\r\n      <Button\r\n        className={css('Cancel')}\r\n        data-testid={test('Cancel')}\r\n        onClick={onCancel}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import { cn } from '@bem-react/classname'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport React, { useState } from 'react'\r\nimport { Dialog, DialogContent } from '@material-ui/core'\r\n\r\nimport './Wallets.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { RoundButton } from 'shared/components/RoundButton/RoundButton'\r\nimport { Token } from 'shared/models/token'\r\n\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\nimport { WalletRow } from 'wallet/components/WalletRow/WalletRow'\r\nimport { EditWallet } from 'wallet/components/EditWallet/EditWallet'\r\nimport { DeleteWallet } from 'wallet/components/DeleteWallet/DeleteWallet'\r\n\r\nexport const componentId = 'Wallets'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface WalletsHandlers {\r\n  onReceive: (wallet: Wallet) => void\r\n  onSend: (wallet: Wallet) => void\r\n  onDelete: (wallet: Wallet) => void\r\n  onRename: (wallet: Wallet, name: string) => void\r\n  onAdd: () => void\r\n  onOpen: (wallet: Wallet) => void\r\n}\r\nexport interface WalletsProps {\r\n  handlers: WalletsHandlers\r\n  rate: number\r\n  token: Token\r\n  wallets: Wallet[]\r\n}\r\n\r\nexport const Wallets: React.FC<WalletsProps> = ({ handlers, wallets, rate, token }) => {\r\n  const [rollUpSignal, setRollUpSignal] = useState(0)\r\n  const [openEditDialog, setOpenEditDialog] = useState(false)\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false)\r\n  const [selectedWallet, setSelectedWallet] = useState<Wallet | null>(null)\r\n\r\n  const handleWalletRename = (name: string) => {\r\n    if (selectedWallet) {\r\n      setOpenEditDialog(false)\r\n      handlers.onRename(selectedWallet, name)\r\n    } else {\r\n      throw new Error('No active wallet set!')\r\n    }\r\n  }\r\n  const handleWalletDelete = () => {\r\n    if (selectedWallet) {\r\n      setOpenDeleteDialog(false)\r\n      handlers.onDelete(selectedWallet)\r\n    } else {\r\n      throw new Error('No active wallet set!')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {wallets.map((wallet, index) => (\r\n        <WalletRow\r\n          rollUp={rollUpSignal}\r\n          wallet={wallet}\r\n          token={token}\r\n          rate={rate}\r\n          key={index}\r\n          onEditClick={(_wallet) => {\r\n            setSelectedWallet(_wallet)\r\n            setOpenEditDialog(true)\r\n          }}\r\n          onReceiveClick={handlers.onReceive}\r\n          onRollUpClick={() => setRollUpSignal(rollUpSignal + 1)}\r\n          onSendClick={handlers.onSend}\r\n          onWalletNameClick={handlers.onOpen}\r\n        />\r\n      ))}\r\n\r\n      <div className={css('Add')}>\r\n        <RoundButton label={'Add wallet'} onClick={handlers.onAdd}>\r\n          <AddIcon />\r\n        </RoundButton>\r\n      </div>\r\n\r\n      <Dialog\r\n        onClose={() => {\r\n          setOpenEditDialog(false)\r\n        }}\r\n        open={openEditDialog}\r\n        fullWidth={true}\r\n        maxWidth={'xs'}\r\n      >\r\n        <DialogContent dividers={true}>\r\n          <EditWallet\r\n            walletName={selectedWallet?.name || ''}\r\n            onRename={handleWalletRename}\r\n            onDelete={() => {\r\n              setOpenDeleteDialog(true)\r\n              setOpenEditDialog(false)\r\n            }}\r\n            onCancel={() => {\r\n              setOpenEditDialog(false)\r\n            }}\r\n          />\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        onClose={() => {\r\n          setOpenDeleteDialog(false)\r\n        }}\r\n        open={openDeleteDialog}\r\n        fullWidth={true}\r\n        maxWidth={'xs'}\r\n      >\r\n        <DialogContent dividers={true}>\r\n          <DeleteWallet\r\n            walletName={selectedWallet?.name || ''}\r\n            onDelete={handleWalletDelete}\r\n            onCancel={() => {\r\n              setOpenDeleteDialog(false)\r\n              setOpenEditDialog(true)\r\n            }}\r\n          />\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","import { Button, TextField, Tooltip } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './SendConfirmation.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\n\r\nexport const componentId = 'SendConfirmation'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type SendConfirmationProps = {\r\n  address: string\r\n  amount: number\r\n  fee: number\r\n  rate: number\r\n  wallet: Wallet\r\n  onConfirmClick: () => void\r\n}\r\n\r\nexport const SendConfirmation: React.FC<SendConfirmationProps> = ({\r\n  address,\r\n  amount,\r\n  fee,\r\n  rate,\r\n  wallet,\r\n  onConfirmClick,\r\n}) => {\r\n  const [processing, setProcessing] = useState(false)\r\n\r\n  const handleConfirm = () => {\r\n    onConfirmClick()\r\n    setProcessing(true)\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <div className={css('Title')}>Confirm transaction</div>\r\n\r\n      <form className={css('Inputs')} noValidate={true} autoComplete=\"off\">\r\n        <Tooltip title={wallet.name} placement=\"bottom\">\r\n          <TextField\r\n            className={css('From')}\r\n            id=\"from\"\r\n            label=\"From\"\r\n            value={wallet.name}\r\n            disabled={true}\r\n          />\r\n        </Tooltip>\r\n\r\n        <Tooltip title={address} placement=\"bottom\">\r\n          <TextField className={css('To')} id=\"to\" label=\"To\" value={address} disabled={true} />\r\n        </Tooltip>\r\n\r\n        <Tooltip title={amount} placement=\"bottom\">\r\n          <TextField\r\n            className={css('Amount')}\r\n            id=\"amount\"\r\n            label=\"Amount\"\r\n            value={`${amount} ${wallet.token.symbol}`}\r\n            disabled={true}\r\n          />\r\n        </Tooltip>\r\n\r\n        <TextField\r\n          className={css('Fee')}\r\n          id=\"fee\"\r\n          label=\"Network fee\"\r\n          value={`${fee} ${wallet.token.symbol} (${Math.round(rate * fee * 10000) / 10000} $)`}\r\n          disabled={true}\r\n        />\r\n      </form>\r\n\r\n      <div className={css('Confirm')}>\r\n        {processing ? (\r\n          <CircularProgress />\r\n        ) : (\r\n          <Button\r\n            className={css('ConfirmButton')}\r\n            data-testid={test('Confirm')}\r\n            onClick={handleConfirm}\r\n            color=\"primary\"\r\n            disableElevation={true}\r\n            variant=\"contained\"\r\n          >\r\n            Confirm\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport NumberFormat from 'react-number-format'\r\nimport { ArrowBack } from '@material-ui/icons'\r\nimport { Tooltip, Button } from '@material-ui/core'\r\n\r\nimport './WalletHeader.scss'\r\n\r\nimport { useNavigateBack } from 'shared/hooks/use-navigate-back'\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { WalletHeaderMode } from 'wallet/components/WalletHeader/WalletHeaderMode'\r\n\r\nexport const componentId = 'WalletHeader'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type WalletHeaderProps = {\r\n  fiatValue?: number\r\n  hideBackButton?: boolean\r\n  label: string\r\n  mode: WalletHeaderMode\r\n  tokenAmount?: number\r\n  tokenName?: string\r\n  tokenSymbol?: string\r\n  tokenRate?: number\r\n\r\n  onBackClick: () => void\r\n}\r\n\r\nexport const WalletHeader: React.FC<WalletHeaderProps> = ({\r\n  mode,\r\n  tokenAmount,\r\n  tokenSymbol,\r\n  label,\r\n  fiatValue,\r\n  hideBackButton,\r\n  tokenName,\r\n  onBackClick,\r\n}) => {\r\n  useNavigateBack(onBackClick)\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {!hideBackButton ? (\r\n        <Tooltip title=\"Step back\" placement=\"bottom\">\r\n          <Button\r\n            className={css('BackButton')}\r\n            data-testid={test('BackButton')}\r\n            onClick={onBackClick}\r\n            disableRipple={true}\r\n          >\r\n            <ArrowBack className={css('Icon')} />\r\n          </Button>\r\n        </Tooltip>\r\n      ) : null}\r\n\r\n      <div className={css('Title')}>\r\n        <span>{label}</span>\r\n      </div>\r\n\r\n      <div className={css('Amount')}>\r\n        {mode === WalletHeaderMode.Info ? null : (\r\n          <NumberFormat\r\n            className={css('FiatAmount')}\r\n            data-testid={test('FiatAmount')}\r\n            value={fiatValue}\r\n            displayType={'text'}\r\n            thousandSeparator={true}\r\n            suffix={' $'}\r\n            decimalScale={2}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <div className={css('Tokens')}>\r\n        {tokenAmount && tokenName ? `${tokenAmount} ${tokenSymbol}` : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useRef } from 'react'\r\n\r\n// Intercepts browser's Navigate Back event\r\nexport const useNavigateBack = (callback: () => void): void => {\r\n  const isInitialMount = useRef(true)\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false\r\n\r\n      window.addEventListener(\r\n        'popstate',\r\n        (event) => {\r\n          window.history.pushState(null, '', document.URL)\r\n          callback()\r\n        },\r\n        false\r\n      )\r\n    } else {\r\n      // Fix browser history\r\n      window.history.pushState(null, '', document.URL)\r\n    }\r\n  }, [callback])\r\n}\r\n","import { TokenSymbol } from 'shared/models'\r\n\r\nexport const total = (\r\n  amounts: Record<TokenSymbol, number>,\r\n  rates: Record<TokenSymbol, number>,\r\n  filter?: TokenSymbol\r\n): number => {\r\n  let t = 0\r\n\r\n  for (const symbol in amounts) {\r\n    if (amounts.hasOwnProperty(symbol) && rates.hasOwnProperty(symbol)) {\r\n      if (filter && filter !== symbol) {\r\n        continue\r\n      }\r\n\r\n      t += amounts[symbol] * rates[symbol]\r\n    }\r\n  }\r\n\r\n  return t\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nimport './TokenRow.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { IconOption } from 'shared/components/Icon/IconOption'\r\nimport { Token } from 'shared/models/token'\r\nimport { Icon } from 'shared/components/Icon/Icon'\r\n\r\nexport const componentId = 'TokenRow'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface TokenRowProps {\r\n  amount: number\r\n  onSelectToken: (token: Token) => void\r\n  rate: number\r\n  token: Token\r\n}\r\n\r\nexport const TokenRow: React.FC<TokenRowProps> = ({ amount = 0, token, rate, onSelectToken }) => {\r\n  return (\r\n    <div\r\n      className={css({}, ['noselect'])}\r\n      data-testid={test()}\r\n      onClick={() => onSelectToken(token)}\r\n    >\r\n      <div className={css('Rates')}>\r\n        <Icon icon={token.symbol as IconOption} />\r\n\r\n        <span className={css('Name')}>{token.name}</span>\r\n\r\n        <NumberFormat\r\n          className={css('Rate')}\r\n          data-testid={test('Rate')}\r\n          value={rate}\r\n          displayType={'text'}\r\n          thousandSeparator={true}\r\n          suffix={' $'}\r\n          decimalScale={2}\r\n        />\r\n      </div>\r\n\r\n      <div className={css('Amounts')}>\r\n        <NumberFormat\r\n          className={css('TokenAmount')}\r\n          data-testid={test('TokenAmount')}\r\n          value={amount}\r\n          displayType={'text'}\r\n          thousandSeparator={true}\r\n          suffix={' ' + token.symbol}\r\n          decimalScale={6}\r\n        />\r\n\r\n        <NumberFormat\r\n          className={css('FiatAmount')}\r\n          data-testid={test('FiatAmount')}\r\n          value={amount * rate}\r\n          displayType={'text'}\r\n          thousandSeparator={true}\r\n          suffix={' $'}\r\n          decimalScale={2}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './Balance.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { Token, TokenSymbol } from 'shared/models/token'\r\n\r\nimport { TokenRow } from 'wallet/components/TokenRow/TokenRow'\r\n\r\nexport const componentId = 'Balance'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport interface BalanceProps {\r\n  amounts: Record<TokenSymbol, number>\r\n  onSelectToken: (token: Token) => void\r\n  rates: Record<string, number>\r\n  tokens: string[]\r\n  tokensRecord: Record<string, Token>\r\n}\r\n\r\nexport const Balance: React.FC<BalanceProps> = ({\r\n  amounts,\r\n  rates,\r\n  tokens,\r\n  tokensRecord,\r\n  onSelectToken,\r\n}) => {\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {tokens.map((tokenSymbol, index) => (\r\n        <TokenRow\r\n          onSelectToken={onSelectToken}\r\n          amount={amounts[tokenSymbol]}\r\n          token={tokensRecord[tokenSymbol]}\r\n          rate={rates[tokenSymbol]}\r\n          key={index}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { Tooltip } from '@material-ui/core'\r\nimport { useSnackbar } from 'notistack'\r\n\r\nimport './Receive.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { Token } from 'shared/models'\r\n\r\nexport const componentId = 'Receive'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type ReceiveProps = {\r\n  address: string\r\n  rate: number\r\n  token: Token\r\n}\r\n\r\nexport const Receive: React.FC<ReceiveProps> = ({ address, rate, token }) => {\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const QRCode = require('qrcode.react')\r\n  const handleCodeClick = (): void => {\r\n    navigator.clipboard.writeText(address).then(\r\n      () => {\r\n        enqueueSnackbar('Address copied to the clipboard', {\r\n          variant: 'success',\r\n        })\r\n      },\r\n      (err) => {\r\n        enqueueSnackbar(`Can't access clipboard`, { variant: 'error' })\r\n      }\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <div className={css('Title')}>Receive {token.symbol}</div>\r\n\r\n      <Tooltip title={address} placement=\"bottom\">\r\n        <div className={css('Code')} onClick={handleCodeClick}>\r\n          <QRCode value={address} />\r\n        </div>\r\n      </Tooltip>\r\n    </div>\r\n  )\r\n}\r\n","import { isEthereumAddress } from 'shared/helpers/validators/eth.validator'\r\nimport { TokenSymbol } from 'shared/models'\r\n\r\nexport const validateAddress = (address: string, symbol: TokenSymbol): boolean | undefined => {\r\n  let result\r\n  const supportedSymbols = ['ETH', 'WAWES', 'NEAR']\r\n\r\n  if (!supportedSymbols.includes(symbol)) {\r\n    return undefined\r\n  }\r\n\r\n  switch (symbol) {\r\n    case 'ETH':\r\n      result = isEthereumAddress(address)\r\n      break\r\n\r\n    case 'WAVES':\r\n      result = true\r\n      break\r\n\r\n    case 'NEAR':\r\n      result = true\r\n      break\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport const beautifyAdress = (address: string, limit = 6): string => {\r\n  let result = ''\r\n\r\n  if (address.length > limit) {\r\n    result = address.substring(0, limit) + '...' + address.substring(address.length - 4)\r\n  } else result = address\r\n  \r\n  return result\r\n}\r\n","// import jsSHA from 'jssha'\r\n\r\n/**\r\n * Checks if the given string is an address\r\n *\r\n * @method isAddress\r\n * @param {String} address the given HEX adress\r\n * @return {Boolean}\r\n */\r\nexport const isEthereumAddress = (address: string) => {\r\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\r\n    // check if it has the basic requirements of an address\r\n    return false\r\n  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\r\n    // If it's all small caps or all all caps, return true\r\n    return true\r\n  } else {\r\n    // hardcoded for test tetworks\r\n    return /^(0x)?[0-9a-fA-F]{40}$/.test(address)\r\n    // Otherwise check each case\r\n    // return isChecksumAddress(address);\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if the given string is a checksummed address\r\n *\r\n * @method isChecksumAddress\r\n * @param {String} address the given HEX adress\r\n * @return {Boolean}\r\n */\r\n// const isChecksumAddress = (address: string) => {\r\n//   let addressHash: string\r\n//   const shaObj = new jsSHA('SHA-512', 'TEXT', { encoding: 'UTF8' })\r\n\r\n//   address = address.replace('0x', '')\r\n//   shaObj.update(address.toLowerCase())\r\n//   addressHash = shaObj.getHash('HEX')\r\n\r\n//   for (let i = 0; i < 40; i++) {\r\n//     // the nth letter should be uppercase if the nth digit of casemap is 1\r\n//     if (\r\n//       (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) ||\r\n//       (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])\r\n//     ) {\r\n//       return false\r\n//     }\r\n//   }\r\n//   return true\r\n// }\r\n","import { Button, TextField } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { useSnackbar } from 'notistack'\r\nimport NumberFormat from 'react-number-format'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport './Send.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\nimport { validateAddress } from 'shared/helpers/addres.helper'\r\n\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\n\r\nexport const componentId = 'Send'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type SendProps = {\r\n  rate: number\r\n  wallet: Wallet\r\n  onNextClick: (address: string, amount: number) => void\r\n}\r\n\r\nexport const Send: React.FC<SendProps> = ({ rate, wallet, onNextClick }) => {\r\n  const [address, setAddress] = useState('')\r\n  const [amount, setAmount] = useState('')\r\n  const [amountValid, setAmountValid] = useState(true)\r\n  const { enqueueSnackbar } = useSnackbar()\r\n\r\n  const handleAddressChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setAddress(event.target.value)\r\n  }\r\n\r\n  const handleAddressPaste = async (event: React.MouseEvent) => {\r\n    const text = await navigator.clipboard.readText()\r\n\r\n    if (validateAddress(text, wallet.token.symbol)) {\r\n      setAddress(text)\r\n      enqueueSnackbar('Address added from the clipboard', {\r\n        variant: 'success',\r\n      })\r\n    } else {\r\n      enqueueSnackbar('Clipboard contains bad address', { variant: 'error' })\r\n    }\r\n  }\r\n\r\n  const handleAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (/^\\d+(\\.\\d{1,9})?$/.test(event.target.value)) {\r\n      setAmount(event.target.value)\r\n      setAmountValid(Number(event.target.value) > 0)\r\n    } else {\r\n      setAmount(event.target.value)\r\n      setAmountValid(false)\r\n    }\r\n  }\r\n\r\n  const handleAmountMaximise = (event: React.MouseEvent) => {\r\n    setAmount(wallet.amount.toString())\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      <div className={css('Title')}>Send {wallet.token.symbol}</div>\r\n\r\n      <form className={css('Inputs')} noValidate={true} autoComplete=\"off\">\r\n        <TextField\r\n          className={css('AddressInput')}\r\n          id=\"address\"\r\n          label=\"Address\"\r\n          value={address}\r\n          onChange={handleAddressChange}\r\n        />\r\n\r\n        <span className={css('AddressInputPaste')} onClick={handleAddressPaste}>\r\n          Paste\r\n        </span>\r\n\r\n        <TextField\r\n          className={css('AmountInput', { Invalid: !amountValid })}\r\n          id=\"amount\"\r\n          label=\"Token amount\"\r\n          value={amount}\r\n          onChange={handleAmountChange}\r\n        />\r\n\r\n        <span className={css('AmountInputMax')} onClick={handleAmountMaximise}>\r\n          Max\r\n        </span>\r\n\r\n        <NumberFormat\r\n          className={css('FiatAmount')}\r\n          data-testid={test('FiatAmount')}\r\n          value={+amount * rate || 0}\r\n          displayType={'text'}\r\n          thousandSeparator={true}\r\n          prefix={'(= '}\r\n          suffix={' $)'}\r\n          decimalScale={2}\r\n        />\r\n      </form>\r\n\r\n      <div className={css('Next')}>\r\n        <Button\r\n          className={css('NextButton')}\r\n          data-testid={test('Next')}\r\n          onClick={() => onNextClick(address, +amount)}\r\n          color=\"primary\"\r\n          disabled={!(address && +amount > 0 && amountValid)}\r\n          disableElevation={!(address && amount)}\r\n          variant=\"contained\"\r\n        >\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import moment from 'moment'\r\nimport { SortedTransactions } from 'wallet/state/models/sorted-transactions'\r\nimport { Transaction } from 'wallet/state/models/transaction'\r\n\r\nconst sortByDays = (transactions: Transaction[]) => {\r\n  const result: SortedTransactions[] = []\r\n  const lastElement = <T>(arr: T[]) => arr[arr.length - 1]\r\n  const m = moment\r\n  const isAfter = (\r\n    currentTimestamp: number,\r\n    lastTimestamp: number,\r\n    check: 'day' | 'week' | 'month' = 'day'\r\n  ): boolean => m(currentTimestamp).isAfter(m(lastTimestamp), check)\r\n\r\n  transactions\r\n    .slice(0)\r\n    .reverse()\r\n    .forEach((transaction, index) => {\r\n      if ((transaction.timestamp + '').length !== 13) {\r\n        throw Error('Timestamps should have 13 digits!')\r\n      }\r\n\r\n      if (!index) {\r\n        result.push({\r\n          date: m(transaction.timestamp).format('D MMM YYYY'),\r\n          transactions: [transaction],\r\n        })\r\n      } else {\r\n        if (\r\n          isAfter(lastElement(lastElement(result).transactions).timestamp, transaction.timestamp)\r\n        ) {\r\n          result.push({\r\n            date: m(transaction.timestamp).format('D MMM YYYY'),\r\n            transactions: [transaction],\r\n          })\r\n        } else {\r\n          lastElement(result).transactions.push(transaction)\r\n        }\r\n      }\r\n    })\r\n\r\n  return result\r\n}\r\n\r\nexport default {\r\n  sortByDays,\r\n}\r\n","import React, { useState } from 'react'\r\nimport { cn } from '@bem-react/classname'\r\nimport { useSnackbar } from 'notistack'\r\nimport { CircularProgress } from '@material-ui/core'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport './Transactions.scss'\r\n\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport { Wallet } from 'wallet/state/models'\r\nimport { getTransactions } from 'wallet/state/wallet.selectors'\r\nimport { Transaction } from 'wallet/state/models/transaction'\r\nimport transactionHelper from 'wallet/state/helpers/transaction.helper'\r\nimport { SortedTransactions } from 'wallet/state/models/sorted-transactions'\r\nimport { beautifyAdress } from 'shared/helpers/addres.helper'\r\n\r\nexport const componentId = 'Transactions'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type TransactionsProps = {\r\n  wallet: Wallet\r\n}\r\n\r\nexport const Transactions: React.FC<TransactionsProps> = ({ wallet }) => {\r\n  let sorted: SortedTransactions[] = []\r\n  const dispatch = useDispatch()\r\n  const transactions = useSelector(getTransactions)\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const [opened, setOpened] = useState<boolean[]>([])\r\n\r\n  const incoming = (transaction: Transaction) =>\r\n    wallet.address.toLowerCase() === transaction.to.toLocaleLowerCase()\r\n\r\n  const openHandler = (index: number) => {\r\n    const arr = [...opened]\r\n\r\n    arr[index] = !opened[index]\r\n    setOpened(arr)\r\n  }\r\n\r\n  if (transactions?.length) {\r\n    try {\r\n      sorted = transactionHelper.sortByDays(transactions)\r\n\r\n      if (!opened.length) {\r\n        const arr: boolean[] = []\r\n\r\n        sorted.forEach(() => arr.push(false))\r\n        arr[0] = true\r\n        setOpened(arr)\r\n      }\r\n    } catch (e) {\r\n      enqueueSnackbar(e.message, { variant: 'error' })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={css()} data-testid={test()}>\r\n      {transactions ? (\r\n        sorted.map((day, i) => (\r\n          <div className={css('Day')} key={i}>\r\n            <div className={css('Date')}>\r\n              <span className={css('Arrow', { Down: opened[i] })} onClick={() => openHandler(i)}>\r\n                {'>'}\r\n              </span>\r\n\r\n              {' ' + day.date}\r\n            </div>\r\n\r\n            {day.transactions.map((transaction, j) => (\r\n              <div className={css('Transaction', { Open: opened[i] })} key={j}>\r\n                <span>{incoming(transaction) ? '<--  ' : '-->  '}</span>\r\n\r\n                {incoming(transaction) ? (\r\n                  <span>\r\n                    <b>From: </b>\r\n                    {beautifyAdress(transaction.from)}\r\n                  </span>\r\n                ) : (\r\n                  <span>\r\n                    <b>To: </b> {beautifyAdress(transaction.to)}\r\n                  </span>\r\n                )}\r\n\r\n                <span>\r\n                  <b>\r\n                    {' ' + transaction.amount} {wallet.token.symbol}\r\n                  </b>\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  SwipeableDrawer,\r\n  Badge,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  makeStyles,\r\n  Tooltip,\r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport AttachMoneyOutlinedIcon from '@material-ui/icons/AttachMoneyOutlined'\r\nimport NotificationsIcon from '@material-ui/icons/Notifications'\r\nimport BuildOutlinedIcon from '@material-ui/icons/BuildOutlined'\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline'\r\nimport { useSnackbar } from 'notistack'\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy'\r\nimport RefreshIcon from '@material-ui/icons/Refresh'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport { cn } from '@bem-react/classname'\r\n\r\nimport logo from 'assets/images/logo1.svg'\r\nimport { Token } from 'shared/models/token'\r\nimport { HelpPage } from 'shared/components/HelpPage/HelpPage'\r\nimport { AboutPage } from 'shared/components/AboutPage/AboutPage'\r\nimport { testIdBuilder } from 'shared/helpers/test/test-id-builder.helper'\r\n\r\nimport {\r\n  getActiveToken,\r\n  getActiveView,\r\n  getSupportedTokens,\r\n  getSupportedTokensRecord,\r\n  getUsdRates,\r\n  getAmounts,\r\n  getWalletsForActiveToken,\r\n  getActiveWallet,\r\n  getSendData,\r\n  getSeed,\r\n} from 'wallet/state/wallet.selectors'\r\nimport { Wallets, WalletsHandlers } from 'wallet/components/Wallets/Wallets'\r\nimport { SendConfirmation } from 'wallet/components/SendConfirmation/SendConfirmation'\r\nimport { WalletHeaderMode } from 'wallet/components/WalletHeader/WalletHeaderMode'\r\nimport { walletActions } from 'wallet/state/wallet.actions'\r\nimport { WalletHeader } from 'wallet/components/WalletHeader/WalletHeader'\r\nimport { total } from 'wallet/state/helpers/total.helper'\r\nimport { WalletView } from 'wallet/state/models/wallet-view'\r\nimport { Balance } from 'wallet/components/Balance/Balance'\r\nimport { Receive } from 'wallet/components/Receive/Receive'\r\nimport { Wallet } from 'wallet/state/models/wallet'\r\nimport { Send } from 'wallet/components/Send/Send'\r\nimport { Transactions } from 'wallet/containers/Transactions/Transactions'\r\n\r\nexport const componentId = 'WalletPage'\r\n\r\nconst css = cn(componentId)\r\nconst test = testIdBuilder(componentId)\r\n\r\nexport type WalletPageProps = {}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: 'white',\r\n    flexGrow: 1,\r\n    flexDirection: 'column',\r\n    display: 'flex',\r\n    height: '100vh',\r\n    minWidth: '350px',\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  toolbar: {\r\n    alignItems: 'flex-start',\r\n    flexDirection: 'column',\r\n    paddingTop: theme.spacing(1),\r\n    minHeight: 160,\r\n    paddingBottom: '0',\r\n  },\r\n  toolbarHeader: {\r\n    display: 'flex',\r\n    borderBottom: `${theme.palette.grey[600]} 1px solid`,\r\n    width: '100%',\r\n  },\r\n  toolbarHeaderItems: {\r\n    display: 'flex',\r\n    flexGrow: 1,\r\n    justifyContent: 'flex-end',\r\n    marginRight: '-15px',\r\n  },\r\n  toolbarHeaderItemsEdgeStart: {\r\n    marginLeft: '-15px',\r\n  },\r\n  toolbarBody: {\r\n    margin: 'auto',\r\n    position: 'relative',\r\n    width: '100%',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    alignSelf: 'flex-end',\r\n  },\r\n  drower: {},\r\n  drowerItem: {\r\n    paddingRight: '20px',\r\n  },\r\n  drowerItemIcon: {\r\n    color: theme.palette.grey[600],\r\n  },\r\n  drowerItemText: {},\r\n  wrapper: {\r\n    display: 'flex',\r\n    margin: '50px auto',\r\n  },\r\n  footer: {\r\n    backgroundColor: '#020941',\r\n    bottom: 0,\r\n    display: 'flex',\r\n    position: 'fixed',\r\n    height: '70px',\r\n    width: '100%',\r\n  },\r\n  AboutPage: {\r\n    height: '50vh',\r\n  },\r\n  zeroPaddingRight: {\r\n    paddingRight: '0',\r\n  },\r\n}))\r\n\r\nexport const WalletPage: React.FC<WalletPageProps> = () => {\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const [state, setState] = useState({ drower: false })\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles()\r\n  const view = useSelector(getActiveView)\r\n  const token = useSelector(getActiveToken)\r\n  const rates = useSelector(getUsdRates)\r\n  const tokens = useSelector(getSupportedTokens)\r\n  const amounts = useSelector(getAmounts) || {}\r\n  const tokensRecord = useSelector(getSupportedTokensRecord)\r\n  const wallet = useSelector(getActiveWallet)\r\n  const wallets = useSelector(getWalletsForActiveToken)\r\n  const send = useSelector(getSendData)\r\n  const seed = useSelector(getSeed)\r\n\r\n  const handleExportSeed = () => {\r\n    navigator.clipboard.writeText(seed || 'No seed set').then(\r\n      () => {\r\n        enqueueSnackbar('Seed copied to the clipboard', { variant: 'success' })\r\n      },\r\n      (err) => {\r\n        enqueueSnackbar(`Can't access clipboard`, { variant: 'error' })\r\n      }\r\n    )\r\n  }\r\n\r\n  const toggleDrawer = (open?: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\r\n    if (\r\n      event &&\r\n      event.type === 'keydown' &&\r\n      ((event as React.KeyboardEvent).key === 'Tab' ||\r\n        (event as React.KeyboardEvent).key === 'Shift')\r\n    ) {\r\n      return\r\n    }\r\n\r\n    setState({ ...state, drower: open === undefined ? !state.drower : open })\r\n  }\r\n\r\n  const drowerMenu = () => (\r\n    <div\r\n      className={classes.drower}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(false)}\r\n      onKeyDown={toggleDrawer(false)}\r\n    >\r\n      <List>\r\n        {[WalletView.Balance, WalletView.Reset].map((text, index) => (\r\n          <ListItem\r\n            className={classes.drowerItem}\r\n            button={true}\r\n            key={text}\r\n            onClick={() => dispatch(walletActions.menu(text))}\r\n          >\r\n            <ListItemIcon className={classes.drowerItemIcon}>\r\n              {[<AttachMoneyOutlinedIcon key={index} />, <BuildOutlinedIcon key={index} />][index]}\r\n            </ListItemIcon>\r\n            <ListItemText className={classes.drowerItemText} primary={text} />\r\n          </ListItem>\r\n        ))}\r\n        <ListItem className={classes.drowerItem} button={true} onClick={handleExportSeed}>\r\n          <ListItemIcon className={classes.drowerItemIcon}>\r\n            <FileCopyIcon />\r\n          </ListItemIcon>\r\n          <ListItemText className={classes.drowerItemText} primary=\"Export Seed\" />\r\n        </ListItem>\r\n      </List>\r\n\r\n      <Divider />\r\n\r\n      <List>\r\n        {[WalletView.Help, WalletView.About].map((text, index) => (\r\n          <ListItem button={true} key={text} onClick={() => dispatch(walletActions.menu(text))}>\r\n            <ListItemIcon className={css('DrowerMenu-ItemIcon')}>\r\n              {[<InfoOutlinedIcon key={index} />, <HelpOutlineIcon key={index} />][index]}\r\n            </ListItemIcon>\r\n            <ListItemText className={css('DrowerMenu-ItemText')} primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  )\r\n\r\n  const walletsButtonHandlers: WalletsHandlers = {\r\n    onReceive: (_wallet: Wallet) => dispatch(walletActions.openReceiveView(_wallet)),\r\n    onSend: (_wallet: Wallet) => dispatch(walletActions.openSendInitialView(_wallet)),\r\n    onRename: (_wallet: Wallet, name: string) =>\r\n      dispatch(walletActions.edit({ wallet: _wallet, name })),\r\n    onDelete: (_wallet: Wallet) => dispatch(walletActions.hideWallet(_wallet)),\r\n    onAdd: () => dispatch(walletActions.addWallet()),\r\n    onOpen: (_wallet: Wallet) => dispatch(walletActions.openTransactionsView(_wallet)),\r\n  }\r\n\r\n  const actualView = () => {\r\n    switch (view) {\r\n      case WalletView.Wallets:\r\n        return token ? (\r\n          <Wallets\r\n            handlers={walletsButtonHandlers}\r\n            rate={rates[token.symbol]}\r\n            token={token}\r\n            wallets={wallets ? Object.values(wallets) : []}\r\n          />\r\n        ) : null\r\n      case WalletView.Send:\r\n        return wallet && token ? (\r\n          <Send\r\n            rate={rates[token.symbol]}\r\n            wallet={wallet}\r\n            onNextClick={(address, amount) =>\r\n              dispatch(\r\n                walletActions.prepareSendConfirmView({\r\n                  wallet,\r\n                  address,\r\n                  amount,\r\n                })\r\n              )\r\n            }\r\n          />\r\n        ) : null\r\n      case WalletView.SendConfirmation:\r\n        return send && token && wallet ? (\r\n          <SendConfirmation\r\n            amount={send.amount}\r\n            address={send.address}\r\n            fee={send.fee}\r\n            rate={rates[token.symbol]}\r\n            wallet={wallet}\r\n            onConfirmClick={() => dispatch(walletActions.send())}\r\n          />\r\n        ) : null\r\n      case WalletView.Receive:\r\n        return wallet && token ? (\r\n          <Receive address={wallet.address} rate={rates[wallet.token.symbol]} token={token} />\r\n        ) : null\r\n      case WalletView.Transactions:\r\n        return wallet ? <Transactions wallet={wallet} /> : null\r\n      case WalletView.About:\r\n        return <AboutPage showBackButton={false} />\r\n      case WalletView.Help:\r\n        return <HelpPage />\r\n      default:\r\n        return (\r\n          <Balance\r\n            amounts={amounts}\r\n            onSelectToken={(t: Token) => dispatch(walletActions.openWalletsView(t))}\r\n            rates={rates}\r\n            tokens={tokens.map((i) => i.symbol)}\r\n            tokensRecord={tokensRecord}\r\n          />\r\n        )\r\n    }\r\n  }\r\n\r\n  const walletHeaderMode = [WalletView.Help, WalletView.About].includes(view)\r\n    ? WalletHeaderMode.Info\r\n    : WalletHeaderMode.Balance\r\n\r\n  const walletHeaderLabels: Record<WalletView, string> = {\r\n    [WalletView.Balance]: 'Overall balance',\r\n    [WalletView.Wallets]: `${token?.name} wallets`,\r\n    [WalletView.Receive]: `${wallet?.name}`,\r\n    [WalletView.Send]: `${wallet?.name}`,\r\n    [WalletView.SendConfirmation]: `${wallet?.name}`,\r\n    [WalletView.Transactions]: `${wallet?.name}`,\r\n    [WalletView.About]: 'About',\r\n    [WalletView.Help]: 'Help',\r\n    [WalletView.Reset]: '',\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(walletActions.openBalanceView())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className={css('', [classes.root])} data-testid={test()} id={componentId}>\r\n      <AppBar position=\"static\" className={css('AppBar')}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <div className={classes.toolbarHeader}>\r\n            <IconButton\r\n              classes={{ edgeStart: classes.toolbarHeaderItemsEdgeStart }}\r\n              onClick={toggleDrawer()}\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n              edge=\"start\"\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n\r\n            <div className={classes.toolbarHeaderItems}>\r\n              <Tooltip title=\"No new messages\" placement=\"bottom\">\r\n                <IconButton color=\"inherit\" className={classes.zeroPaddingRight}>\r\n                  <Badge badgeContent={0} color=\"secondary\">\r\n                    <NotificationsIcon />\r\n                  </Badge>\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <Tooltip title=\"Update balances\" placement=\"bottom\">\r\n                <IconButton color=\"inherit\" onClick={() => dispatch(walletActions.updateWallets())}>\r\n                  <RefreshIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classes.toolbarBody}>\r\n            <WalletHeader\r\n              mode={walletHeaderMode}\r\n              label={walletHeaderLabels[view]}\r\n              hideBackButton={view === WalletView.Balance}\r\n              fiatValue={\r\n                walletHeaderMode === WalletHeaderMode.Info\r\n                  ? undefined\r\n                  : total(amounts, rates, token?.symbol)\r\n              }\r\n              tokenAmount={token ? amounts[token.symbol] : undefined}\r\n              tokenSymbol={token?.symbol}\r\n              tokenName={token?.name}\r\n              onBackClick={() => dispatch(walletActions.headerBack())}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <div className={css('Wrapper', [classes.wrapper])}>{actualView()}</div>\r\n\r\n      <div className={css('Footer', [classes.footer])}>\r\n        <img src={logo} alt=\"ZeroPool\" style={{ margin: 'auto' }} />\r\n      </div>\r\n\r\n      <SwipeableDrawer\r\n        open={state.drower}\r\n        onClose={toggleDrawer(false)}\r\n        onOpen={toggleDrawer(true)}\r\n      >\r\n        {drowerMenu()}\r\n      </SwipeableDrawer>\r\n    </div>\r\n  )\r\n}\r\n","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nconst COLOR_PRIMARY = '#020941'\r\nconst COLOR_BLUE_PRIMARY = '#2699fb'\r\nconst COLOR_BLUE_SECCONDARY = '#84c6ff'\r\n// const COLOR_BLUE_LIGHT = '#c4e1fa';\r\nconst WHITE = 'white'\r\nconst GREEN = '#4be3fa'\r\nconst INPUT_UNDERLINE_COLOR = COLOR_BLUE_SECCONDARY\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    action: {\r\n      disabledBackground: COLOR_BLUE_SECCONDARY,\r\n      disabled: 'set color of text here',\r\n    },\r\n    primary: {\r\n      main: COLOR_PRIMARY,\r\n    },\r\n  },\r\n\r\n  overrides: {\r\n    MuiAppBar: {\r\n      colorPrimary: {\r\n        backgroundColor: COLOR_PRIMARY,\r\n      },\r\n    },\r\n\r\n    MuiButton: {\r\n      root: {\r\n        fontSize: '1rem',\r\n        fontFamily: '\"Exo 2\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        margin: '5px',\r\n      },\r\n      outlinedPrimary: {\r\n        backgroundColor: COLOR_PRIMARY,\r\n        border: `solid 2px ${COLOR_BLUE_PRIMARY}`,\r\n        color: WHITE,\r\n        '&:hover': {\r\n          backgroundColor: COLOR_PRIMARY,\r\n          border: `solid 2px ${COLOR_BLUE_SECCONDARY}`,\r\n        },\r\n      },\r\n      containedPrimary: {\r\n        // backgroundColor: 'linear-gradient(90deg, rgba(132,198,255,1) 10%,\r\n        // rgba(38,153,251,1) 100%)',\r\n        backgroundColor: COLOR_BLUE_PRIMARY,\r\n        color: WHITE,\r\n        '&:hover': {\r\n          backgroundColor: COLOR_BLUE_SECCONDARY,\r\n        },\r\n      },\r\n    },\r\n\r\n    MuiLinearProgress: {\r\n      barColorPrimary: {\r\n        backgroundColor: GREEN,\r\n      },\r\n      colorPrimary: {\r\n        backgroundColor: COLOR_PRIMARY,\r\n      },\r\n    },\r\n\r\n    MuiDialog: {\r\n      root: {\r\n        minWidth: '350px',\r\n      },\r\n    },\r\n\r\n    MuiInputLabel: {},\r\n\r\n    MuiInput: {\r\n      colorSecondary: {\r\n        color: WHITE,\r\n      },\r\n\r\n      underline: {\r\n        borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n\r\n        '&:not($disabled):after': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:hover:not($disabled):after': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:not($disabled):before': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:hover:not($disabled):before': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n      },\r\n    },\r\n  },\r\n})\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { ThemeProvider } from '@material-ui/core'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport { SnackbarProvider } from 'notistack'\r\nimport { Router, Route, Redirect, Switch } from 'react-router-dom'\r\n\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport { SnackbarUtilsConfigurator } from 'shared/helpers/toast.helper'\r\nimport { http, setupInterceptors } from 'shared/http/http'\r\nimport { LoadingBar } from 'shared/loading-bar/containers/loading-bar/loading-bar.component'\r\nimport { AboutPage } from 'shared/components/AboutPage/AboutPage'\r\nimport { timeout } from 'shared/util/timeout'\r\n\r\nimport { store, history, persistedStore } from 'state'\r\nimport { CreateAccountPage } from 'register/containers/CreateAccount/CreateAccountPage'\r\nimport { WalletPage } from 'wallet/containers/WalletPage/WalletPage'\r\nimport { theme } from 'theme'\r\n\r\nsetupInterceptors(http(), store)\r\n\r\nasync function start() {\r\n  await timeout(1000)\r\n\r\n  ReactDOM.render(\r\n    <ThemeProvider theme={theme}>\r\n      <SnackbarProvider maxSnack={5} anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\r\n        {/* <React.StrictMode> */}\r\n        <Provider store={store}>\r\n          <PersistGate loading={null} persistor={persistedStore}>\r\n            <ConnectedRouter history={history}>\r\n              <Router history={history}>\r\n                <Switch>\r\n                  <Route path=\"/welcome\" exact={true} component={CreateAccountPage} />\r\n                  <Route path=\"/about\" exact={true} component={AboutPage} />\r\n                  <Route path=\"/wallet\" exact={true} component={WalletPage} />\r\n                  <Route>\r\n                    <Redirect to=\"/welcome\" />\r\n                  </Route>\r\n                </Switch>\r\n              </Router>\r\n            </ConnectedRouter>\r\n            <LoadingBar />\r\n          </PersistGate>\r\n        </Provider>\r\n        {/* </React.StrictMode> */}\r\n        <SnackbarUtilsConfigurator />\r\n      </SnackbarProvider>\r\n    </ThemeProvider>,\r\n    document.getElementById('root')\r\n  )\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\nstart()\r\n","import { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios'\r\nimport { Store } from 'redux'\r\n\r\nimport { RootState } from 'state'\r\nimport { RequestConfig } from 'shared/http/http'\r\nimport { loadingBarActions } from 'shared/loading-bar/state/loading-bar.actions'\r\n\r\nexport const loadingBarRequestInterceptor = (store: Store<RootState>) => (\r\n  request: AxiosRequestConfig\r\n): AxiosRequestConfig => {\r\n  const { context } = request as RequestConfig\r\n  const noBar = !!context?.noLoadingBar\r\n\r\n  if (!noBar) {\r\n    store.dispatch(loadingBarActions.addRequest())\r\n  }\r\n\r\n  return request\r\n}\r\n\r\nexport const loadingBarResponseInterceptor = (store: Store<RootState>) => (\r\n  response: AxiosResponse\r\n): AxiosResponse => {\r\n  const { context } = response.config as RequestConfig\r\n  const noBar = !!context?.noLoadingBar\r\n\r\n  if (!noBar) {\r\n    store.dispatch(loadingBarActions.removeRequest())\r\n  }\r\n\r\n  return response\r\n}\r\n\r\nexport const loadingBarErrorResponseInterceptor = (store: Store<RootState>) => (\r\n  error: AxiosError\r\n): unknown => {\r\n  const context = (error.config as RequestConfig)?.context\r\n  const noBar = !!context?.noLoadingBar\r\n\r\n  if (!noBar) {\r\n    store.dispatch(loadingBarActions.removeRequest())\r\n  }\r\n\r\n  throw error\r\n}\r\n","import { AxiosRequestConfig } from 'axios'\r\nimport { Store } from 'redux'\r\n\r\nimport { RequestConfig } from 'shared/http/http'\r\nimport { RootState } from 'state'\r\nimport { Provider } from 'shared/models/provider'\r\n\r\nimport providers from 'assets/settings/providers.json'\r\n\r\nexport const authInterceptor = (store: Store<RootState>) => (\r\n  request: AxiosRequestConfig\r\n): AxiosRequestConfig => {\r\n  const { context } = request as RequestConfig\r\n\r\n  if (!context?.provider) {\r\n    return request\r\n  }\r\n\r\n  const authHeaders: Record<string, string>[] = []\r\n  const provider: { authHeader: string; authValue: string } = providers[Provider[context.provider]]\r\n\r\n  authHeaders[provider.authHeader] = provider.authValue\r\n\r\n  return {\r\n    ...request,\r\n    headers: {\r\n      ...request.headers,\r\n      ...authHeaders,\r\n    },\r\n  }\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/logo1.8d914255.svg\";","export enum WalletView {\r\n  Balance = 'Balance',\r\n  Wallets = 'Wallets',\r\n  Transactions = 'Transactions',\r\n  Send = 'Send',\r\n  SendConfirmation = 'SendConfirmation',\r\n  Receive = 'Receive',\r\n  Help = 'Help',\r\n  About = 'About',\r\n  Reset = 'Reset',\r\n}\r\n","export * from './poll-settings'\r\nexport * from './wallet'\r\nexport * from './wallet-view'\r\nexport * from './send-data'\r\nexport * from './wallet-record'\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.38e575e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/guy_welcomes@2x.a8f3ca1a.png\";"],"sourceRoot":""}